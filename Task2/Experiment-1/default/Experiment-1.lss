
Experiment-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000007d  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000022a  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000104  00000000  00000000  000004c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ec  00000000  00000000  000005cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000011f  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000009cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ea       	ldi	r30, 0xAE	; 174
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 ab 00 	call	0x156	; 0x156 <main>
 112:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <port_init>:
Example Call: port_init(); 
*/

void port_init(void)
{
	DDRJ = 	0xFF;				// DDRJ register is used to initialize PortJ as output port. 
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	80 93 04 01 	sts	0x0104, r24
						    //All 8 pins of PortJ is connected to 8 LEDs of Bar graph LED module. 
							//Write suitable value to ensure all 8 LEDs of Bar LED can be used.  
	
	PORTJ = 0x00;				// PORTJ register is used to turn on/off output device. 
 120:	10 92 05 01 	sts	0x0105, r1
	                         //Write suitable value to ensure all 8 LEDs of Bar LED is turned off at the start.  

}
 124:	08 95       	ret

00000126 <led_on_topfour>:

void led_on_topfour(void)
{

//write your code here
 PORTJ = PORTJ | 0xF0;
 126:	e5 e0       	ldi	r30, 0x05	; 5
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	80 81       	ld	r24, Z
 12c:	80 6f       	ori	r24, 0xF0	; 240
 12e:	80 83       	st	Z, r24
}
 130:	08 95       	ret

00000132 <led_off_topfour>:

void led_off_topfour(void)
{
//write your code here

	PORTJ = PORTJ & 0x0F;
 132:	e5 e0       	ldi	r30, 0x05	; 5
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	80 81       	ld	r24, Z
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	80 83       	st	Z, r24
}
 13c:	08 95       	ret

0000013e <led_on_bottomfour>:

void led_on_bottomfour(void)
{
 
 //write your code here
 PORTJ = PORTJ | 0x0F;
 13e:	e5 e0       	ldi	r30, 0x05	; 5
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	80 81       	ld	r24, Z
 144:	8f 60       	ori	r24, 0x0F	; 15
 146:	80 83       	st	Z, r24
}
 148:	08 95       	ret

0000014a <led_off_bottomfour>:
*/
void led_off_bottomfour(void)
{

//write your code here
PORTJ = PORTJ & 0xF0;
 14a:	e5 e0       	ldi	r30, 0x05	; 5
 14c:	f1 e0       	ldi	r31, 0x01	; 1
 14e:	80 81       	ld	r24, Z
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	80 83       	st	Z, r24
}
 154:	08 95       	ret

00000156 <main>:
Example Call: port_init(); 
*/

void port_init(void)
{
	DDRJ = 	0xFF;				// DDRJ register is used to initialize PortJ as output port. 
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	80 93 04 01 	sts	0x0104, r24
						    //All 8 pins of PortJ is connected to 8 LEDs of Bar graph LED module. 
							//Write suitable value to ensure all 8 LEDs of Bar LED can be used.  
	
	PORTJ = 0x00;				// PORTJ register is used to turn on/off output device. 
 15c:	10 92 05 01 	sts	0x0105, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 160:	20 e7       	ldi	r18, 0x70	; 112
 162:	31 e0       	ldi	r19, 0x01	; 1

void led_on_topfour(void)
{

//write your code here
 PORTJ = PORTJ | 0xF0;
 164:	80 91 05 01 	lds	r24, 0x0105
 168:	80 6f       	ori	r24, 0xF0	; 240
 16a:	80 93 05 01 	sts	0x0105, r24
*/
void led_off_bottomfour(void)
{

//write your code here
PORTJ = PORTJ & 0xF0;
 16e:	80 91 05 01 	lds	r24, 0x0105
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	80 93 05 01 	sts	0x0105, r24
 178:	80 e1       	ldi	r24, 0x10	; 16
 17a:	97 e2       	ldi	r25, 0x27	; 39
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 184:	d9 f7       	brne	.-10     	; 0x17c <main+0x26>

void led_off_topfour(void)
{
//write your code here

	PORTJ = PORTJ & 0x0F;
 186:	80 91 05 01 	lds	r24, 0x0105
 18a:	8f 70       	andi	r24, 0x0F	; 15
 18c:	80 93 05 01 	sts	0x0105, r24

void led_on_bottomfour(void)
{
 
 //write your code here
 PORTJ = PORTJ | 0x0F;
 190:	80 91 05 01 	lds	r24, 0x0105
 194:	8f 60       	ori	r24, 0x0F	; 15
 196:	80 93 05 01 	sts	0x0105, r24
 19a:	80 e1       	ldi	r24, 0x10	; 16
 19c:	97 e2       	ldi	r25, 0x27	; 39
 19e:	f9 01       	movw	r30, r18
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a6:	d9 f7       	brne	.-10     	; 0x19e <main+0x48>
 1a8:	dd cf       	rjmp	.-70     	; 0x164 <main+0xe>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
