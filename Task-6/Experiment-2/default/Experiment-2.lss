
Experiment-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00002146  000021da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800208  00800208  000021e2  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000021e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000018e  00000000  00000000  00002222  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081e  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ed  00000000  00000000  00002bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b29  00000000  00000000  00002dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000038e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020f  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e4       	ldi	r30, 0x46	; 70
      fc:	f1 e2       	ldi	r31, 0x21	; 33
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 31       	cpi	r26, 0x14	; 20
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 35 01 	call	0x26a	; 0x26a <main>
     122:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_port_config>:
		 viz. DDRx and PORTx.
Example Call: lcd_port_config 
*/

void lcd_port_config ()
	{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	 
	 DDRC= 0xF7; // All Port C pins except Pin no. 4 i.e(PC3) have to be set as output.
     132:	e7 e2       	ldi	r30, 0x27	; 39
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	87 ef       	ldi	r24, 0xF7	; 247
     138:	80 83       	st	Z, r24

	 PORTC= 0x00 ; // Write suitable value in the PORT C register to make initial values to be "0" 
     13a:	e8 e2       	ldi	r30, 0x28	; 40
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	10 82       	st	Z, r1
	 		  //Set initial value as "0" on all pins except Pin no.4 (PC3)
	 
	}
     140:	cf 91       	pop	r28
     142:	df 91       	pop	r29
     144:	08 95       	ret

00000146 <adc_pin_config>:
* Logic: Code to initialize desired I/O port using IO port registers 
		 viz. DDRx and PORTx.
Example Call: adc_pin_config 
*/
void adc_pin_config (void)
{
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00;// All Port F pins have to be set as input.
     14e:	e0 e3       	ldi	r30, 0x30	; 48
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	10 82       	st	Z, r1
 PORTF = 0x00 ;// Write suitable value in the PORT F register to make initial values to be "0"
     154:	e1 e3       	ldi	r30, 0x31	; 49
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	10 82       	st	Z, r1
 DDRK = 0x00 ;//All Port K pins have to be set as input
     15a:	e7 e0       	ldi	r30, 0x07	; 7
     15c:	f1 e0       	ldi	r31, 0x01	; 1
     15e:	10 82       	st	Z, r1
 PORTK = 0x00 ;// Write suitable value in the PORT K register to make initial values to be "0"
     160:	e8 e0       	ldi	r30, 0x08	; 8
     162:	f1 e0       	ldi	r31, 0x01	; 1
     164:	10 82       	st	Z, r1
}
     166:	cf 91       	pop	r28
     168:	df 91       	pop	r29
     16a:	08 95       	ret

0000016c <motion_pin_config>:
* Logic: Code to initialize desired I/O port using IO port registers 
		 viz. DDRx and PORTx.
Example Call: motion_pin_config () 
*/
void motion_pin_config (void) 
{
     16c:	df 93       	push	r29
     16e:	cf 93       	push	r28
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
 DDRA = 0xFF ;	//  Port A pins(PA3-PA0) have to be set as outputs.
     174:	e1 e2       	ldi	r30, 0x21	; 33
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	80 83       	st	Z, r24
 PORTA = 0xFF;	// Write suitable value in the PORT A register to make initial values to be "0"
     17c:	e2 e2       	ldi	r30, 0x22	; 34
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	80 83       	st	Z, r24
 DDRL = 0x18;  	//Setting PL3 and PL4 pins as output for PWM generation
     184:	ea e0       	ldi	r30, 0x0A	; 10
     186:	f1 e0       	ldi	r31, 0x01	; 1
     188:	88 e1       	ldi	r24, 0x18	; 24
     18a:	80 83       	st	Z, r24
 PORTL = 0x18 ;	////Write suitable value in the PORT L register to set initial value of the Port L pins (PL3, PL4) to logic 1.
     18c:	eb e0       	ldi	r30, 0x0B	; 11
     18e:	f1 e0       	ldi	r31, 0x01	; 1
     190:	88 e1       	ldi	r24, 0x18	; 24
     192:	80 83       	st	Z, r24
}
     194:	cf 91       	pop	r28
     196:	df 91       	pop	r29
     198:	08 95       	ret

0000019a <velocity>:
* Output: none
* Logic: Function for robot velocity control
Example Call: velocity (left motor velocity, right motor velocity)
*/
void velocity (unsigned char left_motor, unsigned char right_motor)
{
     19a:	df 93       	push	r29
     19c:	cf 93       	push	r28
     19e:	0f 92       	push	r0
     1a0:	0f 92       	push	r0
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	89 83       	std	Y+1, r24	; 0x01
     1a8:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     1aa:	e8 e2       	ldi	r30, 0x28	; 40
     1ac:	f1 e0       	ldi	r31, 0x01	; 1
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     1b2:	ea e2       	ldi	r30, 0x2A	; 42
     1b4:	f1 e0       	ldi	r31, 0x01	; 1
     1b6:	8a 81       	ldd	r24, Y+2	; 0x02
     1b8:	80 83       	st	Z, r24
}
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	cf 91       	pop	r28
     1c0:	df 91       	pop	r29
     1c2:	08 95       	ret

000001c4 <adc_init>:
* Logic: Code to initialize the register to generate the PWM using timer 5 
		 viz. ADCSRA,ADCSRB,ADMUX,ACSR
Example Call: adc_init()
*/
void adc_init()
{
     1c4:	df 93       	push	r29
     1c6:	cf 93       	push	r28
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00 ;	//Write suitable value in this register to disable ADC during initialization.
     1cc:	ea e7       	ldi	r30, 0x7A	; 122
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	10 82       	st	Z, r1
	ADCSRB = 0x00 ;	//Write suitable value in this register for initialization.
     1d2:	eb e7       	ldi	r30, 0x7B	; 123
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	10 82       	st	Z, r1
	ADMUX = 0x20 ;	//Write appropraite value in the ADMUX register to select external Reference voltage (connected to AREF pin) and left adjustment active.
     1d8:	ec e7       	ldi	r30, 0x7C	; 124
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 e2       	ldi	r24, 0x20	; 32
     1de:	80 83       	st	Z, r24
	ACSR = 0x80 ;	//Disable the analog comparator.
     1e0:	e0 e5       	ldi	r30, 0x50	; 80
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 e8       	ldi	r24, 0x80	; 128
     1e6:	80 83       	st	Z, r24
	ADCSRA = 0x86  ;	//Write suitable value to this register to enable ADC and to select the required prescalar. 
     1e8:	ea e7       	ldi	r30, 0x7A	; 122
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	86 e8       	ldi	r24, 0x86	; 134
     1ee:	80 83       	st	Z, r24
}
     1f0:	cf 91       	pop	r28
     1f2:	df 91       	pop	r29
     1f4:	08 95       	ret

000001f6 <ADC_Conversion_wl_sensor>:
Example Call: ADC_Conversion_wl_sensor( ADC channel number) 
*/

//Function For ADC Conversion
unsigned char ADC_Conversion_wl_sensor(unsigned char Ch) 
{
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	0f 92       	push	r0
     1fc:	0f 92       	push	r0
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	8a 83       	std	Y+2, r24	; 0x02
	//This function accepts ADC channel number as an input and returns the digital equivalent of the analog value read by the sensor.  
	// Complete the code to write appropriate value in the ADMUX register based on the input channel number passed.
	// Start the ADC conversion and return its digital equivalent value.
  unsigned char a;
	if(Ch>7)
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	88 30       	cpi	r24, 0x08	; 8
     208:	20 f0       	brcs	.+8      	; 0x212 <ADC_Conversion_wl_sensor+0x1c>
	{
		ADCSRB = 0x08;
     20a:	eb e7       	ldi	r30, 0x7B	; 123
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	88 e0       	ldi	r24, 0x08	; 8
     210:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
     212:	8a 81       	ldd	r24, Y+2	; 0x02
     214:	87 70       	andi	r24, 0x07	; 7
     216:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
     218:	ec e7       	ldi	r30, 0x7C	; 124
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	80 62       	ori	r24, 0x20	; 32
     220:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     222:	aa e7       	ldi	r26, 0x7A	; 122
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	ea e7       	ldi	r30, 0x7A	; 122
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	80 64       	ori	r24, 0x40	; 64
     22e:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     230:	ea e7       	ldi	r30, 0x7A	; 122
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	88 2f       	mov	r24, r24
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	80 71       	andi	r24, 0x10	; 16
     23c:	90 70       	andi	r25, 0x00	; 0
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	b9 f3       	breq	.-18     	; 0x230 <ADC_Conversion_wl_sensor+0x3a>
	a=ADCH;
     242:	e9 e7       	ldi	r30, 0x79	; 121
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     24a:	aa e7       	ldi	r26, 0x7A	; 122
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	ea e7       	ldi	r30, 0x7A	; 122
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	80 61       	ori	r24, 0x10	; 16
     256:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     258:	eb e7       	ldi	r30, 0x7B	; 123
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	10 82       	st	Z, r1
	return a;
     25e:	89 81       	ldd	r24, Y+1	; 0x01
}
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	08 95       	ret

0000026a <main>:




int main()
{
     26a:	df 93       	push	r29
     26c:	cf 93       	push	r28
     26e:	00 d0       	rcall	.+0      	; 0x270 <main+0x6>
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
lcd_port_config();
     274:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_port_config>
motion_pin_config();
     278:	0e 94 b6 00 	call	0x16c	; 0x16c <motion_pin_config>
adc_pin_config();
     27c:	0e 94 a3 00 	call	0x146	; 0x146 <adc_pin_config>
adc_init();
     280:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <adc_init>
lcd_init();
     284:	0e 94 6e 06 	call	0xcdc	; 0xcdc <lcd_init>
  //write code to implement white line following algorithm. Refer to the tutorial uploaded on the portal.
  
  //stop the robot if any obstacle is detected within 15 cm distance
  //You can use lcd_print function to print the sensor values for better debugging.

  w1=ADC_Conversion_wl_sensor(1);
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <ADC_Conversion_wl_sensor>
     28e:	8b 83       	std	Y+3, r24	; 0x03
  w2=ADC_Conversion_wl_sensor(2);
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <ADC_Conversion_wl_sensor>
     296:	8a 83       	std	Y+2, r24	; 0x02
  w3=ADC_Conversion_wl_sensor(3);
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <ADC_Conversion_wl_sensor>
     29e:	89 83       	std	Y+1, r24	; 0x01

  lcd_print(1,1,w1,3);
     2a0:	8b 81       	ldd	r24, Y+3	; 0x03
     2a2:	28 2f       	mov	r18, r24
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	a9 01       	movw	r20, r18
     2ac:	23 e0       	ldi	r18, 0x03	; 3
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	0e 94 17 0a 	call	0x142e	; 0x142e <lcd_print>
  lcd_print(1,6,w2,3);
     2b4:	8a 81       	ldd	r24, Y+2	; 0x02
     2b6:	28 2f       	mov	r18, r24
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	66 e0       	ldi	r22, 0x06	; 6
     2be:	a9 01       	movw	r20, r18
     2c0:	23 e0       	ldi	r18, 0x03	; 3
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	0e 94 17 0a 	call	0x142e	; 0x142e <lcd_print>
  lcd_print(1,12,w3,3);
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	28 2f       	mov	r18, r24
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	6c e0       	ldi	r22, 0x0C	; 12
     2d2:	a9 01       	movw	r20, r18
     2d4:	23 e0       	ldi	r18, 0x03	; 3
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	0e 94 17 0a 	call	0x142e	; 0x142e <lcd_print>
     2dc:	d5 cf       	rjmp	.-86     	; 0x288 <main+0x1e>

000002de <lcd_set_4bit>:
#include <util/delay.h>
#include "lcd.h"		// user-defined header file - it is included in project folder

//Function to set LCD in 4-bit mode 
void lcd_set_4bit()
{
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	df 93       	push	r29
     2e4:	cf 93       	push	r28
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	c0 57       	subi	r28, 0x70	; 112
     2ec:	d0 40       	sbci	r29, 0x00	; 0
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	fe 01       	movw	r30, r28
     2fa:	e3 59       	subi	r30, 0x93	; 147
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	a0 e8       	ldi	r26, 0x80	; 128
     304:	bf e3       	ldi	r27, 0x3F	; 63
     306:	80 83       	st	Z, r24
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	a2 83       	std	Z+2, r26	; 0x02
     30c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     30e:	8e 01       	movw	r16, r28
     310:	07 59       	subi	r16, 0x97	; 151
     312:	1f 4f       	sbci	r17, 0xFF	; 255
     314:	fe 01       	movw	r30, r28
     316:	e3 59       	subi	r30, 0x93	; 147
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	60 81       	ld	r22, Z
     31c:	71 81       	ldd	r23, Z+1	; 0x01
     31e:	82 81       	ldd	r24, Z+2	; 0x02
     320:	93 81       	ldd	r25, Z+3	; 0x03
     322:	26 e6       	ldi	r18, 0x66	; 102
     324:	36 e6       	ldi	r19, 0x66	; 102
     326:	46 e6       	ldi	r20, 0x66	; 102
     328:	55 e4       	ldi	r21, 0x45	; 69
     32a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     32e:	dc 01       	movw	r26, r24
     330:	cb 01       	movw	r24, r22
     332:	f8 01       	movw	r30, r16
     334:	80 83       	st	Z, r24
     336:	91 83       	std	Z+1, r25	; 0x01
     338:	a2 83       	std	Z+2, r26	; 0x02
     33a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     33c:	fe 01       	movw	r30, r28
     33e:	e7 59       	subi	r30, 0x97	; 151
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	60 81       	ld	r22, Z
     344:	71 81       	ldd	r23, Z+1	; 0x01
     346:	82 81       	ldd	r24, Z+2	; 0x02
     348:	93 81       	ldd	r25, Z+3	; 0x03
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e8       	ldi	r20, 0x80	; 128
     350:	5f e3       	ldi	r21, 0x3F	; 63
     352:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     356:	88 23       	and	r24, r24
     358:	44 f4       	brge	.+16     	; 0x36a <lcd_set_4bit+0x8c>
		__ticks = 1;
     35a:	fe 01       	movw	r30, r28
     35c:	e9 59       	subi	r30, 0x99	; 153
     35e:	ff 4f       	sbci	r31, 0xFF	; 255
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	91 83       	std	Z+1, r25	; 0x01
     366:	80 83       	st	Z, r24
     368:	64 c0       	rjmp	.+200    	; 0x432 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     36a:	fe 01       	movw	r30, r28
     36c:	e7 59       	subi	r30, 0x97	; 151
     36e:	ff 4f       	sbci	r31, 0xFF	; 255
     370:	60 81       	ld	r22, Z
     372:	71 81       	ldd	r23, Z+1	; 0x01
     374:	82 81       	ldd	r24, Z+2	; 0x02
     376:	93 81       	ldd	r25, Z+3	; 0x03
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	3f ef       	ldi	r19, 0xFF	; 255
     37c:	4f e7       	ldi	r20, 0x7F	; 127
     37e:	57 e4       	ldi	r21, 0x47	; 71
     380:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
     384:	18 16       	cp	r1, r24
     386:	0c f0       	brlt	.+2      	; 0x38a <lcd_set_4bit+0xac>
     388:	43 c0       	rjmp	.+134    	; 0x410 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     38a:	fe 01       	movw	r30, r28
     38c:	e3 59       	subi	r30, 0x93	; 147
     38e:	ff 4f       	sbci	r31, 0xFF	; 255
     390:	60 81       	ld	r22, Z
     392:	71 81       	ldd	r23, Z+1	; 0x01
     394:	82 81       	ldd	r24, Z+2	; 0x02
     396:	93 81       	ldd	r25, Z+3	; 0x03
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	40 e2       	ldi	r20, 0x20	; 32
     39e:	51 e4       	ldi	r21, 0x41	; 65
     3a0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     3a4:	dc 01       	movw	r26, r24
     3a6:	cb 01       	movw	r24, r22
     3a8:	8e 01       	movw	r16, r28
     3aa:	09 59       	subi	r16, 0x99	; 153
     3ac:	1f 4f       	sbci	r17, 0xFF	; 255
     3ae:	bc 01       	movw	r22, r24
     3b0:	cd 01       	movw	r24, r26
     3b2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     3b6:	dc 01       	movw	r26, r24
     3b8:	cb 01       	movw	r24, r22
     3ba:	f8 01       	movw	r30, r16
     3bc:	91 83       	std	Z+1, r25	; 0x01
     3be:	80 83       	st	Z, r24
     3c0:	1f c0       	rjmp	.+62     	; 0x400 <lcd_set_4bit+0x122>
     3c2:	fe 01       	movw	r30, r28
     3c4:	eb 59       	subi	r30, 0x9B	; 155
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	80 e7       	ldi	r24, 0x70	; 112
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	91 83       	std	Z+1, r25	; 0x01
     3ce:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3d0:	fe 01       	movw	r30, r28
     3d2:	eb 59       	subi	r30, 0x9B	; 155
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	80 81       	ld	r24, Z
     3d8:	91 81       	ldd	r25, Z+1	; 0x01
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <lcd_set_4bit+0xfc>
     3de:	fe 01       	movw	r30, r28
     3e0:	eb 59       	subi	r30, 0x9B	; 155
     3e2:	ff 4f       	sbci	r31, 0xFF	; 255
     3e4:	91 83       	std	Z+1, r25	; 0x01
     3e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3e8:	de 01       	movw	r26, r28
     3ea:	a9 59       	subi	r26, 0x99	; 153
     3ec:	bf 4f       	sbci	r27, 0xFF	; 255
     3ee:	fe 01       	movw	r30, r28
     3f0:	e9 59       	subi	r30, 0x99	; 153
     3f2:	ff 4f       	sbci	r31, 0xFF	; 255
     3f4:	80 81       	ld	r24, Z
     3f6:	91 81       	ldd	r25, Z+1	; 0x01
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	11 96       	adiw	r26, 0x01	; 1
     3fc:	9c 93       	st	X, r25
     3fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     400:	fe 01       	movw	r30, r28
     402:	e9 59       	subi	r30, 0x99	; 153
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	80 81       	ld	r24, Z
     408:	91 81       	ldd	r25, Z+1	; 0x01
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	d1 f6       	brne	.-76     	; 0x3c2 <lcd_set_4bit+0xe4>
     40e:	27 c0       	rjmp	.+78     	; 0x45e <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     410:	8e 01       	movw	r16, r28
     412:	09 59       	subi	r16, 0x99	; 153
     414:	1f 4f       	sbci	r17, 0xFF	; 255
     416:	fe 01       	movw	r30, r28
     418:	e7 59       	subi	r30, 0x97	; 151
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	60 81       	ld	r22, Z
     41e:	71 81       	ldd	r23, Z+1	; 0x01
     420:	82 81       	ldd	r24, Z+2	; 0x02
     422:	93 81       	ldd	r25, Z+3	; 0x03
     424:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     428:	dc 01       	movw	r26, r24
     42a:	cb 01       	movw	r24, r22
     42c:	f8 01       	movw	r30, r16
     42e:	91 83       	std	Z+1, r25	; 0x01
     430:	80 83       	st	Z, r24
     432:	de 01       	movw	r26, r28
     434:	ad 59       	subi	r26, 0x9D	; 157
     436:	bf 4f       	sbci	r27, 0xFF	; 255
     438:	fe 01       	movw	r30, r28
     43a:	e9 59       	subi	r30, 0x99	; 153
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	80 81       	ld	r24, Z
     440:	91 81       	ldd	r25, Z+1	; 0x01
     442:	8d 93       	st	X+, r24
     444:	9c 93       	st	X, r25
     446:	fe 01       	movw	r30, r28
     448:	ed 59       	subi	r30, 0x9D	; 157
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <lcd_set_4bit+0x172>
     454:	fe 01       	movw	r30, r28
     456:	ed 59       	subi	r30, 0x9D	; 157
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	91 83       	std	Z+1, r25	; 0x01
     45c:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     45e:	a8 e2       	ldi	r26, 0x28	; 40
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	e8 e2       	ldi	r30, 0x28	; 40
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	8e 7f       	andi	r24, 0xFE	; 254
     46a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     46c:	a8 e2       	ldi	r26, 0x28	; 40
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e8 e2       	ldi	r30, 0x28	; 40
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	8d 7f       	andi	r24, 0xFD	; 253
     478:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     47a:	e8 e2       	ldi	r30, 0x28	; 40
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 e3       	ldi	r24, 0x30	; 48
     480:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     482:	a8 e2       	ldi	r26, 0x28	; 40
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e8 e2       	ldi	r30, 0x28	; 40
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	84 60       	ori	r24, 0x04	; 4
     48e:	8c 93       	st	X, r24
     490:	fe 01       	movw	r30, r28
     492:	e1 5a       	subi	r30, 0xA1	; 161
     494:	ff 4f       	sbci	r31, 0xFF	; 255
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	a0 ea       	ldi	r26, 0xA0	; 160
     49c:	b0 e4       	ldi	r27, 0x40	; 64
     49e:	80 83       	st	Z, r24
     4a0:	91 83       	std	Z+1, r25	; 0x01
     4a2:	a2 83       	std	Z+2, r26	; 0x02
     4a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4a6:	8e 01       	movw	r16, r28
     4a8:	05 5a       	subi	r16, 0xA5	; 165
     4aa:	1f 4f       	sbci	r17, 0xFF	; 255
     4ac:	fe 01       	movw	r30, r28
     4ae:	e1 5a       	subi	r30, 0xA1	; 161
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	60 81       	ld	r22, Z
     4b4:	71 81       	ldd	r23, Z+1	; 0x01
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	93 81       	ldd	r25, Z+3	; 0x03
     4ba:	26 e6       	ldi	r18, 0x66	; 102
     4bc:	36 e6       	ldi	r19, 0x66	; 102
     4be:	46 e6       	ldi	r20, 0x66	; 102
     4c0:	55 e4       	ldi	r21, 0x45	; 69
     4c2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
     4ca:	f8 01       	movw	r30, r16
     4cc:	80 83       	st	Z, r24
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	a2 83       	std	Z+2, r26	; 0x02
     4d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4d4:	fe 01       	movw	r30, r28
     4d6:	e5 5a       	subi	r30, 0xA5	; 165
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	60 81       	ld	r22, Z
     4dc:	71 81       	ldd	r23, Z+1	; 0x01
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	93 81       	ldd	r25, Z+3	; 0x03
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e8       	ldi	r20, 0x80	; 128
     4e8:	5f e3       	ldi	r21, 0x3F	; 63
     4ea:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     4ee:	88 23       	and	r24, r24
     4f0:	44 f4       	brge	.+16     	; 0x502 <lcd_set_4bit+0x224>
		__ticks = 1;
     4f2:	fe 01       	movw	r30, r28
     4f4:	e7 5a       	subi	r30, 0xA7	; 167
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	91 83       	std	Z+1, r25	; 0x01
     4fe:	80 83       	st	Z, r24
     500:	64 c0       	rjmp	.+200    	; 0x5ca <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     502:	fe 01       	movw	r30, r28
     504:	e5 5a       	subi	r30, 0xA5	; 165
     506:	ff 4f       	sbci	r31, 0xFF	; 255
     508:	60 81       	ld	r22, Z
     50a:	71 81       	ldd	r23, Z+1	; 0x01
     50c:	82 81       	ldd	r24, Z+2	; 0x02
     50e:	93 81       	ldd	r25, Z+3	; 0x03
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	3f ef       	ldi	r19, 0xFF	; 255
     514:	4f e7       	ldi	r20, 0x7F	; 127
     516:	57 e4       	ldi	r21, 0x47	; 71
     518:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
     51c:	18 16       	cp	r1, r24
     51e:	0c f0       	brlt	.+2      	; 0x522 <lcd_set_4bit+0x244>
     520:	43 c0       	rjmp	.+134    	; 0x5a8 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     522:	fe 01       	movw	r30, r28
     524:	e1 5a       	subi	r30, 0xA1	; 161
     526:	ff 4f       	sbci	r31, 0xFF	; 255
     528:	60 81       	ld	r22, Z
     52a:	71 81       	ldd	r23, Z+1	; 0x01
     52c:	82 81       	ldd	r24, Z+2	; 0x02
     52e:	93 81       	ldd	r25, Z+3	; 0x03
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e2       	ldi	r20, 0x20	; 32
     536:	51 e4       	ldi	r21, 0x41	; 65
     538:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	8e 01       	movw	r16, r28
     542:	07 5a       	subi	r16, 0xA7	; 167
     544:	1f 4f       	sbci	r17, 0xFF	; 255
     546:	bc 01       	movw	r22, r24
     548:	cd 01       	movw	r24, r26
     54a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     54e:	dc 01       	movw	r26, r24
     550:	cb 01       	movw	r24, r22
     552:	f8 01       	movw	r30, r16
     554:	91 83       	std	Z+1, r25	; 0x01
     556:	80 83       	st	Z, r24
     558:	1f c0       	rjmp	.+62     	; 0x598 <lcd_set_4bit+0x2ba>
     55a:	fe 01       	movw	r30, r28
     55c:	e9 5a       	subi	r30, 0xA9	; 169
     55e:	ff 4f       	sbci	r31, 0xFF	; 255
     560:	80 e7       	ldi	r24, 0x70	; 112
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	91 83       	std	Z+1, r25	; 0x01
     566:	80 83       	st	Z, r24
     568:	fe 01       	movw	r30, r28
     56a:	e9 5a       	subi	r30, 0xA9	; 169
     56c:	ff 4f       	sbci	r31, 0xFF	; 255
     56e:	80 81       	ld	r24, Z
     570:	91 81       	ldd	r25, Z+1	; 0x01
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <lcd_set_4bit+0x294>
     576:	fe 01       	movw	r30, r28
     578:	e9 5a       	subi	r30, 0xA9	; 169
     57a:	ff 4f       	sbci	r31, 0xFF	; 255
     57c:	91 83       	std	Z+1, r25	; 0x01
     57e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     580:	de 01       	movw	r26, r28
     582:	a7 5a       	subi	r26, 0xA7	; 167
     584:	bf 4f       	sbci	r27, 0xFF	; 255
     586:	fe 01       	movw	r30, r28
     588:	e7 5a       	subi	r30, 0xA7	; 167
     58a:	ff 4f       	sbci	r31, 0xFF	; 255
     58c:	80 81       	ld	r24, Z
     58e:	91 81       	ldd	r25, Z+1	; 0x01
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	11 96       	adiw	r26, 0x01	; 1
     594:	9c 93       	st	X, r25
     596:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     598:	fe 01       	movw	r30, r28
     59a:	e7 5a       	subi	r30, 0xA7	; 167
     59c:	ff 4f       	sbci	r31, 0xFF	; 255
     59e:	80 81       	ld	r24, Z
     5a0:	91 81       	ldd	r25, Z+1	; 0x01
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	d1 f6       	brne	.-76     	; 0x55a <lcd_set_4bit+0x27c>
     5a6:	27 c0       	rjmp	.+78     	; 0x5f6 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5a8:	8e 01       	movw	r16, r28
     5aa:	07 5a       	subi	r16, 0xA7	; 167
     5ac:	1f 4f       	sbci	r17, 0xFF	; 255
     5ae:	fe 01       	movw	r30, r28
     5b0:	e5 5a       	subi	r30, 0xA5	; 165
     5b2:	ff 4f       	sbci	r31, 0xFF	; 255
     5b4:	60 81       	ld	r22, Z
     5b6:	71 81       	ldd	r23, Z+1	; 0x01
     5b8:	82 81       	ldd	r24, Z+2	; 0x02
     5ba:	93 81       	ldd	r25, Z+3	; 0x03
     5bc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	f8 01       	movw	r30, r16
     5c6:	91 83       	std	Z+1, r25	; 0x01
     5c8:	80 83       	st	Z, r24
     5ca:	de 01       	movw	r26, r28
     5cc:	ab 5a       	subi	r26, 0xAB	; 171
     5ce:	bf 4f       	sbci	r27, 0xFF	; 255
     5d0:	fe 01       	movw	r30, r28
     5d2:	e7 5a       	subi	r30, 0xA7	; 167
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	80 81       	ld	r24, Z
     5d8:	91 81       	ldd	r25, Z+1	; 0x01
     5da:	8d 93       	st	X+, r24
     5dc:	9c 93       	st	X, r25
     5de:	fe 01       	movw	r30, r28
     5e0:	eb 5a       	subi	r30, 0xAB	; 171
     5e2:	ff 4f       	sbci	r31, 0xFF	; 255
     5e4:	80 81       	ld	r24, Z
     5e6:	91 81       	ldd	r25, Z+1	; 0x01
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <lcd_set_4bit+0x30a>
     5ec:	fe 01       	movw	r30, r28
     5ee:	eb 5a       	subi	r30, 0xAB	; 171
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	91 83       	std	Z+1, r25	; 0x01
     5f4:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     5f6:	a8 e2       	ldi	r26, 0x28	; 40
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e8 e2       	ldi	r30, 0x28	; 40
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	8b 7f       	andi	r24, 0xFB	; 251
     602:	8c 93       	st	X, r24
     604:	fe 01       	movw	r30, r28
     606:	ef 5a       	subi	r30, 0xAF	; 175
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a0 e8       	ldi	r26, 0x80	; 128
     610:	bf e3       	ldi	r27, 0x3F	; 63
     612:	80 83       	st	Z, r24
     614:	91 83       	std	Z+1, r25	; 0x01
     616:	a2 83       	std	Z+2, r26	; 0x02
     618:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     61a:	8e 01       	movw	r16, r28
     61c:	03 5b       	subi	r16, 0xB3	; 179
     61e:	1f 4f       	sbci	r17, 0xFF	; 255
     620:	fe 01       	movw	r30, r28
     622:	ef 5a       	subi	r30, 0xAF	; 175
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	60 81       	ld	r22, Z
     628:	71 81       	ldd	r23, Z+1	; 0x01
     62a:	82 81       	ldd	r24, Z+2	; 0x02
     62c:	93 81       	ldd	r25, Z+3	; 0x03
     62e:	26 e6       	ldi	r18, 0x66	; 102
     630:	36 e6       	ldi	r19, 0x66	; 102
     632:	46 e6       	ldi	r20, 0x66	; 102
     634:	55 e4       	ldi	r21, 0x45	; 69
     636:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	f8 01       	movw	r30, r16
     640:	80 83       	st	Z, r24
     642:	91 83       	std	Z+1, r25	; 0x01
     644:	a2 83       	std	Z+2, r26	; 0x02
     646:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     648:	fe 01       	movw	r30, r28
     64a:	e3 5b       	subi	r30, 0xB3	; 179
     64c:	ff 4f       	sbci	r31, 0xFF	; 255
     64e:	60 81       	ld	r22, Z
     650:	71 81       	ldd	r23, Z+1	; 0x01
     652:	82 81       	ldd	r24, Z+2	; 0x02
     654:	93 81       	ldd	r25, Z+3	; 0x03
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e8       	ldi	r20, 0x80	; 128
     65c:	5f e3       	ldi	r21, 0x3F	; 63
     65e:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     662:	88 23       	and	r24, r24
     664:	44 f4       	brge	.+16     	; 0x676 <lcd_set_4bit+0x398>
		__ticks = 1;
     666:	fe 01       	movw	r30, r28
     668:	e5 5b       	subi	r30, 0xB5	; 181
     66a:	ff 4f       	sbci	r31, 0xFF	; 255
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	91 83       	std	Z+1, r25	; 0x01
     672:	80 83       	st	Z, r24
     674:	64 c0       	rjmp	.+200    	; 0x73e <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     676:	fe 01       	movw	r30, r28
     678:	e3 5b       	subi	r30, 0xB3	; 179
     67a:	ff 4f       	sbci	r31, 0xFF	; 255
     67c:	60 81       	ld	r22, Z
     67e:	71 81       	ldd	r23, Z+1	; 0x01
     680:	82 81       	ldd	r24, Z+2	; 0x02
     682:	93 81       	ldd	r25, Z+3	; 0x03
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	3f ef       	ldi	r19, 0xFF	; 255
     688:	4f e7       	ldi	r20, 0x7F	; 127
     68a:	57 e4       	ldi	r21, 0x47	; 71
     68c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
     690:	18 16       	cp	r1, r24
     692:	0c f0       	brlt	.+2      	; 0x696 <lcd_set_4bit+0x3b8>
     694:	43 c0       	rjmp	.+134    	; 0x71c <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     696:	fe 01       	movw	r30, r28
     698:	ef 5a       	subi	r30, 0xAF	; 175
     69a:	ff 4f       	sbci	r31, 0xFF	; 255
     69c:	60 81       	ld	r22, Z
     69e:	71 81       	ldd	r23, Z+1	; 0x01
     6a0:	82 81       	ldd	r24, Z+2	; 0x02
     6a2:	93 81       	ldd	r25, Z+3	; 0x03
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	40 e2       	ldi	r20, 0x20	; 32
     6aa:	51 e4       	ldi	r21, 0x41	; 65
     6ac:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     6b0:	dc 01       	movw	r26, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	8e 01       	movw	r16, r28
     6b6:	05 5b       	subi	r16, 0xB5	; 181
     6b8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ba:	bc 01       	movw	r22, r24
     6bc:	cd 01       	movw	r24, r26
     6be:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     6c2:	dc 01       	movw	r26, r24
     6c4:	cb 01       	movw	r24, r22
     6c6:	f8 01       	movw	r30, r16
     6c8:	91 83       	std	Z+1, r25	; 0x01
     6ca:	80 83       	st	Z, r24
     6cc:	1f c0       	rjmp	.+62     	; 0x70c <lcd_set_4bit+0x42e>
     6ce:	fe 01       	movw	r30, r28
     6d0:	e7 5b       	subi	r30, 0xB7	; 183
     6d2:	ff 4f       	sbci	r31, 0xFF	; 255
     6d4:	80 e7       	ldi	r24, 0x70	; 112
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	91 83       	std	Z+1, r25	; 0x01
     6da:	80 83       	st	Z, r24
     6dc:	fe 01       	movw	r30, r28
     6de:	e7 5b       	subi	r30, 0xB7	; 183
     6e0:	ff 4f       	sbci	r31, 0xFF	; 255
     6e2:	80 81       	ld	r24, Z
     6e4:	91 81       	ldd	r25, Z+1	; 0x01
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <lcd_set_4bit+0x408>
     6ea:	fe 01       	movw	r30, r28
     6ec:	e7 5b       	subi	r30, 0xB7	; 183
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255
     6f0:	91 83       	std	Z+1, r25	; 0x01
     6f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f4:	de 01       	movw	r26, r28
     6f6:	a5 5b       	subi	r26, 0xB5	; 181
     6f8:	bf 4f       	sbci	r27, 0xFF	; 255
     6fa:	fe 01       	movw	r30, r28
     6fc:	e5 5b       	subi	r30, 0xB5	; 181
     6fe:	ff 4f       	sbci	r31, 0xFF	; 255
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	11 96       	adiw	r26, 0x01	; 1
     708:	9c 93       	st	X, r25
     70a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70c:	fe 01       	movw	r30, r28
     70e:	e5 5b       	subi	r30, 0xB5	; 181
     710:	ff 4f       	sbci	r31, 0xFF	; 255
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	00 97       	sbiw	r24, 0x00	; 0
     718:	d1 f6       	brne	.-76     	; 0x6ce <lcd_set_4bit+0x3f0>
     71a:	27 c0       	rjmp	.+78     	; 0x76a <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     71c:	8e 01       	movw	r16, r28
     71e:	05 5b       	subi	r16, 0xB5	; 181
     720:	1f 4f       	sbci	r17, 0xFF	; 255
     722:	fe 01       	movw	r30, r28
     724:	e3 5b       	subi	r30, 0xB3	; 179
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	60 81       	ld	r22, Z
     72a:	71 81       	ldd	r23, Z+1	; 0x01
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	93 81       	ldd	r25, Z+3	; 0x03
     730:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	f8 01       	movw	r30, r16
     73a:	91 83       	std	Z+1, r25	; 0x01
     73c:	80 83       	st	Z, r24
     73e:	de 01       	movw	r26, r28
     740:	a9 5b       	subi	r26, 0xB9	; 185
     742:	bf 4f       	sbci	r27, 0xFF	; 255
     744:	fe 01       	movw	r30, r28
     746:	e5 5b       	subi	r30, 0xB5	; 181
     748:	ff 4f       	sbci	r31, 0xFF	; 255
     74a:	80 81       	ld	r24, Z
     74c:	91 81       	ldd	r25, Z+1	; 0x01
     74e:	8d 93       	st	X+, r24
     750:	9c 93       	st	X, r25
     752:	fe 01       	movw	r30, r28
     754:	e9 5b       	subi	r30, 0xB9	; 185
     756:	ff 4f       	sbci	r31, 0xFF	; 255
     758:	80 81       	ld	r24, Z
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <lcd_set_4bit+0x47e>
     760:	fe 01       	movw	r30, r28
     762:	e9 5b       	subi	r30, 0xB9	; 185
     764:	ff 4f       	sbci	r31, 0xFF	; 255
     766:	91 83       	std	Z+1, r25	; 0x01
     768:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     76a:	a8 e2       	ldi	r26, 0x28	; 40
     76c:	b0 e0       	ldi	r27, 0x00	; 0
     76e:	e8 e2       	ldi	r30, 0x28	; 40
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	8e 7f       	andi	r24, 0xFE	; 254
     776:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     778:	a8 e2       	ldi	r26, 0x28	; 40
     77a:	b0 e0       	ldi	r27, 0x00	; 0
     77c:	e8 e2       	ldi	r30, 0x28	; 40
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
     782:	8d 7f       	andi	r24, 0xFD	; 253
     784:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     786:	e8 e2       	ldi	r30, 0x28	; 40
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 e3       	ldi	r24, 0x30	; 48
     78c:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     78e:	a8 e2       	ldi	r26, 0x28	; 40
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	e8 e2       	ldi	r30, 0x28	; 40
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	84 60       	ori	r24, 0x04	; 4
     79a:	8c 93       	st	X, r24
     79c:	fe 01       	movw	r30, r28
     79e:	ed 5b       	subi	r30, 0xBD	; 189
     7a0:	ff 4f       	sbci	r31, 0xFF	; 255
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	a0 ea       	ldi	r26, 0xA0	; 160
     7a8:	b0 e4       	ldi	r27, 0x40	; 64
     7aa:	80 83       	st	Z, r24
     7ac:	91 83       	std	Z+1, r25	; 0x01
     7ae:	a2 83       	std	Z+2, r26	; 0x02
     7b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7b2:	8e 01       	movw	r16, r28
     7b4:	01 5c       	subi	r16, 0xC1	; 193
     7b6:	1f 4f       	sbci	r17, 0xFF	; 255
     7b8:	fe 01       	movw	r30, r28
     7ba:	ed 5b       	subi	r30, 0xBD	; 189
     7bc:	ff 4f       	sbci	r31, 0xFF	; 255
     7be:	60 81       	ld	r22, Z
     7c0:	71 81       	ldd	r23, Z+1	; 0x01
     7c2:	82 81       	ldd	r24, Z+2	; 0x02
     7c4:	93 81       	ldd	r25, Z+3	; 0x03
     7c6:	26 e6       	ldi	r18, 0x66	; 102
     7c8:	36 e6       	ldi	r19, 0x66	; 102
     7ca:	46 e6       	ldi	r20, 0x66	; 102
     7cc:	55 e4       	ldi	r21, 0x45	; 69
     7ce:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	f8 01       	movw	r30, r16
     7d8:	80 83       	st	Z, r24
     7da:	91 83       	std	Z+1, r25	; 0x01
     7dc:	a2 83       	std	Z+2, r26	; 0x02
     7de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7e0:	fe 01       	movw	r30, r28
     7e2:	ff 96       	adiw	r30, 0x3f	; 63
     7e4:	60 81       	ld	r22, Z
     7e6:	71 81       	ldd	r23, Z+1	; 0x01
     7e8:	82 81       	ldd	r24, Z+2	; 0x02
     7ea:	93 81       	ldd	r25, Z+3	; 0x03
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e8       	ldi	r20, 0x80	; 128
     7f2:	5f e3       	ldi	r21, 0x3F	; 63
     7f4:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     7f8:	88 23       	and	r24, r24
     7fa:	2c f4       	brge	.+10     	; 0x806 <lcd_set_4bit+0x528>
		__ticks = 1;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	9e af       	std	Y+62, r25	; 0x3e
     802:	8d af       	std	Y+61, r24	; 0x3d
     804:	46 c0       	rjmp	.+140    	; 0x892 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     806:	fe 01       	movw	r30, r28
     808:	ff 96       	adiw	r30, 0x3f	; 63
     80a:	60 81       	ld	r22, Z
     80c:	71 81       	ldd	r23, Z+1	; 0x01
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	93 81       	ldd	r25, Z+3	; 0x03
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	3f ef       	ldi	r19, 0xFF	; 255
     816:	4f e7       	ldi	r20, 0x7F	; 127
     818:	57 e4       	ldi	r21, 0x47	; 71
     81a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
     81e:	18 16       	cp	r1, r24
     820:	64 f5       	brge	.+88     	; 0x87a <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     822:	fe 01       	movw	r30, r28
     824:	ed 5b       	subi	r30, 0xBD	; 189
     826:	ff 4f       	sbci	r31, 0xFF	; 255
     828:	60 81       	ld	r22, Z
     82a:	71 81       	ldd	r23, Z+1	; 0x01
     82c:	82 81       	ldd	r24, Z+2	; 0x02
     82e:	93 81       	ldd	r25, Z+3	; 0x03
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e2       	ldi	r20, 0x20	; 32
     836:	51 e4       	ldi	r21, 0x41	; 65
     838:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	9e af       	std	Y+62, r25	; 0x3e
     84e:	8d af       	std	Y+61, r24	; 0x3d
     850:	0f c0       	rjmp	.+30     	; 0x870 <lcd_set_4bit+0x592>
     852:	80 e7       	ldi	r24, 0x70	; 112
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	9c af       	std	Y+60, r25	; 0x3c
     858:	8b af       	std	Y+59, r24	; 0x3b
     85a:	8b ad       	ldd	r24, Y+59	; 0x3b
     85c:	9c ad       	ldd	r25, Y+60	; 0x3c
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <lcd_set_4bit+0x580>
     862:	9c af       	std	Y+60, r25	; 0x3c
     864:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     866:	8d ad       	ldd	r24, Y+61	; 0x3d
     868:	9e ad       	ldd	r25, Y+62	; 0x3e
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	9e af       	std	Y+62, r25	; 0x3e
     86e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     870:	8d ad       	ldd	r24, Y+61	; 0x3d
     872:	9e ad       	ldd	r25, Y+62	; 0x3e
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	69 f7       	brne	.-38     	; 0x852 <lcd_set_4bit+0x574>
     878:	16 c0       	rjmp	.+44     	; 0x8a6 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     87a:	fe 01       	movw	r30, r28
     87c:	ff 96       	adiw	r30, 0x3f	; 63
     87e:	60 81       	ld	r22, Z
     880:	71 81       	ldd	r23, Z+1	; 0x01
     882:	82 81       	ldd	r24, Z+2	; 0x02
     884:	93 81       	ldd	r25, Z+3	; 0x03
     886:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	9e af       	std	Y+62, r25	; 0x3e
     890:	8d af       	std	Y+61, r24	; 0x3d
     892:	8d ad       	ldd	r24, Y+61	; 0x3d
     894:	9e ad       	ldd	r25, Y+62	; 0x3e
     896:	9a af       	std	Y+58, r25	; 0x3a
     898:	89 af       	std	Y+57, r24	; 0x39
     89a:	89 ad       	ldd	r24, Y+57	; 0x39
     89c:	9a ad       	ldd	r25, Y+58	; 0x3a
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <lcd_set_4bit+0x5c0>
     8a2:	9a af       	std	Y+58, r25	; 0x3a
     8a4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8a6:	a8 e2       	ldi	r26, 0x28	; 40
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e8 e2       	ldi	r30, 0x28	; 40
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	8b 7f       	andi	r24, 0xFB	; 251
     8b2:	8c 93       	st	X, r24
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e8       	ldi	r26, 0x80	; 128
     8ba:	bf e3       	ldi	r27, 0x3F	; 63
     8bc:	8d ab       	std	Y+53, r24	; 0x35
     8be:	9e ab       	std	Y+54, r25	; 0x36
     8c0:	af ab       	std	Y+55, r26	; 0x37
     8c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8c4:	6d a9       	ldd	r22, Y+53	; 0x35
     8c6:	7e a9       	ldd	r23, Y+54	; 0x36
     8c8:	8f a9       	ldd	r24, Y+55	; 0x37
     8ca:	98 ad       	ldd	r25, Y+56	; 0x38
     8cc:	26 e6       	ldi	r18, 0x66	; 102
     8ce:	36 e6       	ldi	r19, 0x66	; 102
     8d0:	46 e6       	ldi	r20, 0x66	; 102
     8d2:	55 e4       	ldi	r21, 0x45	; 69
     8d4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	89 ab       	std	Y+49, r24	; 0x31
     8de:	9a ab       	std	Y+50, r25	; 0x32
     8e0:	ab ab       	std	Y+51, r26	; 0x33
     8e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     8e4:	69 a9       	ldd	r22, Y+49	; 0x31
     8e6:	7a a9       	ldd	r23, Y+50	; 0x32
     8e8:	8b a9       	ldd	r24, Y+51	; 0x33
     8ea:	9c a9       	ldd	r25, Y+52	; 0x34
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e8       	ldi	r20, 0x80	; 128
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     8f8:	88 23       	and	r24, r24
     8fa:	2c f4       	brge	.+10     	; 0x906 <lcd_set_4bit+0x628>
		__ticks = 1;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	98 ab       	std	Y+48, r25	; 0x30
     902:	8f a7       	std	Y+47, r24	; 0x2f
     904:	3f c0       	rjmp	.+126    	; 0x984 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     906:	69 a9       	ldd	r22, Y+49	; 0x31
     908:	7a a9       	ldd	r23, Y+50	; 0x32
     90a:	8b a9       	ldd	r24, Y+51	; 0x33
     90c:	9c a9       	ldd	r25, Y+52	; 0x34
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	3f ef       	ldi	r19, 0xFF	; 255
     912:	4f e7       	ldi	r20, 0x7F	; 127
     914:	57 e4       	ldi	r21, 0x47	; 71
     916:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
     91a:	18 16       	cp	r1, r24
     91c:	4c f5       	brge	.+82     	; 0x970 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     91e:	6d a9       	ldd	r22, Y+53	; 0x35
     920:	7e a9       	ldd	r23, Y+54	; 0x36
     922:	8f a9       	ldd	r24, Y+55	; 0x37
     924:	98 ad       	ldd	r25, Y+56	; 0x38
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e2       	ldi	r20, 0x20	; 32
     92c:	51 e4       	ldi	r21, 0x41	; 65
     92e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	bc 01       	movw	r22, r24
     938:	cd 01       	movw	r24, r26
     93a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     93e:	dc 01       	movw	r26, r24
     940:	cb 01       	movw	r24, r22
     942:	98 ab       	std	Y+48, r25	; 0x30
     944:	8f a7       	std	Y+47, r24	; 0x2f
     946:	0f c0       	rjmp	.+30     	; 0x966 <lcd_set_4bit+0x688>
     948:	80 e7       	ldi	r24, 0x70	; 112
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	9e a7       	std	Y+46, r25	; 0x2e
     94e:	8d a7       	std	Y+45, r24	; 0x2d
     950:	8d a5       	ldd	r24, Y+45	; 0x2d
     952:	9e a5       	ldd	r25, Y+46	; 0x2e
     954:	01 97       	sbiw	r24, 0x01	; 1
     956:	f1 f7       	brne	.-4      	; 0x954 <lcd_set_4bit+0x676>
     958:	9e a7       	std	Y+46, r25	; 0x2e
     95a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95c:	8f a5       	ldd	r24, Y+47	; 0x2f
     95e:	98 a9       	ldd	r25, Y+48	; 0x30
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	98 ab       	std	Y+48, r25	; 0x30
     964:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     966:	8f a5       	ldd	r24, Y+47	; 0x2f
     968:	98 a9       	ldd	r25, Y+48	; 0x30
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	69 f7       	brne	.-38     	; 0x948 <lcd_set_4bit+0x66a>
     96e:	14 c0       	rjmp	.+40     	; 0x998 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     970:	69 a9       	ldd	r22, Y+49	; 0x31
     972:	7a a9       	ldd	r23, Y+50	; 0x32
     974:	8b a9       	ldd	r24, Y+51	; 0x33
     976:	9c a9       	ldd	r25, Y+52	; 0x34
     978:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     97c:	dc 01       	movw	r26, r24
     97e:	cb 01       	movw	r24, r22
     980:	98 ab       	std	Y+48, r25	; 0x30
     982:	8f a7       	std	Y+47, r24	; 0x2f
     984:	8f a5       	ldd	r24, Y+47	; 0x2f
     986:	98 a9       	ldd	r25, Y+48	; 0x30
     988:	9c a7       	std	Y+44, r25	; 0x2c
     98a:	8b a7       	std	Y+43, r24	; 0x2b
     98c:	8b a5       	ldd	r24, Y+43	; 0x2b
     98e:	9c a5       	ldd	r25, Y+44	; 0x2c
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	f1 f7       	brne	.-4      	; 0x990 <lcd_set_4bit+0x6b2>
     994:	9c a7       	std	Y+44, r25	; 0x2c
     996:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     998:	a8 e2       	ldi	r26, 0x28	; 40
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	e8 e2       	ldi	r30, 0x28	; 40
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	8e 7f       	andi	r24, 0xFE	; 254
     9a4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9a6:	a8 e2       	ldi	r26, 0x28	; 40
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	e8 e2       	ldi	r30, 0x28	; 40
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
     9b0:	8d 7f       	andi	r24, 0xFD	; 253
     9b2:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     9b4:	e8 e2       	ldi	r30, 0x28	; 40
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 e3       	ldi	r24, 0x30	; 48
     9ba:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     9bc:	a8 e2       	ldi	r26, 0x28	; 40
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	e8 e2       	ldi	r30, 0x28	; 40
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	84 60       	ori	r24, 0x04	; 4
     9c8:	8c 93       	st	X, r24
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	a0 ea       	ldi	r26, 0xA0	; 160
     9d0:	b0 e4       	ldi	r27, 0x40	; 64
     9d2:	8f a3       	std	Y+39, r24	; 0x27
     9d4:	98 a7       	std	Y+40, r25	; 0x28
     9d6:	a9 a7       	std	Y+41, r26	; 0x29
     9d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9da:	6f a1       	ldd	r22, Y+39	; 0x27
     9dc:	78 a5       	ldd	r23, Y+40	; 0x28
     9de:	89 a5       	ldd	r24, Y+41	; 0x29
     9e0:	9a a5       	ldd	r25, Y+42	; 0x2a
     9e2:	26 e6       	ldi	r18, 0x66	; 102
     9e4:	36 e6       	ldi	r19, 0x66	; 102
     9e6:	46 e6       	ldi	r20, 0x66	; 102
     9e8:	55 e4       	ldi	r21, 0x45	; 69
     9ea:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	8b a3       	std	Y+35, r24	; 0x23
     9f4:	9c a3       	std	Y+36, r25	; 0x24
     9f6:	ad a3       	std	Y+37, r26	; 0x25
     9f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     9fa:	6b a1       	ldd	r22, Y+35	; 0x23
     9fc:	7c a1       	ldd	r23, Y+36	; 0x24
     9fe:	8d a1       	ldd	r24, Y+37	; 0x25
     a00:	9e a1       	ldd	r25, Y+38	; 0x26
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	40 e8       	ldi	r20, 0x80	; 128
     a08:	5f e3       	ldi	r21, 0x3F	; 63
     a0a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     a0e:	88 23       	and	r24, r24
     a10:	2c f4       	brge	.+10     	; 0xa1c <lcd_set_4bit+0x73e>
		__ticks = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	9a a3       	std	Y+34, r25	; 0x22
     a18:	89 a3       	std	Y+33, r24	; 0x21
     a1a:	3f c0       	rjmp	.+126    	; 0xa9a <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     a1c:	6b a1       	ldd	r22, Y+35	; 0x23
     a1e:	7c a1       	ldd	r23, Y+36	; 0x24
     a20:	8d a1       	ldd	r24, Y+37	; 0x25
     a22:	9e a1       	ldd	r25, Y+38	; 0x26
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	3f ef       	ldi	r19, 0xFF	; 255
     a28:	4f e7       	ldi	r20, 0x7F	; 127
     a2a:	57 e4       	ldi	r21, 0x47	; 71
     a2c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
     a30:	18 16       	cp	r1, r24
     a32:	4c f5       	brge	.+82     	; 0xa86 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a34:	6f a1       	ldd	r22, Y+39	; 0x27
     a36:	78 a5       	ldd	r23, Y+40	; 0x28
     a38:	89 a5       	ldd	r24, Y+41	; 0x29
     a3a:	9a a5       	ldd	r25, Y+42	; 0x2a
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e2       	ldi	r20, 0x20	; 32
     a42:	51 e4       	ldi	r21, 0x41	; 65
     a44:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	bc 01       	movw	r22, r24
     a4e:	cd 01       	movw	r24, r26
     a50:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	9a a3       	std	Y+34, r25	; 0x22
     a5a:	89 a3       	std	Y+33, r24	; 0x21
     a5c:	0f c0       	rjmp	.+30     	; 0xa7c <lcd_set_4bit+0x79e>
     a5e:	80 e7       	ldi	r24, 0x70	; 112
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	98 a3       	std	Y+32, r25	; 0x20
     a64:	8f 8f       	std	Y+31, r24	; 0x1f
     a66:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a68:	98 a1       	ldd	r25, Y+32	; 0x20
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <lcd_set_4bit+0x78c>
     a6e:	98 a3       	std	Y+32, r25	; 0x20
     a70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a72:	89 a1       	ldd	r24, Y+33	; 0x21
     a74:	9a a1       	ldd	r25, Y+34	; 0x22
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	9a a3       	std	Y+34, r25	; 0x22
     a7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7c:	89 a1       	ldd	r24, Y+33	; 0x21
     a7e:	9a a1       	ldd	r25, Y+34	; 0x22
     a80:	00 97       	sbiw	r24, 0x00	; 0
     a82:	69 f7       	brne	.-38     	; 0xa5e <lcd_set_4bit+0x780>
     a84:	14 c0       	rjmp	.+40     	; 0xaae <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a86:	6b a1       	ldd	r22, Y+35	; 0x23
     a88:	7c a1       	ldd	r23, Y+36	; 0x24
     a8a:	8d a1       	ldd	r24, Y+37	; 0x25
     a8c:	9e a1       	ldd	r25, Y+38	; 0x26
     a8e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     a92:	dc 01       	movw	r26, r24
     a94:	cb 01       	movw	r24, r22
     a96:	9a a3       	std	Y+34, r25	; 0x22
     a98:	89 a3       	std	Y+33, r24	; 0x21
     a9a:	89 a1       	ldd	r24, Y+33	; 0x21
     a9c:	9a a1       	ldd	r25, Y+34	; 0x22
     a9e:	9e 8f       	std	Y+30, r25	; 0x1e
     aa0:	8d 8f       	std	Y+29, r24	; 0x1d
     aa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     aa4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <lcd_set_4bit+0x7c8>
     aaa:	9e 8f       	std	Y+30, r25	; 0x1e
     aac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     aae:	a8 e2       	ldi	r26, 0x28	; 40
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	e8 e2       	ldi	r30, 0x28	; 40
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	8b 7f       	andi	r24, 0xFB	; 251
     aba:	8c 93       	st	X, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a0 e8       	ldi	r26, 0x80	; 128
     ac2:	bf e3       	ldi	r27, 0x3F	; 63
     ac4:	89 8f       	std	Y+25, r24	; 0x19
     ac6:	9a 8f       	std	Y+26, r25	; 0x1a
     ac8:	ab 8f       	std	Y+27, r26	; 0x1b
     aca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     acc:	69 8d       	ldd	r22, Y+25	; 0x19
     ace:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ad0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ad2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ad4:	26 e6       	ldi	r18, 0x66	; 102
     ad6:	36 e6       	ldi	r19, 0x66	; 102
     ad8:	46 e6       	ldi	r20, 0x66	; 102
     ada:	55 e4       	ldi	r21, 0x45	; 69
     adc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     ae0:	dc 01       	movw	r26, r24
     ae2:	cb 01       	movw	r24, r22
     ae4:	8d 8b       	std	Y+21, r24	; 0x15
     ae6:	9e 8b       	std	Y+22, r25	; 0x16
     ae8:	af 8b       	std	Y+23, r26	; 0x17
     aea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     aec:	6d 89       	ldd	r22, Y+21	; 0x15
     aee:	7e 89       	ldd	r23, Y+22	; 0x16
     af0:	8f 89       	ldd	r24, Y+23	; 0x17
     af2:	98 8d       	ldd	r25, Y+24	; 0x18
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e8       	ldi	r20, 0x80	; 128
     afa:	5f e3       	ldi	r21, 0x3F	; 63
     afc:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     b00:	88 23       	and	r24, r24
     b02:	2c f4       	brge	.+10     	; 0xb0e <lcd_set_4bit+0x830>
		__ticks = 1;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	9c 8b       	std	Y+20, r25	; 0x14
     b0a:	8b 8b       	std	Y+19, r24	; 0x13
     b0c:	3f c0       	rjmp	.+126    	; 0xb8c <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     b0e:	6d 89       	ldd	r22, Y+21	; 0x15
     b10:	7e 89       	ldd	r23, Y+22	; 0x16
     b12:	8f 89       	ldd	r24, Y+23	; 0x17
     b14:	98 8d       	ldd	r25, Y+24	; 0x18
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	3f ef       	ldi	r19, 0xFF	; 255
     b1a:	4f e7       	ldi	r20, 0x7F	; 127
     b1c:	57 e4       	ldi	r21, 0x47	; 71
     b1e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
     b22:	18 16       	cp	r1, r24
     b24:	4c f5       	brge	.+82     	; 0xb78 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b26:	69 8d       	ldd	r22, Y+25	; 0x19
     b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	40 e2       	ldi	r20, 0x20	; 32
     b34:	51 e4       	ldi	r21, 0x41	; 65
     b36:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	bc 01       	movw	r22, r24
     b40:	cd 01       	movw	r24, r26
     b42:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     b46:	dc 01       	movw	r26, r24
     b48:	cb 01       	movw	r24, r22
     b4a:	9c 8b       	std	Y+20, r25	; 0x14
     b4c:	8b 8b       	std	Y+19, r24	; 0x13
     b4e:	0f c0       	rjmp	.+30     	; 0xb6e <lcd_set_4bit+0x890>
     b50:	80 e7       	ldi	r24, 0x70	; 112
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	9a 8b       	std	Y+18, r25	; 0x12
     b56:	89 8b       	std	Y+17, r24	; 0x11
     b58:	89 89       	ldd	r24, Y+17	; 0x11
     b5a:	9a 89       	ldd	r25, Y+18	; 0x12
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <lcd_set_4bit+0x87e>
     b60:	9a 8b       	std	Y+18, r25	; 0x12
     b62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b64:	8b 89       	ldd	r24, Y+19	; 0x13
     b66:	9c 89       	ldd	r25, Y+20	; 0x14
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	9c 8b       	std	Y+20, r25	; 0x14
     b6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6e:	8b 89       	ldd	r24, Y+19	; 0x13
     b70:	9c 89       	ldd	r25, Y+20	; 0x14
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	69 f7       	brne	.-38     	; 0xb50 <lcd_set_4bit+0x872>
     b76:	14 c0       	rjmp	.+40     	; 0xba0 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b78:	6d 89       	ldd	r22, Y+21	; 0x15
     b7a:	7e 89       	ldd	r23, Y+22	; 0x16
     b7c:	8f 89       	ldd	r24, Y+23	; 0x17
     b7e:	98 8d       	ldd	r25, Y+24	; 0x18
     b80:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	9c 8b       	std	Y+20, r25	; 0x14
     b8a:	8b 8b       	std	Y+19, r24	; 0x13
     b8c:	8b 89       	ldd	r24, Y+19	; 0x13
     b8e:	9c 89       	ldd	r25, Y+20	; 0x14
     b90:	98 8b       	std	Y+16, r25	; 0x10
     b92:	8f 87       	std	Y+15, r24	; 0x0f
     b94:	8f 85       	ldd	r24, Y+15	; 0x0f
     b96:	98 89       	ldd	r25, Y+16	; 0x10
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <lcd_set_4bit+0x8ba>
     b9c:	98 8b       	std	Y+16, r25	; 0x10
     b9e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     ba0:	a8 e2       	ldi	r26, 0x28	; 40
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e8 e2       	ldi	r30, 0x28	; 40
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	8e 7f       	andi	r24, 0xFE	; 254
     bac:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     bae:	a8 e2       	ldi	r26, 0x28	; 40
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 e2       	ldi	r30, 0x28	; 40
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	8d 7f       	andi	r24, 0xFD	; 253
     bba:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     bbc:	e8 e2       	ldi	r30, 0x28	; 40
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 e2       	ldi	r24, 0x20	; 32
     bc2:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     bc4:	a8 e2       	ldi	r26, 0x28	; 40
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e8 e2       	ldi	r30, 0x28	; 40
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	84 60       	ori	r24, 0x04	; 4
     bd0:	8c 93       	st	X, r24
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a0 ea       	ldi	r26, 0xA0	; 160
     bd8:	b0 e4       	ldi	r27, 0x40	; 64
     bda:	8b 87       	std	Y+11, r24	; 0x0b
     bdc:	9c 87       	std	Y+12, r25	; 0x0c
     bde:	ad 87       	std	Y+13, r26	; 0x0d
     be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be2:	6b 85       	ldd	r22, Y+11	; 0x0b
     be4:	7c 85       	ldd	r23, Y+12	; 0x0c
     be6:	8d 85       	ldd	r24, Y+13	; 0x0d
     be8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bea:	26 e6       	ldi	r18, 0x66	; 102
     bec:	36 e6       	ldi	r19, 0x66	; 102
     bee:	46 e6       	ldi	r20, 0x66	; 102
     bf0:	55 e4       	ldi	r21, 0x45	; 69
     bf2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	8f 83       	std	Y+7, r24	; 0x07
     bfc:	98 87       	std	Y+8, r25	; 0x08
     bfe:	a9 87       	std	Y+9, r26	; 0x09
     c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c02:	6f 81       	ldd	r22, Y+7	; 0x07
     c04:	78 85       	ldd	r23, Y+8	; 0x08
     c06:	89 85       	ldd	r24, Y+9	; 0x09
     c08:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e8       	ldi	r20, 0x80	; 128
     c10:	5f e3       	ldi	r21, 0x3F	; 63
     c12:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     c16:	88 23       	and	r24, r24
     c18:	2c f4       	brge	.+10     	; 0xc24 <lcd_set_4bit+0x946>
		__ticks = 1;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
     c22:	3f c0       	rjmp	.+126    	; 0xca2 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     c24:	6f 81       	ldd	r22, Y+7	; 0x07
     c26:	78 85       	ldd	r23, Y+8	; 0x08
     c28:	89 85       	ldd	r24, Y+9	; 0x09
     c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	3f ef       	ldi	r19, 0xFF	; 255
     c30:	4f e7       	ldi	r20, 0x7F	; 127
     c32:	57 e4       	ldi	r21, 0x47	; 71
     c34:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
     c38:	18 16       	cp	r1, r24
     c3a:	4c f5       	brge	.+82     	; 0xc8e <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c40:	8d 85       	ldd	r24, Y+13	; 0x0d
     c42:	9e 85       	ldd	r25, Y+14	; 0x0e
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e2       	ldi	r20, 0x20	; 32
     c4a:	51 e4       	ldi	r21, 0x41	; 65
     c4c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	bc 01       	movw	r22, r24
     c56:	cd 01       	movw	r24, r26
     c58:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	9e 83       	std	Y+6, r25	; 0x06
     c62:	8d 83       	std	Y+5, r24	; 0x05
     c64:	0f c0       	rjmp	.+30     	; 0xc84 <lcd_set_4bit+0x9a6>
     c66:	80 e7       	ldi	r24, 0x70	; 112
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	9c 83       	std	Y+4, r25	; 0x04
     c6c:	8b 83       	std	Y+3, r24	; 0x03
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <lcd_set_4bit+0x994>
     c76:	9c 83       	std	Y+4, r25	; 0x04
     c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	9e 81       	ldd	r25, Y+6	; 0x06
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	69 f7       	brne	.-38     	; 0xc66 <lcd_set_4bit+0x988>
     c8c:	14 c0       	rjmp	.+40     	; 0xcb6 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8e:	6f 81       	ldd	r22, Y+7	; 0x07
     c90:	78 85       	ldd	r23, Y+8	; 0x08
     c92:	89 85       	ldd	r24, Y+9	; 0x09
     c94:	9a 85       	ldd	r25, Y+10	; 0x0a
     c96:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	9e 83       	std	Y+6, r25	; 0x06
     ca0:	8d 83       	std	Y+5, r24	; 0x05
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	9e 81       	ldd	r25, Y+6	; 0x06
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <lcd_set_4bit+0x9d0>
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     cb6:	a8 e2       	ldi	r26, 0x28	; 40
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e8 e2       	ldi	r30, 0x28	; 40
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	8b 7f       	andi	r24, 0xFB	; 251
     cc2:	8c 93       	st	X, r24


}
     cc4:	c0 59       	subi	r28, 0x90	; 144
     cc6:	df 4f       	sbci	r29, 0xFF	; 255
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	08 95       	ret

00000cdc <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	2e 97       	sbiw	r28, 0x0e	; 14
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
     cf0:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_set_4bit>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a0 e8       	ldi	r26, 0x80	; 128
     cfa:	bf e3       	ldi	r27, 0x3F	; 63
     cfc:	8b 87       	std	Y+11, r24	; 0x0b
     cfe:	9c 87       	std	Y+12, r25	; 0x0c
     d00:	ad 87       	std	Y+13, r26	; 0x0d
     d02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d04:	6b 85       	ldd	r22, Y+11	; 0x0b
     d06:	7c 85       	ldd	r23, Y+12	; 0x0c
     d08:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d0c:	26 e6       	ldi	r18, 0x66	; 102
     d0e:	36 e6       	ldi	r19, 0x66	; 102
     d10:	46 e6       	ldi	r20, 0x66	; 102
     d12:	55 e4       	ldi	r21, 0x45	; 69
     d14:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	8f 83       	std	Y+7, r24	; 0x07
     d1e:	98 87       	std	Y+8, r25	; 0x08
     d20:	a9 87       	std	Y+9, r26	; 0x09
     d22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d24:	6f 81       	ldd	r22, Y+7	; 0x07
     d26:	78 85       	ldd	r23, Y+8	; 0x08
     d28:	89 85       	ldd	r24, Y+9	; 0x09
     d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5f e3       	ldi	r21, 0x3F	; 63
     d34:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     d38:	88 23       	and	r24, r24
     d3a:	2c f4       	brge	.+10     	; 0xd46 <lcd_init+0x6a>
		__ticks = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	9e 83       	std	Y+6, r25	; 0x06
     d42:	8d 83       	std	Y+5, r24	; 0x05
     d44:	3f c0       	rjmp	.+126    	; 0xdc4 <lcd_init+0xe8>
	else if (__tmp > 65535)
     d46:	6f 81       	ldd	r22, Y+7	; 0x07
     d48:	78 85       	ldd	r23, Y+8	; 0x08
     d4a:	89 85       	ldd	r24, Y+9	; 0x09
     d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	3f ef       	ldi	r19, 0xFF	; 255
     d52:	4f e7       	ldi	r20, 0x7F	; 127
     d54:	57 e4       	ldi	r21, 0x47	; 71
     d56:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
     d5a:	18 16       	cp	r1, r24
     d5c:	4c f5       	brge	.+82     	; 0xdb0 <lcd_init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d60:	7c 85       	ldd	r23, Y+12	; 0x0c
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e2       	ldi	r20, 0x20	; 32
     d6c:	51 e4       	ldi	r21, 0x41	; 65
     d6e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	bc 01       	movw	r22, r24
     d78:	cd 01       	movw	r24, r26
     d7a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	8d 83       	std	Y+5, r24	; 0x05
     d86:	0f c0       	rjmp	.+30     	; 0xda6 <lcd_init+0xca>
     d88:	80 e7       	ldi	r24, 0x70	; 112
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	9c 83       	std	Y+4, r25	; 0x04
     d8e:	8b 83       	std	Y+3, r24	; 0x03
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_init+0xb8>
     d98:	9c 83       	std	Y+4, r25	; 0x04
     d9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	9e 81       	ldd	r25, Y+6	; 0x06
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	69 f7       	brne	.-38     	; 0xd88 <lcd_init+0xac>
     dae:	14 c0       	rjmp	.+40     	; 0xdd8 <lcd_init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db0:	6f 81       	ldd	r22, Y+7	; 0x07
     db2:	78 85       	ldd	r23, Y+8	; 0x08
     db4:	89 85       	ldd	r24, Y+9	; 0x09
     db6:	9a 85       	ldd	r25, Y+10	; 0x0a
     db8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	9e 83       	std	Y+6, r25	; 0x06
     dc2:	8d 83       	std	Y+5, r24	; 0x05
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <lcd_init+0xf4>
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     dd8:	88 e2       	ldi	r24, 0x28	; 40
     dda:	0e 94 04 07 	call	0xe08	; 0xe08 <lcd_wr_command>
	lcd_wr_command(0x01);
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	0e 94 04 07 	call	0xe08	; 0xe08 <lcd_wr_command>
	lcd_wr_command(0x06);
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	0e 94 04 07 	call	0xe08	; 0xe08 <lcd_wr_command>
	lcd_wr_command(0x0E);
     dea:	8e e0       	ldi	r24, 0x0E	; 14
     dec:	0e 94 04 07 	call	0xe08	; 0xe08 <lcd_wr_command>
	lcd_wr_command(0x80);
     df0:	80 e8       	ldi	r24, 0x80	; 128
     df2:	0e 94 04 07 	call	0xe08	; 0xe08 <lcd_wr_command>

}
     df6:	2e 96       	adiw	r28, 0x0e	; 14
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <lcd_wr_command>:

//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	6e 97       	sbiw	r28, 0x1e	; 30
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     e1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e20:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     e22:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e24:	80 7f       	andi	r24, 0xF0	; 240
     e26:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     e28:	a8 e2       	ldi	r26, 0x28	; 40
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e8 e2       	ldi	r30, 0x28	; 40
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8f 70       	andi	r24, 0x0F	; 15
     e34:	8c 93       	st	X, r24
	lcd_port |= temp;
     e36:	a8 e2       	ldi	r26, 0x28	; 40
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e8 e2       	ldi	r30, 0x28	; 40
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	90 81       	ld	r25, Z
     e40:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e42:	89 2b       	or	r24, r25
     e44:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e46:	a8 e2       	ldi	r26, 0x28	; 40
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e8 e2       	ldi	r30, 0x28	; 40
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8e 7f       	andi	r24, 0xFE	; 254
     e52:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e54:	a8 e2       	ldi	r26, 0x28	; 40
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e8 e2       	ldi	r30, 0x28	; 40
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8d 7f       	andi	r24, 0xFD	; 253
     e60:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e62:	a8 e2       	ldi	r26, 0x28	; 40
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e8 e2       	ldi	r30, 0x28	; 40
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	84 60       	ori	r24, 0x04	; 4
     e6e:	8c 93       	st	X, r24
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 ea       	ldi	r26, 0xA0	; 160
     e76:	b0 e4       	ldi	r27, 0x40	; 64
     e78:	89 8f       	std	Y+25, r24	; 0x19
     e7a:	9a 8f       	std	Y+26, r25	; 0x1a
     e7c:	ab 8f       	std	Y+27, r26	; 0x1b
     e7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e80:	69 8d       	ldd	r22, Y+25	; 0x19
     e82:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e84:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e86:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e88:	26 e6       	ldi	r18, 0x66	; 102
     e8a:	36 e6       	ldi	r19, 0x66	; 102
     e8c:	46 e6       	ldi	r20, 0x66	; 102
     e8e:	55 e4       	ldi	r21, 0x45	; 69
     e90:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	8d 8b       	std	Y+21, r24	; 0x15
     e9a:	9e 8b       	std	Y+22, r25	; 0x16
     e9c:	af 8b       	std	Y+23, r26	; 0x17
     e9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ea0:	6d 89       	ldd	r22, Y+21	; 0x15
     ea2:	7e 89       	ldd	r23, Y+22	; 0x16
     ea4:	8f 89       	ldd	r24, Y+23	; 0x17
     ea6:	98 8d       	ldd	r25, Y+24	; 0x18
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e8       	ldi	r20, 0x80	; 128
     eae:	5f e3       	ldi	r21, 0x3F	; 63
     eb0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     eb4:	88 23       	and	r24, r24
     eb6:	2c f4       	brge	.+10     	; 0xec2 <lcd_wr_command+0xba>
		__ticks = 1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9c 8b       	std	Y+20, r25	; 0x14
     ebe:	8b 8b       	std	Y+19, r24	; 0x13
     ec0:	3f c0       	rjmp	.+126    	; 0xf40 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     ec2:	6d 89       	ldd	r22, Y+21	; 0x15
     ec4:	7e 89       	ldd	r23, Y+22	; 0x16
     ec6:	8f 89       	ldd	r24, Y+23	; 0x17
     ec8:	98 8d       	ldd	r25, Y+24	; 0x18
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	3f ef       	ldi	r19, 0xFF	; 255
     ece:	4f e7       	ldi	r20, 0x7F	; 127
     ed0:	57 e4       	ldi	r21, 0x47	; 71
     ed2:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
     ed6:	18 16       	cp	r1, r24
     ed8:	4c f5       	brge	.+82     	; 0xf2c <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eda:	69 8d       	ldd	r22, Y+25	; 0x19
     edc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e2       	ldi	r20, 0x20	; 32
     ee8:	51 e4       	ldi	r21, 0x41	; 65
     eea:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	bc 01       	movw	r22, r24
     ef4:	cd 01       	movw	r24, r26
     ef6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	9c 8b       	std	Y+20, r25	; 0x14
     f00:	8b 8b       	std	Y+19, r24	; 0x13
     f02:	0f c0       	rjmp	.+30     	; 0xf22 <lcd_wr_command+0x11a>
     f04:	80 e7       	ldi	r24, 0x70	; 112
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	9a 8b       	std	Y+18, r25	; 0x12
     f0a:	89 8b       	std	Y+17, r24	; 0x11
     f0c:	89 89       	ldd	r24, Y+17	; 0x11
     f0e:	9a 89       	ldd	r25, Y+18	; 0x12
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <lcd_wr_command+0x108>
     f14:	9a 8b       	std	Y+18, r25	; 0x12
     f16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f18:	8b 89       	ldd	r24, Y+19	; 0x13
     f1a:	9c 89       	ldd	r25, Y+20	; 0x14
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	9c 8b       	std	Y+20, r25	; 0x14
     f20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f22:	8b 89       	ldd	r24, Y+19	; 0x13
     f24:	9c 89       	ldd	r25, Y+20	; 0x14
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	69 f7       	brne	.-38     	; 0xf04 <lcd_wr_command+0xfc>
     f2a:	14 c0       	rjmp	.+40     	; 0xf54 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2c:	6d 89       	ldd	r22, Y+21	; 0x15
     f2e:	7e 89       	ldd	r23, Y+22	; 0x16
     f30:	8f 89       	ldd	r24, Y+23	; 0x17
     f32:	98 8d       	ldd	r25, Y+24	; 0x18
     f34:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	9c 8b       	std	Y+20, r25	; 0x14
     f3e:	8b 8b       	std	Y+19, r24	; 0x13
     f40:	8b 89       	ldd	r24, Y+19	; 0x13
     f42:	9c 89       	ldd	r25, Y+20	; 0x14
     f44:	98 8b       	std	Y+16, r25	; 0x10
     f46:	8f 87       	std	Y+15, r24	; 0x0f
     f48:	8f 85       	ldd	r24, Y+15	; 0x0f
     f4a:	98 89       	ldd	r25, Y+16	; 0x10
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <lcd_wr_command+0x144>
     f50:	98 8b       	std	Y+16, r25	; 0x10
     f52:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     f54:	a8 e2       	ldi	r26, 0x28	; 40
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e8 e2       	ldi	r30, 0x28	; 40
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8b 7f       	andi	r24, 0xFB	; 251
     f60:	8c 93       	st	X, r24

	cmd = cmd & 0x0F;
     f62:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f64:	8f 70       	andi	r24, 0x0F	; 15
     f66:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     f68:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f6a:	82 95       	swap	r24
     f6c:	80 7f       	andi	r24, 0xF0	; 240
     f6e:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     f70:	a8 e2       	ldi	r26, 0x28	; 40
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e8 e2       	ldi	r30, 0x28	; 40
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8f 70       	andi	r24, 0x0F	; 15
     f7c:	8c 93       	st	X, r24
	lcd_port |= cmd;
     f7e:	a8 e2       	ldi	r26, 0x28	; 40
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e8 e2       	ldi	r30, 0x28	; 40
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	90 81       	ld	r25, Z
     f88:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f8a:	89 2b       	or	r24, r25
     f8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     f8e:	a8 e2       	ldi	r26, 0x28	; 40
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e8 e2       	ldi	r30, 0x28	; 40
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8e 7f       	andi	r24, 0xFE	; 254
     f9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f9c:	a8 e2       	ldi	r26, 0x28	; 40
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e8 e2       	ldi	r30, 0x28	; 40
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8d 7f       	andi	r24, 0xFD	; 253
     fa8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     faa:	a8 e2       	ldi	r26, 0x28	; 40
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e8 e2       	ldi	r30, 0x28	; 40
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	84 60       	ori	r24, 0x04	; 4
     fb6:	8c 93       	st	X, r24
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	a0 ea       	ldi	r26, 0xA0	; 160
     fbe:	b0 e4       	ldi	r27, 0x40	; 64
     fc0:	8b 87       	std	Y+11, r24	; 0x0b
     fc2:	9c 87       	std	Y+12, r25	; 0x0c
     fc4:	ad 87       	std	Y+13, r26	; 0x0d
     fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fca:	7c 85       	ldd	r23, Y+12	; 0x0c
     fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fce:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd0:	26 e6       	ldi	r18, 0x66	; 102
     fd2:	36 e6       	ldi	r19, 0x66	; 102
     fd4:	46 e6       	ldi	r20, 0x66	; 102
     fd6:	55 e4       	ldi	r21, 0x45	; 69
     fd8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	8f 83       	std	Y+7, r24	; 0x07
     fe2:	98 87       	std	Y+8, r25	; 0x08
     fe4:	a9 87       	std	Y+9, r26	; 0x09
     fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe8:	6f 81       	ldd	r22, Y+7	; 0x07
     fea:	78 85       	ldd	r23, Y+8	; 0x08
     fec:	89 85       	ldd	r24, Y+9	; 0x09
     fee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e8       	ldi	r20, 0x80	; 128
     ff6:	5f e3       	ldi	r21, 0x3F	; 63
     ff8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
     ffc:	88 23       	and	r24, r24
     ffe:	2c f4       	brge	.+10     	; 0x100a <lcd_wr_command+0x202>
		__ticks = 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9e 83       	std	Y+6, r25	; 0x06
    1006:	8d 83       	std	Y+5, r24	; 0x05
    1008:	3f c0       	rjmp	.+126    	; 0x1088 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    100a:	6f 81       	ldd	r22, Y+7	; 0x07
    100c:	78 85       	ldd	r23, Y+8	; 0x08
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	3f ef       	ldi	r19, 0xFF	; 255
    1016:	4f e7       	ldi	r20, 0x7F	; 127
    1018:	57 e4       	ldi	r21, 0x47	; 71
    101a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
    101e:	18 16       	cp	r1, r24
    1020:	4c f5       	brge	.+82     	; 0x1074 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1022:	6b 85       	ldd	r22, Y+11	; 0x0b
    1024:	7c 85       	ldd	r23, Y+12	; 0x0c
    1026:	8d 85       	ldd	r24, Y+13	; 0x0d
    1028:	9e 85       	ldd	r25, Y+14	; 0x0e
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e2       	ldi	r20, 0x20	; 32
    1030:	51 e4       	ldi	r21, 0x41	; 65
    1032:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	bc 01       	movw	r22, r24
    103c:	cd 01       	movw	r24, r26
    103e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	0f c0       	rjmp	.+30     	; 0x106a <lcd_wr_command+0x262>
    104c:	80 e7       	ldi	r24, 0x70	; 112
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	9c 83       	std	Y+4, r25	; 0x04
    1052:	8b 83       	std	Y+3, r24	; 0x03
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <lcd_wr_command+0x250>
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	9e 83       	std	Y+6, r25	; 0x06
    1068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	69 f7       	brne	.-38     	; 0x104c <lcd_wr_command+0x244>
    1072:	14 c0       	rjmp	.+40     	; 0x109c <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1074:	6f 81       	ldd	r22, Y+7	; 0x07
    1076:	78 85       	ldd	r23, Y+8	; 0x08
    1078:	89 85       	ldd	r24, Y+9	; 0x09
    107a:	9a 85       	ldd	r25, Y+10	; 0x0a
    107c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <lcd_wr_command+0x28c>
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    109c:	a8 e2       	ldi	r26, 0x28	; 40
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e8 e2       	ldi	r30, 0x28	; 40
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	8b 7f       	andi	r24, 0xFB	; 251
    10a8:	8c 93       	st	X, r24
}
    10aa:	6e 96       	adiw	r28, 0x1e	; 30
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	6e 97       	sbiw	r28, 0x1e	; 30
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    10d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10d4:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    10d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d8:	80 7f       	andi	r24, 0xF0	; 240
    10da:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    10dc:	a8 e2       	ldi	r26, 0x28	; 40
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e8 e2       	ldi	r30, 0x28	; 40
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	8f 70       	andi	r24, 0x0F	; 15
    10e8:	8c 93       	st	X, r24
	lcd_port |= temp;
    10ea:	a8 e2       	ldi	r26, 0x28	; 40
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e8 e2       	ldi	r30, 0x28	; 40
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	90 81       	ld	r25, Z
    10f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f6:	89 2b       	or	r24, r25
    10f8:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    10fa:	a8 e2       	ldi	r26, 0x28	; 40
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e8 e2       	ldi	r30, 0x28	; 40
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	81 60       	ori	r24, 0x01	; 1
    1106:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1108:	a8 e2       	ldi	r26, 0x28	; 40
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e8 e2       	ldi	r30, 0x28	; 40
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8d 7f       	andi	r24, 0xFD	; 253
    1114:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1116:	a8 e2       	ldi	r26, 0x28	; 40
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e8 e2       	ldi	r30, 0x28	; 40
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	84 60       	ori	r24, 0x04	; 4
    1122:	8c 93       	st	X, r24
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a0 ea       	ldi	r26, 0xA0	; 160
    112a:	b0 e4       	ldi	r27, 0x40	; 64
    112c:	89 8f       	std	Y+25, r24	; 0x19
    112e:	9a 8f       	std	Y+26, r25	; 0x1a
    1130:	ab 8f       	std	Y+27, r26	; 0x1b
    1132:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1134:	69 8d       	ldd	r22, Y+25	; 0x19
    1136:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    113a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    113c:	26 e6       	ldi	r18, 0x66	; 102
    113e:	36 e6       	ldi	r19, 0x66	; 102
    1140:	46 e6       	ldi	r20, 0x66	; 102
    1142:	55 e4       	ldi	r21, 0x45	; 69
    1144:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	8d 8b       	std	Y+21, r24	; 0x15
    114e:	9e 8b       	std	Y+22, r25	; 0x16
    1150:	af 8b       	std	Y+23, r26	; 0x17
    1152:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1154:	6d 89       	ldd	r22, Y+21	; 0x15
    1156:	7e 89       	ldd	r23, Y+22	; 0x16
    1158:	8f 89       	ldd	r24, Y+23	; 0x17
    115a:	98 8d       	ldd	r25, Y+24	; 0x18
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e8       	ldi	r20, 0x80	; 128
    1162:	5f e3       	ldi	r21, 0x3F	; 63
    1164:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
    1168:	88 23       	and	r24, r24
    116a:	2c f4       	brge	.+10     	; 0x1176 <lcd_wr_char+0xba>
		__ticks = 1;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	9c 8b       	std	Y+20, r25	; 0x14
    1172:	8b 8b       	std	Y+19, r24	; 0x13
    1174:	3f c0       	rjmp	.+126    	; 0x11f4 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1176:	6d 89       	ldd	r22, Y+21	; 0x15
    1178:	7e 89       	ldd	r23, Y+22	; 0x16
    117a:	8f 89       	ldd	r24, Y+23	; 0x17
    117c:	98 8d       	ldd	r25, Y+24	; 0x18
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	3f ef       	ldi	r19, 0xFF	; 255
    1182:	4f e7       	ldi	r20, 0x7F	; 127
    1184:	57 e4       	ldi	r21, 0x47	; 71
    1186:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
    118a:	18 16       	cp	r1, r24
    118c:	4c f5       	brge	.+82     	; 0x11e0 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118e:	69 8d       	ldd	r22, Y+25	; 0x19
    1190:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1192:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1194:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e2       	ldi	r20, 0x20	; 32
    119c:	51 e4       	ldi	r21, 0x41	; 65
    119e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	bc 01       	movw	r22, r24
    11a8:	cd 01       	movw	r24, r26
    11aa:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9c 8b       	std	Y+20, r25	; 0x14
    11b4:	8b 8b       	std	Y+19, r24	; 0x13
    11b6:	0f c0       	rjmp	.+30     	; 0x11d6 <lcd_wr_char+0x11a>
    11b8:	80 e7       	ldi	r24, 0x70	; 112
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	9a 8b       	std	Y+18, r25	; 0x12
    11be:	89 8b       	std	Y+17, r24	; 0x11
    11c0:	89 89       	ldd	r24, Y+17	; 0x11
    11c2:	9a 89       	ldd	r25, Y+18	; 0x12
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <lcd_wr_char+0x108>
    11c8:	9a 8b       	std	Y+18, r25	; 0x12
    11ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11cc:	8b 89       	ldd	r24, Y+19	; 0x13
    11ce:	9c 89       	ldd	r25, Y+20	; 0x14
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d6:	8b 89       	ldd	r24, Y+19	; 0x13
    11d8:	9c 89       	ldd	r25, Y+20	; 0x14
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	69 f7       	brne	.-38     	; 0x11b8 <lcd_wr_char+0xfc>
    11de:	14 c0       	rjmp	.+40     	; 0x1208 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e0:	6d 89       	ldd	r22, Y+21	; 0x15
    11e2:	7e 89       	ldd	r23, Y+22	; 0x16
    11e4:	8f 89       	ldd	r24, Y+23	; 0x17
    11e6:	98 8d       	ldd	r25, Y+24	; 0x18
    11e8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	9c 8b       	std	Y+20, r25	; 0x14
    11f2:	8b 8b       	std	Y+19, r24	; 0x13
    11f4:	8b 89       	ldd	r24, Y+19	; 0x13
    11f6:	9c 89       	ldd	r25, Y+20	; 0x14
    11f8:	98 8b       	std	Y+16, r25	; 0x10
    11fa:	8f 87       	std	Y+15, r24	; 0x0f
    11fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11fe:	98 89       	ldd	r25, Y+16	; 0x10
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <lcd_wr_char+0x144>
    1204:	98 8b       	std	Y+16, r25	; 0x10
    1206:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1208:	a8 e2       	ldi	r26, 0x28	; 40
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 e2       	ldi	r30, 0x28	; 40
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	8b 7f       	andi	r24, 0xFB	; 251
    1214:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1216:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1218:	8f 70       	andi	r24, 0x0F	; 15
    121a:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    121c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    121e:	82 95       	swap	r24
    1220:	80 7f       	andi	r24, 0xF0	; 240
    1222:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1224:	a8 e2       	ldi	r26, 0x28	; 40
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e2       	ldi	r30, 0x28	; 40
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8f 70       	andi	r24, 0x0F	; 15
    1230:	8c 93       	st	X, r24
	lcd_port |= letter;
    1232:	a8 e2       	ldi	r26, 0x28	; 40
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e8 e2       	ldi	r30, 0x28	; 40
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	90 81       	ld	r25, Z
    123c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    123e:	89 2b       	or	r24, r25
    1240:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1242:	a8 e2       	ldi	r26, 0x28	; 40
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e8 e2       	ldi	r30, 0x28	; 40
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	81 60       	ori	r24, 0x01	; 1
    124e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1250:	a8 e2       	ldi	r26, 0x28	; 40
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e8 e2       	ldi	r30, 0x28	; 40
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8d 7f       	andi	r24, 0xFD	; 253
    125c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    125e:	a8 e2       	ldi	r26, 0x28	; 40
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e8 e2       	ldi	r30, 0x28	; 40
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	84 60       	ori	r24, 0x04	; 4
    126a:	8c 93       	st	X, r24
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 ea       	ldi	r26, 0xA0	; 160
    1272:	b0 e4       	ldi	r27, 0x40	; 64
    1274:	8b 87       	std	Y+11, r24	; 0x0b
    1276:	9c 87       	std	Y+12, r25	; 0x0c
    1278:	ad 87       	std	Y+13, r26	; 0x0d
    127a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127c:	6b 85       	ldd	r22, Y+11	; 0x0b
    127e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1280:	8d 85       	ldd	r24, Y+13	; 0x0d
    1282:	9e 85       	ldd	r25, Y+14	; 0x0e
    1284:	26 e6       	ldi	r18, 0x66	; 102
    1286:	36 e6       	ldi	r19, 0x66	; 102
    1288:	46 e6       	ldi	r20, 0x66	; 102
    128a:	55 e4       	ldi	r21, 0x45	; 69
    128c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	8f 83       	std	Y+7, r24	; 0x07
    1296:	98 87       	std	Y+8, r25	; 0x08
    1298:	a9 87       	std	Y+9, r26	; 0x09
    129a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    129c:	6f 81       	ldd	r22, Y+7	; 0x07
    129e:	78 85       	ldd	r23, Y+8	; 0x08
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__ltsf2>
    12b0:	88 23       	and	r24, r24
    12b2:	2c f4       	brge	.+10     	; 0x12be <lcd_wr_char+0x202>
		__ticks = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	3f c0       	rjmp	.+126    	; 0x133c <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    12be:	6f 81       	ldd	r22, Y+7	; 0x07
    12c0:	78 85       	ldd	r23, Y+8	; 0x08
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	3f ef       	ldi	r19, 0xFF	; 255
    12ca:	4f e7       	ldi	r20, 0x7F	; 127
    12cc:	57 e4       	ldi	r21, 0x47	; 71
    12ce:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gtsf2>
    12d2:	18 16       	cp	r1, r24
    12d4:	4c f5       	brge	.+82     	; 0x1328 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e2       	ldi	r20, 0x20	; 32
    12e4:	51 e4       	ldi	r21, 0x41	; 65
    12e6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	bc 01       	movw	r22, r24
    12f0:	cd 01       	movw	r24, r26
    12f2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <lcd_wr_char+0x262>
    1300:	80 e7       	ldi	r24, 0x70	; 112
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <lcd_wr_char+0x250>
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	69 f7       	brne	.-38     	; 0x1300 <lcd_wr_char+0x244>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <lcd_wr_char+0x28c>
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1350:	a8 e2       	ldi	r26, 0x28	; 40
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e8 e2       	ldi	r30, 0x28	; 40
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8b 7f       	andi	r24, 0xFB	; 251
    135c:	8c 93       	st	X, r24
}
    135e:	6e 96       	adiw	r28, 0x1e	; 30
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <lcd_string>:



/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	0f 92       	push	r0
    1376:	0f 92       	push	r0
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	0a c0       	rjmp	.+20     	; 0x1396 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1382:	e9 81       	ldd	r30, Y+1	; 0x01
    1384:	fa 81       	ldd	r31, Y+2	; 0x02
    1386:	80 81       	ld	r24, Z
    1388:	0e 94 5e 08 	call	0x10bc	; 0x10bc <lcd_wr_char>
		str++;
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1396:	e9 81       	ldd	r30, Y+1	; 0x01
    1398:	fa 81       	ldd	r31, Y+2	; 0x02
    139a:	80 81       	ld	r24, Z
    139c:	88 23       	and	r24, r24
    139e:	89 f7       	brne	.-30     	; 0x1382 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <lcd_cursor+0x6>
    13b0:	0f 92       	push	r0
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3c 83       	std	Y+4, r19	; 0x04
    13c2:	2b 83       	std	Y+3, r18	; 0x03
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	82 30       	cpi	r24, 0x02	; 2
    13ca:	91 05       	cpc	r25, r1
    13cc:	d9 f0       	breq	.+54     	; 0x1404 <lcd_cursor+0x5a>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	23 30       	cpi	r18, 0x03	; 3
    13d4:	31 05       	cpc	r19, r1
    13d6:	34 f4       	brge	.+12     	; 0x13e4 <lcd_cursor+0x3a>
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	61 f0       	breq	.+24     	; 0x13fa <lcd_cursor+0x50>
    13e2:	1e c0       	rjmp	.+60     	; 0x1420 <lcd_cursor+0x76>
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	3c 81       	ldd	r19, Y+4	; 0x04
    13e8:	23 30       	cpi	r18, 0x03	; 3
    13ea:	31 05       	cpc	r19, r1
    13ec:	81 f0       	breq	.+32     	; 0x140e <lcd_cursor+0x64>
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	91 05       	cpc	r25, r1
    13f6:	81 f0       	breq	.+32     	; 0x1418 <lcd_cursor+0x6e>
    13f8:	13 c0       	rjmp	.+38     	; 0x1420 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	81 58       	subi	r24, 0x81	; 129
    13fe:	0e 94 04 07 	call	0xe08	; 0xe08 <lcd_wr_command>
    1402:	0e c0       	rjmp	.+28     	; 0x1420 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	81 54       	subi	r24, 0x41	; 65
    1408:	0e 94 04 07 	call	0xe08	; 0xe08 <lcd_wr_command>
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	8d 56       	subi	r24, 0x6D	; 109
    1412:	0e 94 04 07 	call	0xe08	; 0xe08 <lcd_wr_command>
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	8d 52       	subi	r24, 0x2D	; 45
    141c:	0e 94 04 07 	call	0xe08	; 0xe08 <lcd_wr_command>
		default: break;
	}
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	27 97       	sbiw	r28, 0x07	; 7
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	6b 83       	std	Y+3, r22	; 0x03
    1446:	5d 83       	std	Y+5, r21	; 0x05
    1448:	4c 83       	std	Y+4, r20	; 0x04
    144a:	3f 83       	std	Y+7, r19	; 0x07
    144c:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    144e:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	88 23       	and	r24, r24
    1454:	19 f0       	breq	.+6      	; 0x145c <lcd_print+0x2e>
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	88 23       	and	r24, r24
    145a:	21 f4       	brne	.+8      	; 0x1464 <lcd_print+0x36>
	{
		lcd_wr_command(0x80);
    145c:	80 e8       	ldi	r24, 0x80	; 128
    145e:	0e 94 04 07 	call	0xe08	; 0xe08 <lcd_wr_command>
    1462:	04 c0       	rjmp	.+8      	; 0x146c <lcd_print+0x3e>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	6b 81       	ldd	r22, Y+3	; 0x03
    1468:	0e 94 d5 09 	call	0x13aa	; 0x13aa <lcd_cursor>
	}
	if(digits==5 || flag==1)
    146c:	8e 81       	ldd	r24, Y+6	; 0x06
    146e:	9f 81       	ldd	r25, Y+7	; 0x07
    1470:	85 30       	cpi	r24, 0x05	; 5
    1472:	91 05       	cpc	r25, r1
    1474:	19 f0       	breq	.+6      	; 0x147c <lcd_print+0x4e>
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	a9 f4       	brne	.+42     	; 0x14a6 <lcd_print+0x78>
	{
		million=value/10000+48;
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	20 e1       	ldi	r18, 0x10	; 16
    1482:	37 e2       	ldi	r19, 0x27	; 39
    1484:	b9 01       	movw	r22, r18
    1486:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodhi4>
    148a:	cb 01       	movw	r24, r22
    148c:	c0 96       	adiw	r24, 0x30	; 48
    148e:	90 93 09 02 	sts	0x0209, r25
    1492:	80 93 08 02 	sts	0x0208, r24
		lcd_wr_char(million);
    1496:	80 91 08 02 	lds	r24, 0x0208
    149a:	90 91 09 02 	lds	r25, 0x0209
    149e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <lcd_wr_char>
		flag=1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    14a6:	8e 81       	ldd	r24, Y+6	; 0x06
    14a8:	9f 81       	ldd	r25, Y+7	; 0x07
    14aa:	84 30       	cpi	r24, 0x04	; 4
    14ac:	91 05       	cpc	r25, r1
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <lcd_print+0x88>
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	11 f5       	brne	.+68     	; 0x14fa <lcd_print+0xcc>
	{
		temp = value/1000;
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	28 ee       	ldi	r18, 0xE8	; 232
    14bc:	33 e0       	ldi	r19, 0x03	; 3
    14be:	b9 01       	movw	r22, r18
    14c0:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodhi4>
    14c4:	cb 01       	movw	r24, r22
    14c6:	90 93 0b 02 	sts	0x020B, r25
    14ca:	80 93 0a 02 	sts	0x020A, r24
		thousand = temp%10 + 48;
    14ce:	80 91 0a 02 	lds	r24, 0x020A
    14d2:	90 91 0b 02 	lds	r25, 0x020B
    14d6:	2a e0       	ldi	r18, 0x0A	; 10
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	b9 01       	movw	r22, r18
    14dc:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodhi4>
    14e0:	c0 96       	adiw	r24, 0x30	; 48
    14e2:	90 93 13 02 	sts	0x0213, r25
    14e6:	80 93 12 02 	sts	0x0212, r24
		lcd_wr_char(thousand);
    14ea:	80 91 12 02 	lds	r24, 0x0212
    14ee:	90 91 13 02 	lds	r25, 0x0213
    14f2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <lcd_wr_char>
		flag=1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    14fa:	8e 81       	ldd	r24, Y+6	; 0x06
    14fc:	9f 81       	ldd	r25, Y+7	; 0x07
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	91 05       	cpc	r25, r1
    1502:	19 f0       	breq	.+6      	; 0x150a <lcd_print+0xdc>
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	11 f5       	brne	.+68     	; 0x154e <lcd_print+0x120>
	{
		temp = value/100;
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	24 e6       	ldi	r18, 0x64	; 100
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	b9 01       	movw	r22, r18
    1514:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodhi4>
    1518:	cb 01       	movw	r24, r22
    151a:	90 93 0b 02 	sts	0x020B, r25
    151e:	80 93 0a 02 	sts	0x020A, r24
		hundred = temp%10 + 48;
    1522:	80 91 0a 02 	lds	r24, 0x020A
    1526:	90 91 0b 02 	lds	r25, 0x020B
    152a:	2a e0       	ldi	r18, 0x0A	; 10
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	b9 01       	movw	r22, r18
    1530:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodhi4>
    1534:	c0 96       	adiw	r24, 0x30	; 48
    1536:	90 93 0f 02 	sts	0x020F, r25
    153a:	80 93 0e 02 	sts	0x020E, r24
		lcd_wr_char(hundred);
    153e:	80 91 0e 02 	lds	r24, 0x020E
    1542:	90 91 0f 02 	lds	r25, 0x020F
    1546:	0e 94 5e 08 	call	0x10bc	; 0x10bc <lcd_wr_char>
		flag=1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    154e:	8e 81       	ldd	r24, Y+6	; 0x06
    1550:	9f 81       	ldd	r25, Y+7	; 0x07
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	91 05       	cpc	r25, r1
    1556:	19 f0       	breq	.+6      	; 0x155e <lcd_print+0x130>
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	11 f5       	brne	.+68     	; 0x15a2 <lcd_print+0x174>
	{
		temp = value/10;
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	9d 81       	ldd	r25, Y+5	; 0x05
    1562:	2a e0       	ldi	r18, 0x0A	; 10
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	b9 01       	movw	r22, r18
    1568:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodhi4>
    156c:	cb 01       	movw	r24, r22
    156e:	90 93 0b 02 	sts	0x020B, r25
    1572:	80 93 0a 02 	sts	0x020A, r24
		tens = temp%10 + 48;
    1576:	80 91 0a 02 	lds	r24, 0x020A
    157a:	90 91 0b 02 	lds	r25, 0x020B
    157e:	2a e0       	ldi	r18, 0x0A	; 10
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	b9 01       	movw	r22, r18
    1584:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodhi4>
    1588:	c0 96       	adiw	r24, 0x30	; 48
    158a:	90 93 0d 02 	sts	0x020D, r25
    158e:	80 93 0c 02 	sts	0x020C, r24
		lcd_wr_char(tens);
    1592:	80 91 0c 02 	lds	r24, 0x020C
    1596:	90 91 0d 02 	lds	r25, 0x020D
    159a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <lcd_wr_char>
		flag=1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    15a2:	8e 81       	ldd	r24, Y+6	; 0x06
    15a4:	9f 81       	ldd	r25, Y+7	; 0x07
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	91 05       	cpc	r25, r1
    15aa:	19 f0       	breq	.+6      	; 0x15b2 <lcd_print+0x184>
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	91 f4       	brne	.+36     	; 0x15d6 <lcd_print+0x1a8>
	{
		unit = value%10 + 48;
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	9d 81       	ldd	r25, Y+5	; 0x05
    15b6:	2a e0       	ldi	r18, 0x0A	; 10
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	b9 01       	movw	r22, r18
    15bc:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodhi4>
    15c0:	c0 96       	adiw	r24, 0x30	; 48
    15c2:	90 93 11 02 	sts	0x0211, r25
    15c6:	80 93 10 02 	sts	0x0210, r24
		lcd_wr_char(unit);
    15ca:	80 91 10 02 	lds	r24, 0x0210
    15ce:	90 91 11 02 	lds	r25, 0x0211
    15d2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <lcd_wr_char>
	}
	if(digits>5)
    15d6:	8e 81       	ldd	r24, Y+6	; 0x06
    15d8:	9f 81       	ldd	r25, Y+7	; 0x07
    15da:	86 30       	cpi	r24, 0x06	; 6
    15dc:	91 05       	cpc	r25, r1
    15de:	1c f0       	brlt	.+6      	; 0x15e6 <lcd_print+0x1b8>
	{
		lcd_wr_char('E');
    15e0:	85 e4       	ldi	r24, 0x45	; 69
    15e2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <lcd_wr_char>
	}
	
}
    15e6:	27 96       	adiw	r28, 0x07	; 7
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <__fixunssfsi>:
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	7b 01       	movw	r14, r22
    1602:	8c 01       	movw	r16, r24
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	5f e4       	ldi	r21, 0x4F	; 79
    160c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__gesf2>
    1610:	88 23       	and	r24, r24
    1612:	8c f0       	brlt	.+34     	; 0x1636 <__fixunssfsi+0x3e>
    1614:	c8 01       	movw	r24, r16
    1616:	b7 01       	movw	r22, r14
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	5f e4       	ldi	r21, 0x4F	; 79
    1620:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__subsf3>
    1624:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fixsfsi>
    1628:	9b 01       	movw	r18, r22
    162a:	ac 01       	movw	r20, r24
    162c:	20 50       	subi	r18, 0x00	; 0
    162e:	30 40       	sbci	r19, 0x00	; 0
    1630:	40 40       	sbci	r20, 0x00	; 0
    1632:	50 48       	sbci	r21, 0x80	; 128
    1634:	06 c0       	rjmp	.+12     	; 0x1642 <__fixunssfsi+0x4a>
    1636:	c8 01       	movw	r24, r16
    1638:	b7 01       	movw	r22, r14
    163a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fixsfsi>
    163e:	9b 01       	movw	r18, r22
    1640:	ac 01       	movw	r20, r24
    1642:	b9 01       	movw	r22, r18
    1644:	ca 01       	movw	r24, r20
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	08 95       	ret

00001650 <_fpadd_parts>:
    1650:	a0 e0       	ldi	r26, 0x00	; 0
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ee e2       	ldi	r30, 0x2E	; 46
    1656:	fb e0       	ldi	r31, 0x0B	; 11
    1658:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__prologue_saves__>
    165c:	dc 01       	movw	r26, r24
    165e:	2b 01       	movw	r4, r22
    1660:	fa 01       	movw	r30, r20
    1662:	9c 91       	ld	r25, X
    1664:	92 30       	cpi	r25, 0x02	; 2
    1666:	08 f4       	brcc	.+2      	; 0x166a <_fpadd_parts+0x1a>
    1668:	39 c1       	rjmp	.+626    	; 0x18dc <_fpadd_parts+0x28c>
    166a:	eb 01       	movw	r28, r22
    166c:	88 81       	ld	r24, Y
    166e:	82 30       	cpi	r24, 0x02	; 2
    1670:	08 f4       	brcc	.+2      	; 0x1674 <_fpadd_parts+0x24>
    1672:	33 c1       	rjmp	.+614    	; 0x18da <_fpadd_parts+0x28a>
    1674:	94 30       	cpi	r25, 0x04	; 4
    1676:	69 f4       	brne	.+26     	; 0x1692 <_fpadd_parts+0x42>
    1678:	84 30       	cpi	r24, 0x04	; 4
    167a:	09 f0       	breq	.+2      	; 0x167e <_fpadd_parts+0x2e>
    167c:	2f c1       	rjmp	.+606    	; 0x18dc <_fpadd_parts+0x28c>
    167e:	11 96       	adiw	r26, 0x01	; 1
    1680:	9c 91       	ld	r25, X
    1682:	11 97       	sbiw	r26, 0x01	; 1
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	98 17       	cp	r25, r24
    1688:	09 f4       	brne	.+2      	; 0x168c <_fpadd_parts+0x3c>
    168a:	28 c1       	rjmp	.+592    	; 0x18dc <_fpadd_parts+0x28c>
    168c:	a0 e0       	ldi	r26, 0x00	; 0
    168e:	b2 e0       	ldi	r27, 0x02	; 2
    1690:	25 c1       	rjmp	.+586    	; 0x18dc <_fpadd_parts+0x28c>
    1692:	84 30       	cpi	r24, 0x04	; 4
    1694:	09 f4       	brne	.+2      	; 0x1698 <_fpadd_parts+0x48>
    1696:	21 c1       	rjmp	.+578    	; 0x18da <_fpadd_parts+0x28a>
    1698:	82 30       	cpi	r24, 0x02	; 2
    169a:	a9 f4       	brne	.+42     	; 0x16c6 <_fpadd_parts+0x76>
    169c:	92 30       	cpi	r25, 0x02	; 2
    169e:	09 f0       	breq	.+2      	; 0x16a2 <_fpadd_parts+0x52>
    16a0:	1d c1       	rjmp	.+570    	; 0x18dc <_fpadd_parts+0x28c>
    16a2:	9a 01       	movw	r18, r20
    16a4:	ad 01       	movw	r20, r26
    16a6:	88 e0       	ldi	r24, 0x08	; 8
    16a8:	ea 01       	movw	r28, r20
    16aa:	09 90       	ld	r0, Y+
    16ac:	ae 01       	movw	r20, r28
    16ae:	e9 01       	movw	r28, r18
    16b0:	09 92       	st	Y+, r0
    16b2:	9e 01       	movw	r18, r28
    16b4:	81 50       	subi	r24, 0x01	; 1
    16b6:	c1 f7       	brne	.-16     	; 0x16a8 <_fpadd_parts+0x58>
    16b8:	e2 01       	movw	r28, r4
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	11 96       	adiw	r26, 0x01	; 1
    16be:	9c 91       	ld	r25, X
    16c0:	89 23       	and	r24, r25
    16c2:	81 83       	std	Z+1, r24	; 0x01
    16c4:	08 c1       	rjmp	.+528    	; 0x18d6 <_fpadd_parts+0x286>
    16c6:	92 30       	cpi	r25, 0x02	; 2
    16c8:	09 f4       	brne	.+2      	; 0x16cc <_fpadd_parts+0x7c>
    16ca:	07 c1       	rjmp	.+526    	; 0x18da <_fpadd_parts+0x28a>
    16cc:	12 96       	adiw	r26, 0x02	; 2
    16ce:	2d 90       	ld	r2, X+
    16d0:	3c 90       	ld	r3, X
    16d2:	13 97       	sbiw	r26, 0x03	; 3
    16d4:	eb 01       	movw	r28, r22
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	14 96       	adiw	r26, 0x04	; 4
    16dc:	ad 90       	ld	r10, X+
    16de:	bd 90       	ld	r11, X+
    16e0:	cd 90       	ld	r12, X+
    16e2:	dc 90       	ld	r13, X
    16e4:	17 97       	sbiw	r26, 0x07	; 7
    16e6:	ec 80       	ldd	r14, Y+4	; 0x04
    16e8:	fd 80       	ldd	r15, Y+5	; 0x05
    16ea:	0e 81       	ldd	r16, Y+6	; 0x06
    16ec:	1f 81       	ldd	r17, Y+7	; 0x07
    16ee:	91 01       	movw	r18, r2
    16f0:	28 1b       	sub	r18, r24
    16f2:	39 0b       	sbc	r19, r25
    16f4:	b9 01       	movw	r22, r18
    16f6:	37 ff       	sbrs	r19, 7
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <_fpadd_parts+0xb2>
    16fa:	66 27       	eor	r22, r22
    16fc:	77 27       	eor	r23, r23
    16fe:	62 1b       	sub	r22, r18
    1700:	73 0b       	sbc	r23, r19
    1702:	60 32       	cpi	r22, 0x20	; 32
    1704:	71 05       	cpc	r23, r1
    1706:	0c f0       	brlt	.+2      	; 0x170a <_fpadd_parts+0xba>
    1708:	61 c0       	rjmp	.+194    	; 0x17cc <_fpadd_parts+0x17c>
    170a:	12 16       	cp	r1, r18
    170c:	13 06       	cpc	r1, r19
    170e:	6c f5       	brge	.+90     	; 0x176a <_fpadd_parts+0x11a>
    1710:	37 01       	movw	r6, r14
    1712:	48 01       	movw	r8, r16
    1714:	06 2e       	mov	r0, r22
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <_fpadd_parts+0xd0>
    1718:	96 94       	lsr	r9
    171a:	87 94       	ror	r8
    171c:	77 94       	ror	r7
    171e:	67 94       	ror	r6
    1720:	0a 94       	dec	r0
    1722:	d2 f7       	brpl	.-12     	; 0x1718 <_fpadd_parts+0xc8>
    1724:	21 e0       	ldi	r18, 0x01	; 1
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <_fpadd_parts+0xe6>
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	44 1f       	adc	r20, r20
    1734:	55 1f       	adc	r21, r21
    1736:	6a 95       	dec	r22
    1738:	d2 f7       	brpl	.-12     	; 0x172e <_fpadd_parts+0xde>
    173a:	21 50       	subi	r18, 0x01	; 1
    173c:	30 40       	sbci	r19, 0x00	; 0
    173e:	40 40       	sbci	r20, 0x00	; 0
    1740:	50 40       	sbci	r21, 0x00	; 0
    1742:	2e 21       	and	r18, r14
    1744:	3f 21       	and	r19, r15
    1746:	40 23       	and	r20, r16
    1748:	51 23       	and	r21, r17
    174a:	21 15       	cp	r18, r1
    174c:	31 05       	cpc	r19, r1
    174e:	41 05       	cpc	r20, r1
    1750:	51 05       	cpc	r21, r1
    1752:	21 f0       	breq	.+8      	; 0x175c <_fpadd_parts+0x10c>
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	79 01       	movw	r14, r18
    175e:	8a 01       	movw	r16, r20
    1760:	e6 28       	or	r14, r6
    1762:	f7 28       	or	r15, r7
    1764:	08 29       	or	r16, r8
    1766:	19 29       	or	r17, r9
    1768:	3c c0       	rjmp	.+120    	; 0x17e2 <_fpadd_parts+0x192>
    176a:	23 2b       	or	r18, r19
    176c:	d1 f1       	breq	.+116    	; 0x17e2 <_fpadd_parts+0x192>
    176e:	26 0e       	add	r2, r22
    1770:	37 1e       	adc	r3, r23
    1772:	35 01       	movw	r6, r10
    1774:	46 01       	movw	r8, r12
    1776:	06 2e       	mov	r0, r22
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <_fpadd_parts+0x132>
    177a:	96 94       	lsr	r9
    177c:	87 94       	ror	r8
    177e:	77 94       	ror	r7
    1780:	67 94       	ror	r6
    1782:	0a 94       	dec	r0
    1784:	d2 f7       	brpl	.-12     	; 0x177a <_fpadd_parts+0x12a>
    1786:	21 e0       	ldi	r18, 0x01	; 1
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <_fpadd_parts+0x148>
    1790:	22 0f       	add	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	44 1f       	adc	r20, r20
    1796:	55 1f       	adc	r21, r21
    1798:	6a 95       	dec	r22
    179a:	d2 f7       	brpl	.-12     	; 0x1790 <_fpadd_parts+0x140>
    179c:	21 50       	subi	r18, 0x01	; 1
    179e:	30 40       	sbci	r19, 0x00	; 0
    17a0:	40 40       	sbci	r20, 0x00	; 0
    17a2:	50 40       	sbci	r21, 0x00	; 0
    17a4:	2a 21       	and	r18, r10
    17a6:	3b 21       	and	r19, r11
    17a8:	4c 21       	and	r20, r12
    17aa:	5d 21       	and	r21, r13
    17ac:	21 15       	cp	r18, r1
    17ae:	31 05       	cpc	r19, r1
    17b0:	41 05       	cpc	r20, r1
    17b2:	51 05       	cpc	r21, r1
    17b4:	21 f0       	breq	.+8      	; 0x17be <_fpadd_parts+0x16e>
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	59 01       	movw	r10, r18
    17c0:	6a 01       	movw	r12, r20
    17c2:	a6 28       	or	r10, r6
    17c4:	b7 28       	or	r11, r7
    17c6:	c8 28       	or	r12, r8
    17c8:	d9 28       	or	r13, r9
    17ca:	0b c0       	rjmp	.+22     	; 0x17e2 <_fpadd_parts+0x192>
    17cc:	82 15       	cp	r24, r2
    17ce:	93 05       	cpc	r25, r3
    17d0:	2c f0       	brlt	.+10     	; 0x17dc <_fpadd_parts+0x18c>
    17d2:	1c 01       	movw	r2, r24
    17d4:	aa 24       	eor	r10, r10
    17d6:	bb 24       	eor	r11, r11
    17d8:	65 01       	movw	r12, r10
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <_fpadd_parts+0x192>
    17dc:	ee 24       	eor	r14, r14
    17de:	ff 24       	eor	r15, r15
    17e0:	87 01       	movw	r16, r14
    17e2:	11 96       	adiw	r26, 0x01	; 1
    17e4:	9c 91       	ld	r25, X
    17e6:	d2 01       	movw	r26, r4
    17e8:	11 96       	adiw	r26, 0x01	; 1
    17ea:	8c 91       	ld	r24, X
    17ec:	98 17       	cp	r25, r24
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <_fpadd_parts+0x1a2>
    17f0:	45 c0       	rjmp	.+138    	; 0x187c <_fpadd_parts+0x22c>
    17f2:	99 23       	and	r25, r25
    17f4:	39 f0       	breq	.+14     	; 0x1804 <_fpadd_parts+0x1b4>
    17f6:	a8 01       	movw	r20, r16
    17f8:	97 01       	movw	r18, r14
    17fa:	2a 19       	sub	r18, r10
    17fc:	3b 09       	sbc	r19, r11
    17fe:	4c 09       	sbc	r20, r12
    1800:	5d 09       	sbc	r21, r13
    1802:	06 c0       	rjmp	.+12     	; 0x1810 <_fpadd_parts+0x1c0>
    1804:	a6 01       	movw	r20, r12
    1806:	95 01       	movw	r18, r10
    1808:	2e 19       	sub	r18, r14
    180a:	3f 09       	sbc	r19, r15
    180c:	40 0b       	sbc	r20, r16
    180e:	51 0b       	sbc	r21, r17
    1810:	57 fd       	sbrc	r21, 7
    1812:	08 c0       	rjmp	.+16     	; 0x1824 <_fpadd_parts+0x1d4>
    1814:	11 82       	std	Z+1, r1	; 0x01
    1816:	33 82       	std	Z+3, r3	; 0x03
    1818:	22 82       	std	Z+2, r2	; 0x02
    181a:	24 83       	std	Z+4, r18	; 0x04
    181c:	35 83       	std	Z+5, r19	; 0x05
    181e:	46 83       	std	Z+6, r20	; 0x06
    1820:	57 83       	std	Z+7, r21	; 0x07
    1822:	1d c0       	rjmp	.+58     	; 0x185e <_fpadd_parts+0x20e>
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	81 83       	std	Z+1, r24	; 0x01
    1828:	33 82       	std	Z+3, r3	; 0x03
    182a:	22 82       	std	Z+2, r2	; 0x02
    182c:	88 27       	eor	r24, r24
    182e:	99 27       	eor	r25, r25
    1830:	dc 01       	movw	r26, r24
    1832:	82 1b       	sub	r24, r18
    1834:	93 0b       	sbc	r25, r19
    1836:	a4 0b       	sbc	r26, r20
    1838:	b5 0b       	sbc	r27, r21
    183a:	84 83       	std	Z+4, r24	; 0x04
    183c:	95 83       	std	Z+5, r25	; 0x05
    183e:	a6 83       	std	Z+6, r26	; 0x06
    1840:	b7 83       	std	Z+7, r27	; 0x07
    1842:	0d c0       	rjmp	.+26     	; 0x185e <_fpadd_parts+0x20e>
    1844:	22 0f       	add	r18, r18
    1846:	33 1f       	adc	r19, r19
    1848:	44 1f       	adc	r20, r20
    184a:	55 1f       	adc	r21, r21
    184c:	24 83       	std	Z+4, r18	; 0x04
    184e:	35 83       	std	Z+5, r19	; 0x05
    1850:	46 83       	std	Z+6, r20	; 0x06
    1852:	57 83       	std	Z+7, r21	; 0x07
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	93 83       	std	Z+3, r25	; 0x03
    185c:	82 83       	std	Z+2, r24	; 0x02
    185e:	24 81       	ldd	r18, Z+4	; 0x04
    1860:	35 81       	ldd	r19, Z+5	; 0x05
    1862:	46 81       	ldd	r20, Z+6	; 0x06
    1864:	57 81       	ldd	r21, Z+7	; 0x07
    1866:	da 01       	movw	r26, r20
    1868:	c9 01       	movw	r24, r18
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	a1 09       	sbc	r26, r1
    186e:	b1 09       	sbc	r27, r1
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	af 4f       	sbci	r26, 0xFF	; 255
    1876:	bf 43       	sbci	r27, 0x3F	; 63
    1878:	28 f3       	brcs	.-54     	; 0x1844 <_fpadd_parts+0x1f4>
    187a:	0b c0       	rjmp	.+22     	; 0x1892 <_fpadd_parts+0x242>
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	33 82       	std	Z+3, r3	; 0x03
    1880:	22 82       	std	Z+2, r2	; 0x02
    1882:	ea 0c       	add	r14, r10
    1884:	fb 1c       	adc	r15, r11
    1886:	0c 1d       	adc	r16, r12
    1888:	1d 1d       	adc	r17, r13
    188a:	e4 82       	std	Z+4, r14	; 0x04
    188c:	f5 82       	std	Z+5, r15	; 0x05
    188e:	06 83       	std	Z+6, r16	; 0x06
    1890:	17 83       	std	Z+7, r17	; 0x07
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	80 83       	st	Z, r24
    1896:	24 81       	ldd	r18, Z+4	; 0x04
    1898:	35 81       	ldd	r19, Z+5	; 0x05
    189a:	46 81       	ldd	r20, Z+6	; 0x06
    189c:	57 81       	ldd	r21, Z+7	; 0x07
    189e:	57 ff       	sbrs	r21, 7
    18a0:	1a c0       	rjmp	.+52     	; 0x18d6 <_fpadd_parts+0x286>
    18a2:	c9 01       	movw	r24, r18
    18a4:	aa 27       	eor	r26, r26
    18a6:	97 fd       	sbrc	r25, 7
    18a8:	a0 95       	com	r26
    18aa:	ba 2f       	mov	r27, r26
    18ac:	81 70       	andi	r24, 0x01	; 1
    18ae:	90 70       	andi	r25, 0x00	; 0
    18b0:	a0 70       	andi	r26, 0x00	; 0
    18b2:	b0 70       	andi	r27, 0x00	; 0
    18b4:	56 95       	lsr	r21
    18b6:	47 95       	ror	r20
    18b8:	37 95       	ror	r19
    18ba:	27 95       	ror	r18
    18bc:	82 2b       	or	r24, r18
    18be:	93 2b       	or	r25, r19
    18c0:	a4 2b       	or	r26, r20
    18c2:	b5 2b       	or	r27, r21
    18c4:	84 83       	std	Z+4, r24	; 0x04
    18c6:	95 83       	std	Z+5, r25	; 0x05
    18c8:	a6 83       	std	Z+6, r26	; 0x06
    18ca:	b7 83       	std	Z+7, r27	; 0x07
    18cc:	82 81       	ldd	r24, Z+2	; 0x02
    18ce:	93 81       	ldd	r25, Z+3	; 0x03
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	93 83       	std	Z+3, r25	; 0x03
    18d4:	82 83       	std	Z+2, r24	; 0x02
    18d6:	df 01       	movw	r26, r30
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <_fpadd_parts+0x28c>
    18da:	d2 01       	movw	r26, r4
    18dc:	cd 01       	movw	r24, r26
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	e2 e1       	ldi	r30, 0x12	; 18
    18e4:	0c 94 86 10 	jmp	0x210c	; 0x210c <__epilogue_restores__>

000018e8 <__subsf3>:
    18e8:	a0 e2       	ldi	r26, 0x20	; 32
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ea e7       	ldi	r30, 0x7A	; 122
    18ee:	fc e0       	ldi	r31, 0x0C	; 12
    18f0:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__prologue_saves__+0x18>
    18f4:	69 83       	std	Y+1, r22	; 0x01
    18f6:	7a 83       	std	Y+2, r23	; 0x02
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	9c 83       	std	Y+4, r25	; 0x04
    18fc:	2d 83       	std	Y+5, r18	; 0x05
    18fe:	3e 83       	std	Y+6, r19	; 0x06
    1900:	4f 83       	std	Y+7, r20	; 0x07
    1902:	58 87       	std	Y+8, r21	; 0x08
    1904:	e9 e0       	ldi	r30, 0x09	; 9
    1906:	ee 2e       	mov	r14, r30
    1908:	f1 2c       	mov	r15, r1
    190a:	ec 0e       	add	r14, r28
    190c:	fd 1e       	adc	r15, r29
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	b7 01       	movw	r22, r14
    1914:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1918:	8e 01       	movw	r16, r28
    191a:	0f 5e       	subi	r16, 0xEF	; 239
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	ce 01       	movw	r24, r28
    1920:	05 96       	adiw	r24, 0x05	; 5
    1922:	b8 01       	movw	r22, r16
    1924:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1928:	8a 89       	ldd	r24, Y+18	; 0x12
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	89 27       	eor	r24, r25
    192e:	8a 8b       	std	Y+18, r24	; 0x12
    1930:	c7 01       	movw	r24, r14
    1932:	b8 01       	movw	r22, r16
    1934:	ae 01       	movw	r20, r28
    1936:	47 5e       	subi	r20, 0xE7	; 231
    1938:	5f 4f       	sbci	r21, 0xFF	; 255
    193a:	0e 94 28 0b 	call	0x1650	; 0x1650 <_fpadd_parts>
    193e:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__pack_f>
    1942:	a0 96       	adiw	r28, 0x20	; 32
    1944:	e6 e0       	ldi	r30, 0x06	; 6
    1946:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__epilogue_restores__+0x18>

0000194a <__addsf3>:
    194a:	a0 e2       	ldi	r26, 0x20	; 32
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	eb ea       	ldi	r30, 0xAB	; 171
    1950:	fc e0       	ldi	r31, 0x0C	; 12
    1952:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__prologue_saves__+0x18>
    1956:	69 83       	std	Y+1, r22	; 0x01
    1958:	7a 83       	std	Y+2, r23	; 0x02
    195a:	8b 83       	std	Y+3, r24	; 0x03
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	2d 83       	std	Y+5, r18	; 0x05
    1960:	3e 83       	std	Y+6, r19	; 0x06
    1962:	4f 83       	std	Y+7, r20	; 0x07
    1964:	58 87       	std	Y+8, r21	; 0x08
    1966:	f9 e0       	ldi	r31, 0x09	; 9
    1968:	ef 2e       	mov	r14, r31
    196a:	f1 2c       	mov	r15, r1
    196c:	ec 0e       	add	r14, r28
    196e:	fd 1e       	adc	r15, r29
    1970:	ce 01       	movw	r24, r28
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	b7 01       	movw	r22, r14
    1976:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    197a:	8e 01       	movw	r16, r28
    197c:	0f 5e       	subi	r16, 0xEF	; 239
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	ce 01       	movw	r24, r28
    1982:	05 96       	adiw	r24, 0x05	; 5
    1984:	b8 01       	movw	r22, r16
    1986:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    198a:	c7 01       	movw	r24, r14
    198c:	b8 01       	movw	r22, r16
    198e:	ae 01       	movw	r20, r28
    1990:	47 5e       	subi	r20, 0xE7	; 231
    1992:	5f 4f       	sbci	r21, 0xFF	; 255
    1994:	0e 94 28 0b 	call	0x1650	; 0x1650 <_fpadd_parts>
    1998:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__pack_f>
    199c:	a0 96       	adiw	r28, 0x20	; 32
    199e:	e6 e0       	ldi	r30, 0x06	; 6
    19a0:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__epilogue_restores__+0x18>

000019a4 <__mulsf3>:
    19a4:	a0 e2       	ldi	r26, 0x20	; 32
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e8 ed       	ldi	r30, 0xD8	; 216
    19aa:	fc e0       	ldi	r31, 0x0C	; 12
    19ac:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__prologue_saves__>
    19b0:	69 83       	std	Y+1, r22	; 0x01
    19b2:	7a 83       	std	Y+2, r23	; 0x02
    19b4:	8b 83       	std	Y+3, r24	; 0x03
    19b6:	9c 83       	std	Y+4, r25	; 0x04
    19b8:	2d 83       	std	Y+5, r18	; 0x05
    19ba:	3e 83       	std	Y+6, r19	; 0x06
    19bc:	4f 83       	std	Y+7, r20	; 0x07
    19be:	58 87       	std	Y+8, r21	; 0x08
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	be 01       	movw	r22, r28
    19c6:	67 5f       	subi	r22, 0xF7	; 247
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    19ce:	ce 01       	movw	r24, r28
    19d0:	05 96       	adiw	r24, 0x05	; 5
    19d2:	be 01       	movw	r22, r28
    19d4:	6f 5e       	subi	r22, 0xEF	; 239
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    19dc:	99 85       	ldd	r25, Y+9	; 0x09
    19de:	92 30       	cpi	r25, 0x02	; 2
    19e0:	88 f0       	brcs	.+34     	; 0x1a04 <__mulsf3+0x60>
    19e2:	89 89       	ldd	r24, Y+17	; 0x11
    19e4:	82 30       	cpi	r24, 0x02	; 2
    19e6:	c8 f0       	brcs	.+50     	; 0x1a1a <__mulsf3+0x76>
    19e8:	94 30       	cpi	r25, 0x04	; 4
    19ea:	19 f4       	brne	.+6      	; 0x19f2 <__mulsf3+0x4e>
    19ec:	82 30       	cpi	r24, 0x02	; 2
    19ee:	51 f4       	brne	.+20     	; 0x1a04 <__mulsf3+0x60>
    19f0:	04 c0       	rjmp	.+8      	; 0x19fa <__mulsf3+0x56>
    19f2:	84 30       	cpi	r24, 0x04	; 4
    19f4:	29 f4       	brne	.+10     	; 0x1a00 <__mulsf3+0x5c>
    19f6:	92 30       	cpi	r25, 0x02	; 2
    19f8:	81 f4       	brne	.+32     	; 0x1a1a <__mulsf3+0x76>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	92 e0       	ldi	r25, 0x02	; 2
    19fe:	c6 c0       	rjmp	.+396    	; 0x1b8c <__mulsf3+0x1e8>
    1a00:	92 30       	cpi	r25, 0x02	; 2
    1a02:	49 f4       	brne	.+18     	; 0x1a16 <__mulsf3+0x72>
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	8a 89       	ldd	r24, Y+18	; 0x12
    1a0a:	98 13       	cpse	r25, r24
    1a0c:	21 e0       	ldi	r18, 0x01	; 1
    1a0e:	2a 87       	std	Y+10, r18	; 0x0a
    1a10:	ce 01       	movw	r24, r28
    1a12:	09 96       	adiw	r24, 0x09	; 9
    1a14:	bb c0       	rjmp	.+374    	; 0x1b8c <__mulsf3+0x1e8>
    1a16:	82 30       	cpi	r24, 0x02	; 2
    1a18:	49 f4       	brne	.+18     	; 0x1a2c <__mulsf3+0x88>
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1e:	8a 89       	ldd	r24, Y+18	; 0x12
    1a20:	98 13       	cpse	r25, r24
    1a22:	21 e0       	ldi	r18, 0x01	; 1
    1a24:	2a 8b       	std	Y+18, r18	; 0x12
    1a26:	ce 01       	movw	r24, r28
    1a28:	41 96       	adiw	r24, 0x11	; 17
    1a2a:	b0 c0       	rjmp	.+352    	; 0x1b8c <__mulsf3+0x1e8>
    1a2c:	2d 84       	ldd	r2, Y+13	; 0x0d
    1a2e:	3e 84       	ldd	r3, Y+14	; 0x0e
    1a30:	4f 84       	ldd	r4, Y+15	; 0x0f
    1a32:	58 88       	ldd	r5, Y+16	; 0x10
    1a34:	6d 88       	ldd	r6, Y+21	; 0x15
    1a36:	7e 88       	ldd	r7, Y+22	; 0x16
    1a38:	8f 88       	ldd	r8, Y+23	; 0x17
    1a3a:	98 8c       	ldd	r9, Y+24	; 0x18
    1a3c:	ee 24       	eor	r14, r14
    1a3e:	ff 24       	eor	r15, r15
    1a40:	87 01       	movw	r16, r14
    1a42:	aa 24       	eor	r10, r10
    1a44:	bb 24       	eor	r11, r11
    1a46:	65 01       	movw	r12, r10
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	e0 e0       	ldi	r30, 0x00	; 0
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	c1 01       	movw	r24, r2
    1a56:	81 70       	andi	r24, 0x01	; 1
    1a58:	90 70       	andi	r25, 0x00	; 0
    1a5a:	89 2b       	or	r24, r25
    1a5c:	e9 f0       	breq	.+58     	; 0x1a98 <__mulsf3+0xf4>
    1a5e:	e6 0c       	add	r14, r6
    1a60:	f7 1c       	adc	r15, r7
    1a62:	08 1d       	adc	r16, r8
    1a64:	19 1d       	adc	r17, r9
    1a66:	9a 01       	movw	r18, r20
    1a68:	ab 01       	movw	r20, r22
    1a6a:	2a 0d       	add	r18, r10
    1a6c:	3b 1d       	adc	r19, r11
    1a6e:	4c 1d       	adc	r20, r12
    1a70:	5d 1d       	adc	r21, r13
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a0 e0       	ldi	r26, 0x00	; 0
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e6 14       	cp	r14, r6
    1a7c:	f7 04       	cpc	r15, r7
    1a7e:	08 05       	cpc	r16, r8
    1a80:	19 05       	cpc	r17, r9
    1a82:	20 f4       	brcc	.+8      	; 0x1a8c <__mulsf3+0xe8>
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a0 e0       	ldi	r26, 0x00	; 0
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	ba 01       	movw	r22, r20
    1a8e:	a9 01       	movw	r20, r18
    1a90:	48 0f       	add	r20, r24
    1a92:	59 1f       	adc	r21, r25
    1a94:	6a 1f       	adc	r22, r26
    1a96:	7b 1f       	adc	r23, r27
    1a98:	aa 0c       	add	r10, r10
    1a9a:	bb 1c       	adc	r11, r11
    1a9c:	cc 1c       	adc	r12, r12
    1a9e:	dd 1c       	adc	r13, r13
    1aa0:	97 fe       	sbrs	r9, 7
    1aa2:	08 c0       	rjmp	.+16     	; 0x1ab4 <__mulsf3+0x110>
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	a8 2a       	or	r10, r24
    1aae:	b9 2a       	or	r11, r25
    1ab0:	ca 2a       	or	r12, r26
    1ab2:	db 2a       	or	r13, r27
    1ab4:	31 96       	adiw	r30, 0x01	; 1
    1ab6:	e0 32       	cpi	r30, 0x20	; 32
    1ab8:	f1 05       	cpc	r31, r1
    1aba:	49 f0       	breq	.+18     	; 0x1ace <__mulsf3+0x12a>
    1abc:	66 0c       	add	r6, r6
    1abe:	77 1c       	adc	r7, r7
    1ac0:	88 1c       	adc	r8, r8
    1ac2:	99 1c       	adc	r9, r9
    1ac4:	56 94       	lsr	r5
    1ac6:	47 94       	ror	r4
    1ac8:	37 94       	ror	r3
    1aca:	27 94       	ror	r2
    1acc:	c3 cf       	rjmp	.-122    	; 0x1a54 <__mulsf3+0xb0>
    1ace:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ad0:	ea 89       	ldd	r30, Y+18	; 0x12
    1ad2:	2b 89       	ldd	r18, Y+19	; 0x13
    1ad4:	3c 89       	ldd	r19, Y+20	; 0x14
    1ad6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ada:	28 0f       	add	r18, r24
    1adc:	39 1f       	adc	r19, r25
    1ade:	2e 5f       	subi	r18, 0xFE	; 254
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	17 c0       	rjmp	.+46     	; 0x1b12 <__mulsf3+0x16e>
    1ae4:	ca 01       	movw	r24, r20
    1ae6:	81 70       	andi	r24, 0x01	; 1
    1ae8:	90 70       	andi	r25, 0x00	; 0
    1aea:	89 2b       	or	r24, r25
    1aec:	61 f0       	breq	.+24     	; 0x1b06 <__mulsf3+0x162>
    1aee:	16 95       	lsr	r17
    1af0:	07 95       	ror	r16
    1af2:	f7 94       	ror	r15
    1af4:	e7 94       	ror	r14
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a0 e0       	ldi	r26, 0x00	; 0
    1afc:	b0 e8       	ldi	r27, 0x80	; 128
    1afe:	e8 2a       	or	r14, r24
    1b00:	f9 2a       	or	r15, r25
    1b02:	0a 2b       	or	r16, r26
    1b04:	1b 2b       	or	r17, r27
    1b06:	76 95       	lsr	r23
    1b08:	67 95       	ror	r22
    1b0a:	57 95       	ror	r21
    1b0c:	47 95       	ror	r20
    1b0e:	2f 5f       	subi	r18, 0xFF	; 255
    1b10:	3f 4f       	sbci	r19, 0xFF	; 255
    1b12:	77 fd       	sbrc	r23, 7
    1b14:	e7 cf       	rjmp	.-50     	; 0x1ae4 <__mulsf3+0x140>
    1b16:	0c c0       	rjmp	.+24     	; 0x1b30 <__mulsf3+0x18c>
    1b18:	44 0f       	add	r20, r20
    1b1a:	55 1f       	adc	r21, r21
    1b1c:	66 1f       	adc	r22, r22
    1b1e:	77 1f       	adc	r23, r23
    1b20:	17 fd       	sbrc	r17, 7
    1b22:	41 60       	ori	r20, 0x01	; 1
    1b24:	ee 0c       	add	r14, r14
    1b26:	ff 1c       	adc	r15, r15
    1b28:	00 1f       	adc	r16, r16
    1b2a:	11 1f       	adc	r17, r17
    1b2c:	21 50       	subi	r18, 0x01	; 1
    1b2e:	30 40       	sbci	r19, 0x00	; 0
    1b30:	40 30       	cpi	r20, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	59 07       	cpc	r21, r25
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	69 07       	cpc	r22, r25
    1b3a:	90 e4       	ldi	r25, 0x40	; 64
    1b3c:	79 07       	cpc	r23, r25
    1b3e:	60 f3       	brcs	.-40     	; 0x1b18 <__mulsf3+0x174>
    1b40:	2b 8f       	std	Y+27, r18	; 0x1b
    1b42:	3c 8f       	std	Y+28, r19	; 0x1c
    1b44:	db 01       	movw	r26, r22
    1b46:	ca 01       	movw	r24, r20
    1b48:	8f 77       	andi	r24, 0x7F	; 127
    1b4a:	90 70       	andi	r25, 0x00	; 0
    1b4c:	a0 70       	andi	r26, 0x00	; 0
    1b4e:	b0 70       	andi	r27, 0x00	; 0
    1b50:	80 34       	cpi	r24, 0x40	; 64
    1b52:	91 05       	cpc	r25, r1
    1b54:	a1 05       	cpc	r26, r1
    1b56:	b1 05       	cpc	r27, r1
    1b58:	61 f4       	brne	.+24     	; 0x1b72 <__mulsf3+0x1ce>
    1b5a:	47 fd       	sbrc	r20, 7
    1b5c:	0a c0       	rjmp	.+20     	; 0x1b72 <__mulsf3+0x1ce>
    1b5e:	e1 14       	cp	r14, r1
    1b60:	f1 04       	cpc	r15, r1
    1b62:	01 05       	cpc	r16, r1
    1b64:	11 05       	cpc	r17, r1
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <__mulsf3+0x1ce>
    1b68:	40 5c       	subi	r20, 0xC0	; 192
    1b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6c:	6f 4f       	sbci	r22, 0xFF	; 255
    1b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b70:	40 78       	andi	r20, 0x80	; 128
    1b72:	1a 8e       	std	Y+26, r1	; 0x1a
    1b74:	fe 17       	cp	r31, r30
    1b76:	11 f0       	breq	.+4      	; 0x1b7c <__mulsf3+0x1d8>
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	8a 8f       	std	Y+26, r24	; 0x1a
    1b7c:	4d 8f       	std	Y+29, r20	; 0x1d
    1b7e:	5e 8f       	std	Y+30, r21	; 0x1e
    1b80:	6f 8f       	std	Y+31, r22	; 0x1f
    1b82:	78 a3       	std	Y+32, r23	; 0x20
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	89 8f       	std	Y+25, r24	; 0x19
    1b88:	ce 01       	movw	r24, r28
    1b8a:	49 96       	adiw	r24, 0x19	; 25
    1b8c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__pack_f>
    1b90:	a0 96       	adiw	r28, 0x20	; 32
    1b92:	e2 e1       	ldi	r30, 0x12	; 18
    1b94:	0c 94 86 10 	jmp	0x210c	; 0x210c <__epilogue_restores__>

00001b98 <__gtsf2>:
    1b98:	a8 e1       	ldi	r26, 0x18	; 24
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e2 ed       	ldi	r30, 0xD2	; 210
    1b9e:	fd e0       	ldi	r31, 0x0D	; 13
    1ba0:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__prologue_saves__+0x18>
    1ba4:	69 83       	std	Y+1, r22	; 0x01
    1ba6:	7a 83       	std	Y+2, r23	; 0x02
    1ba8:	8b 83       	std	Y+3, r24	; 0x03
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	2d 83       	std	Y+5, r18	; 0x05
    1bae:	3e 83       	std	Y+6, r19	; 0x06
    1bb0:	4f 83       	std	Y+7, r20	; 0x07
    1bb2:	58 87       	std	Y+8, r21	; 0x08
    1bb4:	89 e0       	ldi	r24, 0x09	; 9
    1bb6:	e8 2e       	mov	r14, r24
    1bb8:	f1 2c       	mov	r15, r1
    1bba:	ec 0e       	add	r14, r28
    1bbc:	fd 1e       	adc	r15, r29
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	b7 01       	movw	r22, r14
    1bc4:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1bc8:	8e 01       	movw	r16, r28
    1bca:	0f 5e       	subi	r16, 0xEF	; 239
    1bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bce:	ce 01       	movw	r24, r28
    1bd0:	05 96       	adiw	r24, 0x05	; 5
    1bd2:	b8 01       	movw	r22, r16
    1bd4:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	40 f0       	brcs	.+16     	; 0x1bee <__gtsf2+0x56>
    1bde:	89 89       	ldd	r24, Y+17	; 0x11
    1be0:	82 30       	cpi	r24, 0x02	; 2
    1be2:	28 f0       	brcs	.+10     	; 0x1bee <__gtsf2+0x56>
    1be4:	c7 01       	movw	r24, r14
    1be6:	b8 01       	movw	r22, r16
    1be8:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__fpcmp_parts_f>
    1bec:	01 c0       	rjmp	.+2      	; 0x1bf0 <__gtsf2+0x58>
    1bee:	8f ef       	ldi	r24, 0xFF	; 255
    1bf0:	68 96       	adiw	r28, 0x18	; 24
    1bf2:	e6 e0       	ldi	r30, 0x06	; 6
    1bf4:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__epilogue_restores__+0x18>

00001bf8 <__gesf2>:
    1bf8:	a8 e1       	ldi	r26, 0x18	; 24
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e2 e0       	ldi	r30, 0x02	; 2
    1bfe:	fe e0       	ldi	r31, 0x0E	; 14
    1c00:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__prologue_saves__+0x18>
    1c04:	69 83       	std	Y+1, r22	; 0x01
    1c06:	7a 83       	std	Y+2, r23	; 0x02
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	9c 83       	std	Y+4, r25	; 0x04
    1c0c:	2d 83       	std	Y+5, r18	; 0x05
    1c0e:	3e 83       	std	Y+6, r19	; 0x06
    1c10:	4f 83       	std	Y+7, r20	; 0x07
    1c12:	58 87       	std	Y+8, r21	; 0x08
    1c14:	89 e0       	ldi	r24, 0x09	; 9
    1c16:	e8 2e       	mov	r14, r24
    1c18:	f1 2c       	mov	r15, r1
    1c1a:	ec 0e       	add	r14, r28
    1c1c:	fd 1e       	adc	r15, r29
    1c1e:	ce 01       	movw	r24, r28
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	b7 01       	movw	r22, r14
    1c24:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1c28:	8e 01       	movw	r16, r28
    1c2a:	0f 5e       	subi	r16, 0xEF	; 239
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	ce 01       	movw	r24, r28
    1c30:	05 96       	adiw	r24, 0x05	; 5
    1c32:	b8 01       	movw	r22, r16
    1c34:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1c38:	89 85       	ldd	r24, Y+9	; 0x09
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	40 f0       	brcs	.+16     	; 0x1c4e <__gesf2+0x56>
    1c3e:	89 89       	ldd	r24, Y+17	; 0x11
    1c40:	82 30       	cpi	r24, 0x02	; 2
    1c42:	28 f0       	brcs	.+10     	; 0x1c4e <__gesf2+0x56>
    1c44:	c7 01       	movw	r24, r14
    1c46:	b8 01       	movw	r22, r16
    1c48:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__fpcmp_parts_f>
    1c4c:	01 c0       	rjmp	.+2      	; 0x1c50 <__gesf2+0x58>
    1c4e:	8f ef       	ldi	r24, 0xFF	; 255
    1c50:	68 96       	adiw	r28, 0x18	; 24
    1c52:	e6 e0       	ldi	r30, 0x06	; 6
    1c54:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__epilogue_restores__+0x18>

00001c58 <__ltsf2>:
    1c58:	a8 e1       	ldi	r26, 0x18	; 24
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e2 e3       	ldi	r30, 0x32	; 50
    1c5e:	fe e0       	ldi	r31, 0x0E	; 14
    1c60:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__prologue_saves__+0x18>
    1c64:	69 83       	std	Y+1, r22	; 0x01
    1c66:	7a 83       	std	Y+2, r23	; 0x02
    1c68:	8b 83       	std	Y+3, r24	; 0x03
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	2d 83       	std	Y+5, r18	; 0x05
    1c6e:	3e 83       	std	Y+6, r19	; 0x06
    1c70:	4f 83       	std	Y+7, r20	; 0x07
    1c72:	58 87       	std	Y+8, r21	; 0x08
    1c74:	89 e0       	ldi	r24, 0x09	; 9
    1c76:	e8 2e       	mov	r14, r24
    1c78:	f1 2c       	mov	r15, r1
    1c7a:	ec 0e       	add	r14, r28
    1c7c:	fd 1e       	adc	r15, r29
    1c7e:	ce 01       	movw	r24, r28
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	b7 01       	movw	r22, r14
    1c84:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1c88:	8e 01       	movw	r16, r28
    1c8a:	0f 5e       	subi	r16, 0xEF	; 239
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	ce 01       	movw	r24, r28
    1c90:	05 96       	adiw	r24, 0x05	; 5
    1c92:	b8 01       	movw	r22, r16
    1c94:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	82 30       	cpi	r24, 0x02	; 2
    1c9c:	40 f0       	brcs	.+16     	; 0x1cae <__ltsf2+0x56>
    1c9e:	89 89       	ldd	r24, Y+17	; 0x11
    1ca0:	82 30       	cpi	r24, 0x02	; 2
    1ca2:	28 f0       	brcs	.+10     	; 0x1cae <__ltsf2+0x56>
    1ca4:	c7 01       	movw	r24, r14
    1ca6:	b8 01       	movw	r22, r16
    1ca8:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__fpcmp_parts_f>
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <__ltsf2+0x58>
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	68 96       	adiw	r28, 0x18	; 24
    1cb2:	e6 e0       	ldi	r30, 0x06	; 6
    1cb4:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__epilogue_restores__+0x18>

00001cb8 <__fixsfsi>:
    1cb8:	ac e0       	ldi	r26, 0x0C	; 12
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e2 e6       	ldi	r30, 0x62	; 98
    1cbe:	fe e0       	ldi	r31, 0x0E	; 14
    1cc0:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__prologue_saves__+0x20>
    1cc4:	69 83       	std	Y+1, r22	; 0x01
    1cc6:	7a 83       	std	Y+2, r23	; 0x02
    1cc8:	8b 83       	std	Y+3, r24	; 0x03
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	ce 01       	movw	r24, r28
    1cce:	01 96       	adiw	r24, 0x01	; 1
    1cd0:	be 01       	movw	r22, r28
    1cd2:	6b 5f       	subi	r22, 0xFB	; 251
    1cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd6:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	61 f1       	breq	.+88     	; 0x1d38 <__fixsfsi+0x80>
    1ce0:	82 30       	cpi	r24, 0x02	; 2
    1ce2:	50 f1       	brcs	.+84     	; 0x1d38 <__fixsfsi+0x80>
    1ce4:	84 30       	cpi	r24, 0x04	; 4
    1ce6:	21 f4       	brne	.+8      	; 0x1cf0 <__fixsfsi+0x38>
    1ce8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cea:	88 23       	and	r24, r24
    1cec:	51 f1       	breq	.+84     	; 0x1d42 <__fixsfsi+0x8a>
    1cee:	2e c0       	rjmp	.+92     	; 0x1d4c <__fixsfsi+0x94>
    1cf0:	2f 81       	ldd	r18, Y+7	; 0x07
    1cf2:	38 85       	ldd	r19, Y+8	; 0x08
    1cf4:	37 fd       	sbrc	r19, 7
    1cf6:	20 c0       	rjmp	.+64     	; 0x1d38 <__fixsfsi+0x80>
    1cf8:	6e 81       	ldd	r22, Y+6	; 0x06
    1cfa:	2f 31       	cpi	r18, 0x1F	; 31
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	1c f0       	brlt	.+6      	; 0x1d06 <__fixsfsi+0x4e>
    1d00:	66 23       	and	r22, r22
    1d02:	f9 f0       	breq	.+62     	; 0x1d42 <__fixsfsi+0x8a>
    1d04:	23 c0       	rjmp	.+70     	; 0x1d4c <__fixsfsi+0x94>
    1d06:	8e e1       	ldi	r24, 0x1E	; 30
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	82 1b       	sub	r24, r18
    1d0c:	93 0b       	sbc	r25, r19
    1d0e:	29 85       	ldd	r18, Y+9	; 0x09
    1d10:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d12:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d14:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <__fixsfsi+0x68>
    1d18:	56 95       	lsr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	37 95       	ror	r19
    1d1e:	27 95       	ror	r18
    1d20:	8a 95       	dec	r24
    1d22:	d2 f7       	brpl	.-12     	; 0x1d18 <__fixsfsi+0x60>
    1d24:	66 23       	and	r22, r22
    1d26:	b1 f0       	breq	.+44     	; 0x1d54 <__fixsfsi+0x9c>
    1d28:	50 95       	com	r21
    1d2a:	40 95       	com	r20
    1d2c:	30 95       	com	r19
    1d2e:	21 95       	neg	r18
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	4f 4f       	sbci	r20, 0xFF	; 255
    1d34:	5f 4f       	sbci	r21, 0xFF	; 255
    1d36:	0e c0       	rjmp	.+28     	; 0x1d54 <__fixsfsi+0x9c>
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	09 c0       	rjmp	.+18     	; 0x1d54 <__fixsfsi+0x9c>
    1d42:	2f ef       	ldi	r18, 0xFF	; 255
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	4f ef       	ldi	r20, 0xFF	; 255
    1d48:	5f e7       	ldi	r21, 0x7F	; 127
    1d4a:	04 c0       	rjmp	.+8      	; 0x1d54 <__fixsfsi+0x9c>
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	50 e8       	ldi	r21, 0x80	; 128
    1d54:	b9 01       	movw	r22, r18
    1d56:	ca 01       	movw	r24, r20
    1d58:	2c 96       	adiw	r28, 0x0c	; 12
    1d5a:	e2 e0       	ldi	r30, 0x02	; 2
    1d5c:	0c 94 96 10 	jmp	0x212c	; 0x212c <__epilogue_restores__+0x20>

00001d60 <__pack_f>:
    1d60:	df 92       	push	r13
    1d62:	ef 92       	push	r14
    1d64:	ff 92       	push	r15
    1d66:	0f 93       	push	r16
    1d68:	1f 93       	push	r17
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	e4 80       	ldd	r14, Z+4	; 0x04
    1d6e:	f5 80       	ldd	r15, Z+5	; 0x05
    1d70:	06 81       	ldd	r16, Z+6	; 0x06
    1d72:	17 81       	ldd	r17, Z+7	; 0x07
    1d74:	d1 80       	ldd	r13, Z+1	; 0x01
    1d76:	80 81       	ld	r24, Z
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	48 f4       	brcc	.+18     	; 0x1d8e <__pack_f+0x2e>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	a0 e1       	ldi	r26, 0x10	; 16
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e8 2a       	or	r14, r24
    1d86:	f9 2a       	or	r15, r25
    1d88:	0a 2b       	or	r16, r26
    1d8a:	1b 2b       	or	r17, r27
    1d8c:	a5 c0       	rjmp	.+330    	; 0x1ed8 <__pack_f+0x178>
    1d8e:	84 30       	cpi	r24, 0x04	; 4
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <__pack_f+0x34>
    1d92:	9f c0       	rjmp	.+318    	; 0x1ed2 <__pack_f+0x172>
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	21 f4       	brne	.+8      	; 0x1da0 <__pack_f+0x40>
    1d98:	ee 24       	eor	r14, r14
    1d9a:	ff 24       	eor	r15, r15
    1d9c:	87 01       	movw	r16, r14
    1d9e:	05 c0       	rjmp	.+10     	; 0x1daa <__pack_f+0x4a>
    1da0:	e1 14       	cp	r14, r1
    1da2:	f1 04       	cpc	r15, r1
    1da4:	01 05       	cpc	r16, r1
    1da6:	11 05       	cpc	r17, r1
    1da8:	19 f4       	brne	.+6      	; 0x1db0 <__pack_f+0x50>
    1daa:	e0 e0       	ldi	r30, 0x00	; 0
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	96 c0       	rjmp	.+300    	; 0x1edc <__pack_f+0x17c>
    1db0:	62 81       	ldd	r22, Z+2	; 0x02
    1db2:	73 81       	ldd	r23, Z+3	; 0x03
    1db4:	9f ef       	ldi	r25, 0xFF	; 255
    1db6:	62 38       	cpi	r22, 0x82	; 130
    1db8:	79 07       	cpc	r23, r25
    1dba:	0c f0       	brlt	.+2      	; 0x1dbe <__pack_f+0x5e>
    1dbc:	5b c0       	rjmp	.+182    	; 0x1e74 <__pack_f+0x114>
    1dbe:	22 e8       	ldi	r18, 0x82	; 130
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	26 1b       	sub	r18, r22
    1dc4:	37 0b       	sbc	r19, r23
    1dc6:	2a 31       	cpi	r18, 0x1A	; 26
    1dc8:	31 05       	cpc	r19, r1
    1dca:	2c f0       	brlt	.+10     	; 0x1dd6 <__pack_f+0x76>
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	50 e0       	ldi	r21, 0x00	; 0
    1dd4:	2a c0       	rjmp	.+84     	; 0x1e2a <__pack_f+0xca>
    1dd6:	b8 01       	movw	r22, r16
    1dd8:	a7 01       	movw	r20, r14
    1dda:	02 2e       	mov	r0, r18
    1ddc:	04 c0       	rjmp	.+8      	; 0x1de6 <__pack_f+0x86>
    1dde:	76 95       	lsr	r23
    1de0:	67 95       	ror	r22
    1de2:	57 95       	ror	r21
    1de4:	47 95       	ror	r20
    1de6:	0a 94       	dec	r0
    1de8:	d2 f7       	brpl	.-12     	; 0x1dde <__pack_f+0x7e>
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a0 e0       	ldi	r26, 0x00	; 0
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <__pack_f+0x9c>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	aa 1f       	adc	r26, r26
    1dfa:	bb 1f       	adc	r27, r27
    1dfc:	2a 95       	dec	r18
    1dfe:	d2 f7       	brpl	.-12     	; 0x1df4 <__pack_f+0x94>
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	a1 09       	sbc	r26, r1
    1e04:	b1 09       	sbc	r27, r1
    1e06:	8e 21       	and	r24, r14
    1e08:	9f 21       	and	r25, r15
    1e0a:	a0 23       	and	r26, r16
    1e0c:	b1 23       	and	r27, r17
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	a1 05       	cpc	r26, r1
    1e12:	b1 05       	cpc	r27, r1
    1e14:	21 f0       	breq	.+8      	; 0x1e1e <__pack_f+0xbe>
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 e0       	ldi	r26, 0x00	; 0
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	9a 01       	movw	r18, r20
    1e20:	ab 01       	movw	r20, r22
    1e22:	28 2b       	or	r18, r24
    1e24:	39 2b       	or	r19, r25
    1e26:	4a 2b       	or	r20, r26
    1e28:	5b 2b       	or	r21, r27
    1e2a:	da 01       	movw	r26, r20
    1e2c:	c9 01       	movw	r24, r18
    1e2e:	8f 77       	andi	r24, 0x7F	; 127
    1e30:	90 70       	andi	r25, 0x00	; 0
    1e32:	a0 70       	andi	r26, 0x00	; 0
    1e34:	b0 70       	andi	r27, 0x00	; 0
    1e36:	80 34       	cpi	r24, 0x40	; 64
    1e38:	91 05       	cpc	r25, r1
    1e3a:	a1 05       	cpc	r26, r1
    1e3c:	b1 05       	cpc	r27, r1
    1e3e:	39 f4       	brne	.+14     	; 0x1e4e <__pack_f+0xee>
    1e40:	27 ff       	sbrs	r18, 7
    1e42:	09 c0       	rjmp	.+18     	; 0x1e56 <__pack_f+0xf6>
    1e44:	20 5c       	subi	r18, 0xC0	; 192
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
    1e48:	4f 4f       	sbci	r20, 0xFF	; 255
    1e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <__pack_f+0xf6>
    1e4e:	21 5c       	subi	r18, 0xC1	; 193
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	4f 4f       	sbci	r20, 0xFF	; 255
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255
    1e56:	e0 e0       	ldi	r30, 0x00	; 0
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	20 30       	cpi	r18, 0x00	; 0
    1e5c:	a0 e0       	ldi	r26, 0x00	; 0
    1e5e:	3a 07       	cpc	r19, r26
    1e60:	a0 e0       	ldi	r26, 0x00	; 0
    1e62:	4a 07       	cpc	r20, r26
    1e64:	a0 e4       	ldi	r26, 0x40	; 64
    1e66:	5a 07       	cpc	r21, r26
    1e68:	10 f0       	brcs	.+4      	; 0x1e6e <__pack_f+0x10e>
    1e6a:	e1 e0       	ldi	r30, 0x01	; 1
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	79 01       	movw	r14, r18
    1e70:	8a 01       	movw	r16, r20
    1e72:	27 c0       	rjmp	.+78     	; 0x1ec2 <__pack_f+0x162>
    1e74:	60 38       	cpi	r22, 0x80	; 128
    1e76:	71 05       	cpc	r23, r1
    1e78:	64 f5       	brge	.+88     	; 0x1ed2 <__pack_f+0x172>
    1e7a:	fb 01       	movw	r30, r22
    1e7c:	e1 58       	subi	r30, 0x81	; 129
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	d8 01       	movw	r26, r16
    1e82:	c7 01       	movw	r24, r14
    1e84:	8f 77       	andi	r24, 0x7F	; 127
    1e86:	90 70       	andi	r25, 0x00	; 0
    1e88:	a0 70       	andi	r26, 0x00	; 0
    1e8a:	b0 70       	andi	r27, 0x00	; 0
    1e8c:	80 34       	cpi	r24, 0x40	; 64
    1e8e:	91 05       	cpc	r25, r1
    1e90:	a1 05       	cpc	r26, r1
    1e92:	b1 05       	cpc	r27, r1
    1e94:	39 f4       	brne	.+14     	; 0x1ea4 <__pack_f+0x144>
    1e96:	e7 fe       	sbrs	r14, 7
    1e98:	0d c0       	rjmp	.+26     	; 0x1eb4 <__pack_f+0x154>
    1e9a:	80 e4       	ldi	r24, 0x40	; 64
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	04 c0       	rjmp	.+8      	; 0x1eac <__pack_f+0x14c>
    1ea4:	8f e3       	ldi	r24, 0x3F	; 63
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a0 e0       	ldi	r26, 0x00	; 0
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e8 0e       	add	r14, r24
    1eae:	f9 1e       	adc	r15, r25
    1eb0:	0a 1f       	adc	r16, r26
    1eb2:	1b 1f       	adc	r17, r27
    1eb4:	17 ff       	sbrs	r17, 7
    1eb6:	05 c0       	rjmp	.+10     	; 0x1ec2 <__pack_f+0x162>
    1eb8:	16 95       	lsr	r17
    1eba:	07 95       	ror	r16
    1ebc:	f7 94       	ror	r15
    1ebe:	e7 94       	ror	r14
    1ec0:	31 96       	adiw	r30, 0x01	; 1
    1ec2:	87 e0       	ldi	r24, 0x07	; 7
    1ec4:	16 95       	lsr	r17
    1ec6:	07 95       	ror	r16
    1ec8:	f7 94       	ror	r15
    1eca:	e7 94       	ror	r14
    1ecc:	8a 95       	dec	r24
    1ece:	d1 f7       	brne	.-12     	; 0x1ec4 <__pack_f+0x164>
    1ed0:	05 c0       	rjmp	.+10     	; 0x1edc <__pack_f+0x17c>
    1ed2:	ee 24       	eor	r14, r14
    1ed4:	ff 24       	eor	r15, r15
    1ed6:	87 01       	movw	r16, r14
    1ed8:	ef ef       	ldi	r30, 0xFF	; 255
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	6e 2f       	mov	r22, r30
    1ede:	67 95       	ror	r22
    1ee0:	66 27       	eor	r22, r22
    1ee2:	67 95       	ror	r22
    1ee4:	90 2f       	mov	r25, r16
    1ee6:	9f 77       	andi	r25, 0x7F	; 127
    1ee8:	d7 94       	ror	r13
    1eea:	dd 24       	eor	r13, r13
    1eec:	d7 94       	ror	r13
    1eee:	8e 2f       	mov	r24, r30
    1ef0:	86 95       	lsr	r24
    1ef2:	49 2f       	mov	r20, r25
    1ef4:	46 2b       	or	r20, r22
    1ef6:	58 2f       	mov	r21, r24
    1ef8:	5d 29       	or	r21, r13
    1efa:	b7 01       	movw	r22, r14
    1efc:	ca 01       	movw	r24, r20
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	df 90       	pop	r13
    1f08:	08 95       	ret

00001f0a <__unpack_f>:
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	db 01       	movw	r26, r22
    1f0e:	40 81       	ld	r20, Z
    1f10:	51 81       	ldd	r21, Z+1	; 0x01
    1f12:	22 81       	ldd	r18, Z+2	; 0x02
    1f14:	62 2f       	mov	r22, r18
    1f16:	6f 77       	andi	r22, 0x7F	; 127
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	22 1f       	adc	r18, r18
    1f1c:	22 27       	eor	r18, r18
    1f1e:	22 1f       	adc	r18, r18
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	89 2f       	mov	r24, r25
    1f24:	88 0f       	add	r24, r24
    1f26:	82 2b       	or	r24, r18
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	99 27       	eor	r25, r25
    1f30:	99 1f       	adc	r25, r25
    1f32:	11 96       	adiw	r26, 0x01	; 1
    1f34:	9c 93       	st	X, r25
    1f36:	11 97       	sbiw	r26, 0x01	; 1
    1f38:	21 15       	cp	r18, r1
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	a9 f5       	brne	.+106    	; 0x1fa8 <__unpack_f+0x9e>
    1f3e:	41 15       	cp	r20, r1
    1f40:	51 05       	cpc	r21, r1
    1f42:	61 05       	cpc	r22, r1
    1f44:	71 05       	cpc	r23, r1
    1f46:	11 f4       	brne	.+4      	; 0x1f4c <__unpack_f+0x42>
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	37 c0       	rjmp	.+110    	; 0x1fba <__unpack_f+0xb0>
    1f4c:	82 e8       	ldi	r24, 0x82	; 130
    1f4e:	9f ef       	ldi	r25, 0xFF	; 255
    1f50:	13 96       	adiw	r26, 0x03	; 3
    1f52:	9c 93       	st	X, r25
    1f54:	8e 93       	st	-X, r24
    1f56:	12 97       	sbiw	r26, 0x02	; 2
    1f58:	9a 01       	movw	r18, r20
    1f5a:	ab 01       	movw	r20, r22
    1f5c:	67 e0       	ldi	r22, 0x07	; 7
    1f5e:	22 0f       	add	r18, r18
    1f60:	33 1f       	adc	r19, r19
    1f62:	44 1f       	adc	r20, r20
    1f64:	55 1f       	adc	r21, r21
    1f66:	6a 95       	dec	r22
    1f68:	d1 f7       	brne	.-12     	; 0x1f5e <__unpack_f+0x54>
    1f6a:	83 e0       	ldi	r24, 0x03	; 3
    1f6c:	8c 93       	st	X, r24
    1f6e:	0d c0       	rjmp	.+26     	; 0x1f8a <__unpack_f+0x80>
    1f70:	22 0f       	add	r18, r18
    1f72:	33 1f       	adc	r19, r19
    1f74:	44 1f       	adc	r20, r20
    1f76:	55 1f       	adc	r21, r21
    1f78:	12 96       	adiw	r26, 0x02	; 2
    1f7a:	8d 91       	ld	r24, X+
    1f7c:	9c 91       	ld	r25, X
    1f7e:	13 97       	sbiw	r26, 0x03	; 3
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	13 96       	adiw	r26, 0x03	; 3
    1f84:	9c 93       	st	X, r25
    1f86:	8e 93       	st	-X, r24
    1f88:	12 97       	sbiw	r26, 0x02	; 2
    1f8a:	20 30       	cpi	r18, 0x00	; 0
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	38 07       	cpc	r19, r24
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	48 07       	cpc	r20, r24
    1f94:	80 e4       	ldi	r24, 0x40	; 64
    1f96:	58 07       	cpc	r21, r24
    1f98:	58 f3       	brcs	.-42     	; 0x1f70 <__unpack_f+0x66>
    1f9a:	14 96       	adiw	r26, 0x04	; 4
    1f9c:	2d 93       	st	X+, r18
    1f9e:	3d 93       	st	X+, r19
    1fa0:	4d 93       	st	X+, r20
    1fa2:	5c 93       	st	X, r21
    1fa4:	17 97       	sbiw	r26, 0x07	; 7
    1fa6:	08 95       	ret
    1fa8:	2f 3f       	cpi	r18, 0xFF	; 255
    1faa:	31 05       	cpc	r19, r1
    1fac:	79 f4       	brne	.+30     	; 0x1fcc <__unpack_f+0xc2>
    1fae:	41 15       	cp	r20, r1
    1fb0:	51 05       	cpc	r21, r1
    1fb2:	61 05       	cpc	r22, r1
    1fb4:	71 05       	cpc	r23, r1
    1fb6:	19 f4       	brne	.+6      	; 0x1fbe <__unpack_f+0xb4>
    1fb8:	84 e0       	ldi	r24, 0x04	; 4
    1fba:	8c 93       	st	X, r24
    1fbc:	08 95       	ret
    1fbe:	64 ff       	sbrs	r22, 4
    1fc0:	03 c0       	rjmp	.+6      	; 0x1fc8 <__unpack_f+0xbe>
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	8c 93       	st	X, r24
    1fc6:	12 c0       	rjmp	.+36     	; 0x1fec <__unpack_f+0xe2>
    1fc8:	1c 92       	st	X, r1
    1fca:	10 c0       	rjmp	.+32     	; 0x1fec <__unpack_f+0xe2>
    1fcc:	2f 57       	subi	r18, 0x7F	; 127
    1fce:	30 40       	sbci	r19, 0x00	; 0
    1fd0:	13 96       	adiw	r26, 0x03	; 3
    1fd2:	3c 93       	st	X, r19
    1fd4:	2e 93       	st	-X, r18
    1fd6:	12 97       	sbiw	r26, 0x02	; 2
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	8c 93       	st	X, r24
    1fdc:	87 e0       	ldi	r24, 0x07	; 7
    1fde:	44 0f       	add	r20, r20
    1fe0:	55 1f       	adc	r21, r21
    1fe2:	66 1f       	adc	r22, r22
    1fe4:	77 1f       	adc	r23, r23
    1fe6:	8a 95       	dec	r24
    1fe8:	d1 f7       	brne	.-12     	; 0x1fde <__unpack_f+0xd4>
    1fea:	70 64       	ori	r23, 0x40	; 64
    1fec:	14 96       	adiw	r26, 0x04	; 4
    1fee:	4d 93       	st	X+, r20
    1ff0:	5d 93       	st	X+, r21
    1ff2:	6d 93       	st	X+, r22
    1ff4:	7c 93       	st	X, r23
    1ff6:	17 97       	sbiw	r26, 0x07	; 7
    1ff8:	08 95       	ret

00001ffa <__fpcmp_parts_f>:
    1ffa:	1f 93       	push	r17
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	fb 01       	movw	r30, r22
    2000:	9c 91       	ld	r25, X
    2002:	92 30       	cpi	r25, 0x02	; 2
    2004:	08 f4       	brcc	.+2      	; 0x2008 <__fpcmp_parts_f+0xe>
    2006:	47 c0       	rjmp	.+142    	; 0x2096 <__fpcmp_parts_f+0x9c>
    2008:	80 81       	ld	r24, Z
    200a:	82 30       	cpi	r24, 0x02	; 2
    200c:	08 f4       	brcc	.+2      	; 0x2010 <__fpcmp_parts_f+0x16>
    200e:	43 c0       	rjmp	.+134    	; 0x2096 <__fpcmp_parts_f+0x9c>
    2010:	94 30       	cpi	r25, 0x04	; 4
    2012:	51 f4       	brne	.+20     	; 0x2028 <__fpcmp_parts_f+0x2e>
    2014:	11 96       	adiw	r26, 0x01	; 1
    2016:	1c 91       	ld	r17, X
    2018:	84 30       	cpi	r24, 0x04	; 4
    201a:	99 f5       	brne	.+102    	; 0x2082 <__fpcmp_parts_f+0x88>
    201c:	81 81       	ldd	r24, Z+1	; 0x01
    201e:	68 2f       	mov	r22, r24
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	61 1b       	sub	r22, r17
    2024:	71 09       	sbc	r23, r1
    2026:	3f c0       	rjmp	.+126    	; 0x20a6 <__fpcmp_parts_f+0xac>
    2028:	84 30       	cpi	r24, 0x04	; 4
    202a:	21 f0       	breq	.+8      	; 0x2034 <__fpcmp_parts_f+0x3a>
    202c:	92 30       	cpi	r25, 0x02	; 2
    202e:	31 f4       	brne	.+12     	; 0x203c <__fpcmp_parts_f+0x42>
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	b9 f1       	breq	.+110    	; 0x20a2 <__fpcmp_parts_f+0xa8>
    2034:	81 81       	ldd	r24, Z+1	; 0x01
    2036:	88 23       	and	r24, r24
    2038:	89 f1       	breq	.+98     	; 0x209c <__fpcmp_parts_f+0xa2>
    203a:	2d c0       	rjmp	.+90     	; 0x2096 <__fpcmp_parts_f+0x9c>
    203c:	11 96       	adiw	r26, 0x01	; 1
    203e:	1c 91       	ld	r17, X
    2040:	11 97       	sbiw	r26, 0x01	; 1
    2042:	82 30       	cpi	r24, 0x02	; 2
    2044:	f1 f0       	breq	.+60     	; 0x2082 <__fpcmp_parts_f+0x88>
    2046:	81 81       	ldd	r24, Z+1	; 0x01
    2048:	18 17       	cp	r17, r24
    204a:	d9 f4       	brne	.+54     	; 0x2082 <__fpcmp_parts_f+0x88>
    204c:	12 96       	adiw	r26, 0x02	; 2
    204e:	2d 91       	ld	r18, X+
    2050:	3c 91       	ld	r19, X
    2052:	13 97       	sbiw	r26, 0x03	; 3
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	82 17       	cp	r24, r18
    205a:	93 07       	cpc	r25, r19
    205c:	94 f0       	brlt	.+36     	; 0x2082 <__fpcmp_parts_f+0x88>
    205e:	28 17       	cp	r18, r24
    2060:	39 07       	cpc	r19, r25
    2062:	bc f0       	brlt	.+46     	; 0x2092 <__fpcmp_parts_f+0x98>
    2064:	14 96       	adiw	r26, 0x04	; 4
    2066:	8d 91       	ld	r24, X+
    2068:	9d 91       	ld	r25, X+
    206a:	0d 90       	ld	r0, X+
    206c:	bc 91       	ld	r27, X
    206e:	a0 2d       	mov	r26, r0
    2070:	24 81       	ldd	r18, Z+4	; 0x04
    2072:	35 81       	ldd	r19, Z+5	; 0x05
    2074:	46 81       	ldd	r20, Z+6	; 0x06
    2076:	57 81       	ldd	r21, Z+7	; 0x07
    2078:	28 17       	cp	r18, r24
    207a:	39 07       	cpc	r19, r25
    207c:	4a 07       	cpc	r20, r26
    207e:	5b 07       	cpc	r21, r27
    2080:	18 f4       	brcc	.+6      	; 0x2088 <__fpcmp_parts_f+0x8e>
    2082:	11 23       	and	r17, r17
    2084:	41 f0       	breq	.+16     	; 0x2096 <__fpcmp_parts_f+0x9c>
    2086:	0a c0       	rjmp	.+20     	; 0x209c <__fpcmp_parts_f+0xa2>
    2088:	82 17       	cp	r24, r18
    208a:	93 07       	cpc	r25, r19
    208c:	a4 07       	cpc	r26, r20
    208e:	b5 07       	cpc	r27, r21
    2090:	40 f4       	brcc	.+16     	; 0x20a2 <__fpcmp_parts_f+0xa8>
    2092:	11 23       	and	r17, r17
    2094:	19 f0       	breq	.+6      	; 0x209c <__fpcmp_parts_f+0xa2>
    2096:	61 e0       	ldi	r22, 0x01	; 1
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	05 c0       	rjmp	.+10     	; 0x20a6 <__fpcmp_parts_f+0xac>
    209c:	6f ef       	ldi	r22, 0xFF	; 255
    209e:	7f ef       	ldi	r23, 0xFF	; 255
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <__fpcmp_parts_f+0xac>
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	cb 01       	movw	r24, r22
    20a8:	1f 91       	pop	r17
    20aa:	08 95       	ret

000020ac <__udivmodhi4>:
    20ac:	aa 1b       	sub	r26, r26
    20ae:	bb 1b       	sub	r27, r27
    20b0:	51 e1       	ldi	r21, 0x11	; 17
    20b2:	07 c0       	rjmp	.+14     	; 0x20c2 <__udivmodhi4_ep>

000020b4 <__udivmodhi4_loop>:
    20b4:	aa 1f       	adc	r26, r26
    20b6:	bb 1f       	adc	r27, r27
    20b8:	a6 17       	cp	r26, r22
    20ba:	b7 07       	cpc	r27, r23
    20bc:	10 f0       	brcs	.+4      	; 0x20c2 <__udivmodhi4_ep>
    20be:	a6 1b       	sub	r26, r22
    20c0:	b7 0b       	sbc	r27, r23

000020c2 <__udivmodhi4_ep>:
    20c2:	88 1f       	adc	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	5a 95       	dec	r21
    20c8:	a9 f7       	brne	.-22     	; 0x20b4 <__udivmodhi4_loop>
    20ca:	80 95       	com	r24
    20cc:	90 95       	com	r25
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	08 95       	ret

000020d4 <__prologue_saves__>:
    20d4:	2f 92       	push	r2
    20d6:	3f 92       	push	r3
    20d8:	4f 92       	push	r4
    20da:	5f 92       	push	r5
    20dc:	6f 92       	push	r6
    20de:	7f 92       	push	r7
    20e0:	8f 92       	push	r8
    20e2:	9f 92       	push	r9
    20e4:	af 92       	push	r10
    20e6:	bf 92       	push	r11
    20e8:	cf 92       	push	r12
    20ea:	df 92       	push	r13
    20ec:	ef 92       	push	r14
    20ee:	ff 92       	push	r15
    20f0:	0f 93       	push	r16
    20f2:	1f 93       	push	r17
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	ca 1b       	sub	r28, r26
    20fe:	db 0b       	sbc	r29, r27
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	19 94       	eijmp

0000210c <__epilogue_restores__>:
    210c:	2a 88       	ldd	r2, Y+18	; 0x12
    210e:	39 88       	ldd	r3, Y+17	; 0x11
    2110:	48 88       	ldd	r4, Y+16	; 0x10
    2112:	5f 84       	ldd	r5, Y+15	; 0x0f
    2114:	6e 84       	ldd	r6, Y+14	; 0x0e
    2116:	7d 84       	ldd	r7, Y+13	; 0x0d
    2118:	8c 84       	ldd	r8, Y+12	; 0x0c
    211a:	9b 84       	ldd	r9, Y+11	; 0x0b
    211c:	aa 84       	ldd	r10, Y+10	; 0x0a
    211e:	b9 84       	ldd	r11, Y+9	; 0x09
    2120:	c8 84       	ldd	r12, Y+8	; 0x08
    2122:	df 80       	ldd	r13, Y+7	; 0x07
    2124:	ee 80       	ldd	r14, Y+6	; 0x06
    2126:	fd 80       	ldd	r15, Y+5	; 0x05
    2128:	0c 81       	ldd	r16, Y+4	; 0x04
    212a:	1b 81       	ldd	r17, Y+3	; 0x03
    212c:	aa 81       	ldd	r26, Y+2	; 0x02
    212e:	b9 81       	ldd	r27, Y+1	; 0x01
    2130:	ce 0f       	add	r28, r30
    2132:	d1 1d       	adc	r29, r1
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	ed 01       	movw	r28, r26
    2140:	08 95       	ret

00002142 <_exit>:
    2142:	f8 94       	cli

00002144 <__stop_program>:
    2144:	ff cf       	rjmp	.-2      	; 0x2144 <__stop_program>
