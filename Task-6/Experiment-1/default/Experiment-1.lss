
Experiment-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800200  00002ace  00002b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ace  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800310  00800310  00002c72  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00002c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000018a  00000000  00000000  00002cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000814  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e5  00000000  00000000  00003650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b11  00000000  00000000  00003835  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00004348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ef  00000000  00000000  00004438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_set_4bit+0x58c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ee ec       	ldi	r30, 0xCE	; 206
     17e:	fa e2       	ldi	r31, 0x2A	; 42
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a0 31       	cpi	r26, 0x10	; 16
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a0 e1       	ldi	r26, 0x10	; 16
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ac 31       	cpi	r26, 0x1C	; 28
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 bb 01 	call	0x376	; 0x376 <main>
     1a4:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_port_config>:
		 viz. DDRx and PORTx.
Example Call: lcd_port_config 
*/

void lcd_port_config ()
	{
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
	 
	 DDRC= 0xF7 ; // All Port C pins except Pin no. 4 i.e(PC3) have to be set as output.
     1b4:	e7 e2       	ldi	r30, 0x27	; 39
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	87 ef       	ldi	r24, 0xF7	; 247
     1ba:	80 83       	st	Z, r24

	 PORTC= 0x00 ; // Write suitable value in the PORT C register to make initial values to be "0" 
     1bc:	e8 e2       	ldi	r30, 0x28	; 40
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	10 82       	st	Z, r1
	 		  //Set initial value as "0" on all pins except Pin no.4 (PC3)
	 
	}
     1c2:	cf 91       	pop	r28
     1c4:	df 91       	pop	r29
     1c6:	08 95       	ret

000001c8 <adc_pin_config>:
* Logic: Code to initialize desired I/O port using IO port registers 
		 viz. DDRx and PORTx.
Example Call: adc_pin_config 
*/
void adc_pin_config (void)
{
     1c8:	df 93       	push	r29
     1ca:	cf 93       	push	r28
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00 ;  // All Port F pins have to be set as input.
     1d0:	e0 e3       	ldi	r30, 0x30	; 48
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	10 82       	st	Z, r1
 PORTF = 0x00 ; // Write suitable value in the PORT F register to make initial values to be "0"
     1d6:	e1 e3       	ldi	r30, 0x31	; 49
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	10 82       	st	Z, r1
 DDRK = 0x00  ; //All Port K pins have to be set as input
     1dc:	e7 e0       	ldi	r30, 0x07	; 7
     1de:	f1 e0       	ldi	r31, 0x01	; 1
     1e0:	10 82       	st	Z, r1
 PORTK = 0x00 ; // Write suitable value in the PORT K register to make initial values to be "0"
     1e2:	e8 e0       	ldi	r30, 0x08	; 8
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
     1e6:	10 82       	st	Z, r1
}
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <adc_init>:
* Logic: Code to initialize the register to generate the PWM using timer 5 
		 viz. ADCSRA,ADCSRB,ADMUX,ACSR
Example Call: adc_init()) 
*/
void adc_init()
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;	//Write suitable value in this register to disable ADC during initialization.
     1f6:	ea e7       	ldi	r30, 0x7A	; 122
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	10 82       	st	Z, r1
	ADCSRB = 0x00 ;	//Write suitable value in this register for initialization.
     1fc:	eb e7       	ldi	r30, 0x7B	; 123
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	10 82       	st	Z, r1
	ADMUX = 0x20;	//Write appropraite value in the ADMUX register to select external Reference voltage (connected to AREF pin) and left adjustment active.
     202:	ec e7       	ldi	r30, 0x7C	; 124
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 e2       	ldi	r24, 0x20	; 32
     208:	80 83       	st	Z, r24
	ACSR = 0x80;	//Disable the analog comparator.(optional)
     20a:	e0 e5       	ldi	r30, 0x50	; 80
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	80 83       	st	Z, r24
	ADCSRA = 0x86 ;	//Write suitable value to this register to enable ADC and to select the required prescalar. 
     212:	ea e7       	ldi	r30, 0x7A	; 122
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	86 e8       	ldi	r24, 0x86	; 134
     218:	80 83       	st	Z, r24
}
     21a:	cf 91       	pop	r28
     21c:	df 91       	pop	r29
     21e:	08 95       	ret

00000220 <ADC_Conversion_sharp_sensor>:
Example Call: ADC_Conversion_sharp_sensor
*/
//Function For ADC Conversion

unsigned char ADC_Conversion_sharp_sensor(unsigned char Ch)
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	0f 92       	push	r0
     226:	0f 92       	push	r0
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	8a 83       	std	Y+2, r24	; 0x02
	// Complete the code to write appropriate value in the ADMUX register based on the ADC channel number of the front sharp IR range sensor.
	// Start the ADC conversion and return its digital equivalent value.
	//front sharp sensor is connected to ADC channel number 11

	unsigned char a;
	if(Ch>7)
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	88 30       	cpi	r24, 0x08	; 8
     232:	20 f0       	brcs	.+8      	; 0x23c <ADC_Conversion_sharp_sensor+0x1c>
	{
		ADCSRB = 0x08;
     234:	eb e7       	ldi	r30, 0x7B	; 123
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	88 e0       	ldi	r24, 0x08	; 8
     23a:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	87 70       	andi	r24, 0x07	; 7
     240:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
     242:	ec e7       	ldi	r30, 0x7C	; 124
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	80 62       	ori	r24, 0x20	; 32
     24a:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     24c:	aa e7       	ldi	r26, 0x7A	; 122
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	ea e7       	ldi	r30, 0x7A	; 122
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	80 64       	ori	r24, 0x40	; 64
     258:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     25a:	ea e7       	ldi	r30, 0x7A	; 122
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 2f       	mov	r24, r24
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	80 71       	andi	r24, 0x10	; 16
     266:	90 70       	andi	r25, 0x00	; 0
     268:	00 97       	sbiw	r24, 0x00	; 0
     26a:	b9 f3       	breq	.-18     	; 0x25a <ADC_Conversion_sharp_sensor+0x3a>
	a=ADCH;
     26c:	e9 e7       	ldi	r30, 0x79	; 121
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     274:	aa e7       	ldi	r26, 0x7A	; 122
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	ea e7       	ldi	r30, 0x7A	; 122
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	80 61       	ori	r24, 0x10	; 16
     280:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     282:	eb e7       	ldi	r30, 0x7B	; 123
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	10 82       	st	Z, r1
	return a;
     288:	89 81       	ldd	r24, Y+1	; 0x01

}
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	cf 91       	pop	r28
     290:	df 91       	pop	r29
     292:	08 95       	ret

00000294 <Sharp_GP2D12_estimation>:
Example Call: Sharp_GP2D12_estimation(ADC reading of sharp sensor)
*/
//Function For ADC Conversion

unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     294:	df 93       	push	r29
     296:	cf 93       	push	r28
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	27 97       	sbiw	r28, 0x07	; 7
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     2aa:	8f 81       	ldd	r24, Y+7	; 0x07
     2ac:	88 2f       	mov	r24, r24
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	a0 e0       	ldi	r26, 0x00	; 0
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	bc 01       	movw	r22, r24
     2b6:	cd 01       	movw	r24, r26
     2b8:	0e 94 35 10 	call	0x206a	; 0x206a <__floatunsisf>
     2bc:	dc 01       	movw	r26, r24
     2be:	cb 01       	movw	r24, r22
     2c0:	bc 01       	movw	r22, r24
     2c2:	cd 01       	movw	r24, r26
     2c4:	2f ee       	ldi	r18, 0xEF	; 239
     2c6:	39 ec       	ldi	r19, 0xC9	; 201
     2c8:	43 e9       	ldi	r20, 0x93	; 147
     2ca:	5f e3       	ldi	r21, 0x3F	; 63
     2cc:	0e 94 ee 12 	call	0x25dc	; 0x25dc <pow>
     2d0:	dc 01       	movw	r26, r24
     2d2:	cb 01       	movw	r24, r22
     2d4:	9c 01       	movw	r18, r24
     2d6:	ad 01       	movw	r20, r26
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	80 e8       	ldi	r24, 0x80	; 128
     2de:	9f e3       	ldi	r25, 0x3F	; 63
     2e0:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__divsf3>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	2a e9       	ldi	r18, 0x9A	; 154
     2ee:	39 ef       	ldi	r19, 0xF9	; 249
     2f0:	4e e2       	ldi	r20, 0x2E	; 46
     2f2:	55 e4       	ldi	r21, 0x45	; 69
     2f4:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	bc 01       	movw	r22, r24
     2fe:	cd 01       	movw	r24, r26
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e2       	ldi	r20, 0x20	; 32
     306:	51 e4       	ldi	r21, 0x41	; 65
     308:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	bc 01       	movw	r22, r24
     312:	cd 01       	movw	r24, r26
     314:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fixsfsi>
     318:	dc 01       	movw	r26, r24
     31a:	cb 01       	movw	r24, r22
     31c:	aa 27       	eor	r26, r26
     31e:	97 fd       	sbrc	r25, 7
     320:	a0 95       	com	r26
     322:	ba 2f       	mov	r27, r26
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__floatsisf>
     32c:	dc 01       	movw	r26, r24
     32e:	cb 01       	movw	r24, r22
     330:	8b 83       	std	Y+3, r24	; 0x03
     332:	9c 83       	std	Y+4, r25	; 0x04
     334:	ad 83       	std	Y+5, r26	; 0x05
     336:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
     338:	6b 81       	ldd	r22, Y+3	; 0x03
     33a:	7c 81       	ldd	r23, Y+4	; 0x04
     33c:	8d 81       	ldd	r24, Y+5	; 0x05
     33e:	9e 81       	ldd	r25, Y+6	; 0x06
     340:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fixsfsi>
     344:	dc 01       	movw	r26, r24
     346:	cb 01       	movw	r24, r22
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	23 e0       	ldi	r18, 0x03	; 3
     352:	81 32       	cpi	r24, 0x21	; 33
     354:	92 07       	cpc	r25, r18
     356:	20 f0       	brcs	.+8      	; 0x360 <Sharp_GP2D12_estimation+0xcc>
	{
		distanceInt=800;
     358:	80 e2       	ldi	r24, 0x20	; 32
     35a:	93 e0       	ldi	r25, 0x03	; 3
     35c:	9a 83       	std	Y+2, r25	; 0x02
     35e:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	9a 81       	ldd	r25, Y+2	; 0x02
}
     364:	27 96       	adiw	r28, 0x07	; 7
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	cf 91       	pop	r28
     372:	df 91       	pop	r29
     374:	08 95       	ret

00000376 <main>:


///////////////////////////////////main function////////////////////////////////////////////

int main()
{
     376:	df 93       	push	r29
     378:	cf 93       	push	r28
     37a:	00 d0       	rcall	.+0      	; 0x37c <main+0x6>
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
     380:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_port_config>
	lcd_init();
     384:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <lcd_init>
	adc_pin_config();
     388:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <adc_pin_config>
	adc_init();
     38c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <adc_init>
		/*	lcd_cursor(1,1);
			lcd_string("Obstacle is far");
		*/

//////////////////////////////////////////////////////////////////////////
	lcd_cursor(1,2);
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	62 e0       	ldi	r22, 0x02	; 2
     394:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <lcd_cursor>
	lcd_wr_char('p');
     398:	80 e7       	ldi	r24, 0x70	; 112
     39a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <lcd_wr_char>
	lcd_cursor(2,1);
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <lcd_cursor>
	lcd_string("dedwncc");
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	0e 94 33 0a 	call	0x1466	; 0x1466 <lcd_string>
	b=ADC_Conversion_sharp_sensor(11);
     3ae:	8b e0       	ldi	r24, 0x0B	; 11
     3b0:	0e 94 10 01 	call	0x220	; 0x220 <ADC_Conversion_sharp_sensor>
     3b4:	8b 83       	std	Y+3, r24	; 0x03
	c=Sharp_GP2D12_estimation(b);
     3b6:	8b 81       	ldd	r24, Y+3	; 0x03
     3b8:	0e 94 4a 01 	call	0x294	; 0x294 <Sharp_GP2D12_estimation>
     3bc:	9a 83       	std	Y+2, r25	; 0x02
     3be:	89 83       	std	Y+1, r24	; 0x01
	lcd_print(2,10,c,3);
     3c0:	29 81       	ldd	r18, Y+1	; 0x01
     3c2:	3a 81       	ldd	r19, Y+2	; 0x02
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	6a e0       	ldi	r22, 0x0A	; 10
     3c8:	a9 01       	movw	r20, r18
     3ca:	23 e0       	ldi	r18, 0x03	; 3
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	0e 94 92 0a 	call	0x1524	; 0x1524 <lcd_print>
     3d2:	de cf       	rjmp	.-68     	; 0x390 <main+0x1a>

000003d4 <lcd_set_4bit>:
#include <util/delay.h>
#include "lcd.h"		// user-defined header file - it is included in project folder

//Function to set LCD in 4-bit mode 
void lcd_set_4bit()
{
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	df 93       	push	r29
     3da:	cf 93       	push	r28
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	c0 57       	subi	r28, 0x70	; 112
     3e2:	d0 40       	sbci	r29, 0x00	; 0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	fe 01       	movw	r30, r28
     3f0:	e3 59       	subi	r30, 0x93	; 147
     3f2:	ff 4f       	sbci	r31, 0xFF	; 255
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	a0 e8       	ldi	r26, 0x80	; 128
     3fa:	bf e3       	ldi	r27, 0x3F	; 63
     3fc:	80 83       	st	Z, r24
     3fe:	91 83       	std	Z+1, r25	; 0x01
     400:	a2 83       	std	Z+2, r26	; 0x02
     402:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     404:	8e 01       	movw	r16, r28
     406:	07 59       	subi	r16, 0x97	; 151
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	fe 01       	movw	r30, r28
     40c:	e3 59       	subi	r30, 0x93	; 147
     40e:	ff 4f       	sbci	r31, 0xFF	; 255
     410:	60 81       	ld	r22, Z
     412:	71 81       	ldd	r23, Z+1	; 0x01
     414:	82 81       	ldd	r24, Z+2	; 0x02
     416:	93 81       	ldd	r25, Z+3	; 0x03
     418:	26 e6       	ldi	r18, 0x66	; 102
     41a:	36 e6       	ldi	r19, 0x66	; 102
     41c:	46 e6       	ldi	r20, 0x66	; 102
     41e:	55 e4       	ldi	r21, 0x45	; 69
     420:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	f8 01       	movw	r30, r16
     42a:	80 83       	st	Z, r24
     42c:	91 83       	std	Z+1, r25	; 0x01
     42e:	a2 83       	std	Z+2, r26	; 0x02
     430:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     432:	fe 01       	movw	r30, r28
     434:	e7 59       	subi	r30, 0x97	; 151
     436:	ff 4f       	sbci	r31, 0xFF	; 255
     438:	60 81       	ld	r22, Z
     43a:	71 81       	ldd	r23, Z+1	; 0x01
     43c:	82 81       	ldd	r24, Z+2	; 0x02
     43e:	93 81       	ldd	r25, Z+3	; 0x03
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e8       	ldi	r20, 0x80	; 128
     446:	5f e3       	ldi	r21, 0x3F	; 63
     448:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
     44c:	88 23       	and	r24, r24
     44e:	44 f4       	brge	.+16     	; 0x460 <lcd_set_4bit+0x8c>
		__ticks = 1;
     450:	fe 01       	movw	r30, r28
     452:	e9 59       	subi	r30, 0x99	; 153
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	91 83       	std	Z+1, r25	; 0x01
     45c:	80 83       	st	Z, r24
     45e:	64 c0       	rjmp	.+200    	; 0x528 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     460:	fe 01       	movw	r30, r28
     462:	e7 59       	subi	r30, 0x97	; 151
     464:	ff 4f       	sbci	r31, 0xFF	; 255
     466:	60 81       	ld	r22, Z
     468:	71 81       	ldd	r23, Z+1	; 0x01
     46a:	82 81       	ldd	r24, Z+2	; 0x02
     46c:	93 81       	ldd	r25, Z+3	; 0x03
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	3f ef       	ldi	r19, 0xFF	; 255
     472:	4f e7       	ldi	r20, 0x7F	; 127
     474:	57 e4       	ldi	r21, 0x47	; 71
     476:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
     47a:	18 16       	cp	r1, r24
     47c:	0c f0       	brlt	.+2      	; 0x480 <lcd_set_4bit+0xac>
     47e:	43 c0       	rjmp	.+134    	; 0x506 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     480:	fe 01       	movw	r30, r28
     482:	e3 59       	subi	r30, 0x93	; 147
     484:	ff 4f       	sbci	r31, 0xFF	; 255
     486:	60 81       	ld	r22, Z
     488:	71 81       	ldd	r23, Z+1	; 0x01
     48a:	82 81       	ldd	r24, Z+2	; 0x02
     48c:	93 81       	ldd	r25, Z+3	; 0x03
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	40 e2       	ldi	r20, 0x20	; 32
     494:	51 e4       	ldi	r21, 0x41	; 65
     496:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	8e 01       	movw	r16, r28
     4a0:	09 59       	subi	r16, 0x99	; 153
     4a2:	1f 4f       	sbci	r17, 0xFF	; 255
     4a4:	bc 01       	movw	r22, r24
     4a6:	cd 01       	movw	r24, r26
     4a8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	f8 01       	movw	r30, r16
     4b2:	91 83       	std	Z+1, r25	; 0x01
     4b4:	80 83       	st	Z, r24
     4b6:	1f c0       	rjmp	.+62     	; 0x4f6 <lcd_set_4bit+0x122>
     4b8:	fe 01       	movw	r30, r28
     4ba:	eb 59       	subi	r30, 0x9B	; 155
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	80 e7       	ldi	r24, 0x70	; 112
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	91 83       	std	Z+1, r25	; 0x01
     4c4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4c6:	fe 01       	movw	r30, r28
     4c8:	eb 59       	subi	r30, 0x9B	; 155
     4ca:	ff 4f       	sbci	r31, 0xFF	; 255
     4cc:	80 81       	ld	r24, Z
     4ce:	91 81       	ldd	r25, Z+1	; 0x01
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <lcd_set_4bit+0xfc>
     4d4:	fe 01       	movw	r30, r28
     4d6:	eb 59       	subi	r30, 0x9B	; 155
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4de:	de 01       	movw	r26, r28
     4e0:	a9 59       	subi	r26, 0x99	; 153
     4e2:	bf 4f       	sbci	r27, 0xFF	; 255
     4e4:	fe 01       	movw	r30, r28
     4e6:	e9 59       	subi	r30, 0x99	; 153
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	80 81       	ld	r24, Z
     4ec:	91 81       	ldd	r25, Z+1	; 0x01
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	11 96       	adiw	r26, 0x01	; 1
     4f2:	9c 93       	st	X, r25
     4f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4f6:	fe 01       	movw	r30, r28
     4f8:	e9 59       	subi	r30, 0x99	; 153
     4fa:	ff 4f       	sbci	r31, 0xFF	; 255
     4fc:	80 81       	ld	r24, Z
     4fe:	91 81       	ldd	r25, Z+1	; 0x01
     500:	00 97       	sbiw	r24, 0x00	; 0
     502:	d1 f6       	brne	.-76     	; 0x4b8 <lcd_set_4bit+0xe4>
     504:	27 c0       	rjmp	.+78     	; 0x554 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     506:	8e 01       	movw	r16, r28
     508:	09 59       	subi	r16, 0x99	; 153
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	fe 01       	movw	r30, r28
     50e:	e7 59       	subi	r30, 0x97	; 151
     510:	ff 4f       	sbci	r31, 0xFF	; 255
     512:	60 81       	ld	r22, Z
     514:	71 81       	ldd	r23, Z+1	; 0x01
     516:	82 81       	ldd	r24, Z+2	; 0x02
     518:	93 81       	ldd	r25, Z+3	; 0x03
     51a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	f8 01       	movw	r30, r16
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	de 01       	movw	r26, r28
     52a:	ad 59       	subi	r26, 0x9D	; 157
     52c:	bf 4f       	sbci	r27, 0xFF	; 255
     52e:	fe 01       	movw	r30, r28
     530:	e9 59       	subi	r30, 0x99	; 153
     532:	ff 4f       	sbci	r31, 0xFF	; 255
     534:	80 81       	ld	r24, Z
     536:	91 81       	ldd	r25, Z+1	; 0x01
     538:	8d 93       	st	X+, r24
     53a:	9c 93       	st	X, r25
     53c:	fe 01       	movw	r30, r28
     53e:	ed 59       	subi	r30, 0x9D	; 157
     540:	ff 4f       	sbci	r31, 0xFF	; 255
     542:	80 81       	ld	r24, Z
     544:	91 81       	ldd	r25, Z+1	; 0x01
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <lcd_set_4bit+0x172>
     54a:	fe 01       	movw	r30, r28
     54c:	ed 59       	subi	r30, 0x9D	; 157
     54e:	ff 4f       	sbci	r31, 0xFF	; 255
     550:	91 83       	std	Z+1, r25	; 0x01
     552:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     554:	a8 e2       	ldi	r26, 0x28	; 40
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	e8 e2       	ldi	r30, 0x28	; 40
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	80 81       	ld	r24, Z
     55e:	8e 7f       	andi	r24, 0xFE	; 254
     560:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     562:	a8 e2       	ldi	r26, 0x28	; 40
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	e8 e2       	ldi	r30, 0x28	; 40
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	8d 7f       	andi	r24, 0xFD	; 253
     56e:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     570:	e8 e2       	ldi	r30, 0x28	; 40
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 e3       	ldi	r24, 0x30	; 48
     576:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     578:	a8 e2       	ldi	r26, 0x28	; 40
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	e8 e2       	ldi	r30, 0x28	; 40
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	84 60       	ori	r24, 0x04	; 4
     584:	8c 93       	st	X, r24
     586:	fe 01       	movw	r30, r28
     588:	e1 5a       	subi	r30, 0xA1	; 161
     58a:	ff 4f       	sbci	r31, 0xFF	; 255
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	a0 ea       	ldi	r26, 0xA0	; 160
     592:	b0 e4       	ldi	r27, 0x40	; 64
     594:	80 83       	st	Z, r24
     596:	91 83       	std	Z+1, r25	; 0x01
     598:	a2 83       	std	Z+2, r26	; 0x02
     59a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     59c:	8e 01       	movw	r16, r28
     59e:	05 5a       	subi	r16, 0xA5	; 165
     5a0:	1f 4f       	sbci	r17, 0xFF	; 255
     5a2:	fe 01       	movw	r30, r28
     5a4:	e1 5a       	subi	r30, 0xA1	; 161
     5a6:	ff 4f       	sbci	r31, 0xFF	; 255
     5a8:	60 81       	ld	r22, Z
     5aa:	71 81       	ldd	r23, Z+1	; 0x01
     5ac:	82 81       	ldd	r24, Z+2	; 0x02
     5ae:	93 81       	ldd	r25, Z+3	; 0x03
     5b0:	26 e6       	ldi	r18, 0x66	; 102
     5b2:	36 e6       	ldi	r19, 0x66	; 102
     5b4:	46 e6       	ldi	r20, 0x66	; 102
     5b6:	55 e4       	ldi	r21, 0x45	; 69
     5b8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     5bc:	dc 01       	movw	r26, r24
     5be:	cb 01       	movw	r24, r22
     5c0:	f8 01       	movw	r30, r16
     5c2:	80 83       	st	Z, r24
     5c4:	91 83       	std	Z+1, r25	; 0x01
     5c6:	a2 83       	std	Z+2, r26	; 0x02
     5c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5ca:	fe 01       	movw	r30, r28
     5cc:	e5 5a       	subi	r30, 0xA5	; 165
     5ce:	ff 4f       	sbci	r31, 0xFF	; 255
     5d0:	60 81       	ld	r22, Z
     5d2:	71 81       	ldd	r23, Z+1	; 0x01
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	93 81       	ldd	r25, Z+3	; 0x03
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e8       	ldi	r20, 0x80	; 128
     5de:	5f e3       	ldi	r21, 0x3F	; 63
     5e0:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
     5e4:	88 23       	and	r24, r24
     5e6:	44 f4       	brge	.+16     	; 0x5f8 <lcd_set_4bit+0x224>
		__ticks = 1;
     5e8:	fe 01       	movw	r30, r28
     5ea:	e7 5a       	subi	r30, 0xA7	; 167
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	91 83       	std	Z+1, r25	; 0x01
     5f4:	80 83       	st	Z, r24
     5f6:	64 c0       	rjmp	.+200    	; 0x6c0 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     5f8:	fe 01       	movw	r30, r28
     5fa:	e5 5a       	subi	r30, 0xA5	; 165
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	60 81       	ld	r22, Z
     600:	71 81       	ldd	r23, Z+1	; 0x01
     602:	82 81       	ldd	r24, Z+2	; 0x02
     604:	93 81       	ldd	r25, Z+3	; 0x03
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	3f ef       	ldi	r19, 0xFF	; 255
     60a:	4f e7       	ldi	r20, 0x7F	; 127
     60c:	57 e4       	ldi	r21, 0x47	; 71
     60e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
     612:	18 16       	cp	r1, r24
     614:	0c f0       	brlt	.+2      	; 0x618 <lcd_set_4bit+0x244>
     616:	43 c0       	rjmp	.+134    	; 0x69e <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     618:	fe 01       	movw	r30, r28
     61a:	e1 5a       	subi	r30, 0xA1	; 161
     61c:	ff 4f       	sbci	r31, 0xFF	; 255
     61e:	60 81       	ld	r22, Z
     620:	71 81       	ldd	r23, Z+1	; 0x01
     622:	82 81       	ldd	r24, Z+2	; 0x02
     624:	93 81       	ldd	r25, Z+3	; 0x03
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	40 e2       	ldi	r20, 0x20	; 32
     62c:	51 e4       	ldi	r21, 0x41	; 65
     62e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	8e 01       	movw	r16, r28
     638:	07 5a       	subi	r16, 0xA7	; 167
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	bc 01       	movw	r22, r24
     63e:	cd 01       	movw	r24, r26
     640:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	f8 01       	movw	r30, r16
     64a:	91 83       	std	Z+1, r25	; 0x01
     64c:	80 83       	st	Z, r24
     64e:	1f c0       	rjmp	.+62     	; 0x68e <lcd_set_4bit+0x2ba>
     650:	fe 01       	movw	r30, r28
     652:	e9 5a       	subi	r30, 0xA9	; 169
     654:	ff 4f       	sbci	r31, 0xFF	; 255
     656:	80 e7       	ldi	r24, 0x70	; 112
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	91 83       	std	Z+1, r25	; 0x01
     65c:	80 83       	st	Z, r24
     65e:	fe 01       	movw	r30, r28
     660:	e9 5a       	subi	r30, 0xA9	; 169
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <lcd_set_4bit+0x294>
     66c:	fe 01       	movw	r30, r28
     66e:	e9 5a       	subi	r30, 0xA9	; 169
     670:	ff 4f       	sbci	r31, 0xFF	; 255
     672:	91 83       	std	Z+1, r25	; 0x01
     674:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     676:	de 01       	movw	r26, r28
     678:	a7 5a       	subi	r26, 0xA7	; 167
     67a:	bf 4f       	sbci	r27, 0xFF	; 255
     67c:	fe 01       	movw	r30, r28
     67e:	e7 5a       	subi	r30, 0xA7	; 167
     680:	ff 4f       	sbci	r31, 0xFF	; 255
     682:	80 81       	ld	r24, Z
     684:	91 81       	ldd	r25, Z+1	; 0x01
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	11 96       	adiw	r26, 0x01	; 1
     68a:	9c 93       	st	X, r25
     68c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     68e:	fe 01       	movw	r30, r28
     690:	e7 5a       	subi	r30, 0xA7	; 167
     692:	ff 4f       	sbci	r31, 0xFF	; 255
     694:	80 81       	ld	r24, Z
     696:	91 81       	ldd	r25, Z+1	; 0x01
     698:	00 97       	sbiw	r24, 0x00	; 0
     69a:	d1 f6       	brne	.-76     	; 0x650 <lcd_set_4bit+0x27c>
     69c:	27 c0       	rjmp	.+78     	; 0x6ec <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     69e:	8e 01       	movw	r16, r28
     6a0:	07 5a       	subi	r16, 0xA7	; 167
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	fe 01       	movw	r30, r28
     6a6:	e5 5a       	subi	r30, 0xA5	; 165
     6a8:	ff 4f       	sbci	r31, 0xFF	; 255
     6aa:	60 81       	ld	r22, Z
     6ac:	71 81       	ldd	r23, Z+1	; 0x01
     6ae:	82 81       	ldd	r24, Z+2	; 0x02
     6b0:	93 81       	ldd	r25, Z+3	; 0x03
     6b2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	f8 01       	movw	r30, r16
     6bc:	91 83       	std	Z+1, r25	; 0x01
     6be:	80 83       	st	Z, r24
     6c0:	de 01       	movw	r26, r28
     6c2:	ab 5a       	subi	r26, 0xAB	; 171
     6c4:	bf 4f       	sbci	r27, 0xFF	; 255
     6c6:	fe 01       	movw	r30, r28
     6c8:	e7 5a       	subi	r30, 0xA7	; 167
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
     6d0:	8d 93       	st	X+, r24
     6d2:	9c 93       	st	X, r25
     6d4:	fe 01       	movw	r30, r28
     6d6:	eb 5a       	subi	r30, 0xAB	; 171
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	80 81       	ld	r24, Z
     6dc:	91 81       	ldd	r25, Z+1	; 0x01
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <lcd_set_4bit+0x30a>
     6e2:	fe 01       	movw	r30, r28
     6e4:	eb 5a       	subi	r30, 0xAB	; 171
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	91 83       	std	Z+1, r25	; 0x01
     6ea:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6ec:	a8 e2       	ldi	r26, 0x28	; 40
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	e8 e2       	ldi	r30, 0x28	; 40
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	80 81       	ld	r24, Z
     6f6:	8b 7f       	andi	r24, 0xFB	; 251
     6f8:	8c 93       	st	X, r24
     6fa:	fe 01       	movw	r30, r28
     6fc:	ef 5a       	subi	r30, 0xAF	; 175
     6fe:	ff 4f       	sbci	r31, 0xFF	; 255
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	80 83       	st	Z, r24
     70a:	91 83       	std	Z+1, r25	; 0x01
     70c:	a2 83       	std	Z+2, r26	; 0x02
     70e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	8e 01       	movw	r16, r28
     712:	03 5b       	subi	r16, 0xB3	; 179
     714:	1f 4f       	sbci	r17, 0xFF	; 255
     716:	fe 01       	movw	r30, r28
     718:	ef 5a       	subi	r30, 0xAF	; 175
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	60 81       	ld	r22, Z
     71e:	71 81       	ldd	r23, Z+1	; 0x01
     720:	82 81       	ldd	r24, Z+2	; 0x02
     722:	93 81       	ldd	r25, Z+3	; 0x03
     724:	26 e6       	ldi	r18, 0x66	; 102
     726:	36 e6       	ldi	r19, 0x66	; 102
     728:	46 e6       	ldi	r20, 0x66	; 102
     72a:	55 e4       	ldi	r21, 0x45	; 69
     72c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	f8 01       	movw	r30, r16
     736:	80 83       	st	Z, r24
     738:	91 83       	std	Z+1, r25	; 0x01
     73a:	a2 83       	std	Z+2, r26	; 0x02
     73c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     73e:	fe 01       	movw	r30, r28
     740:	e3 5b       	subi	r30, 0xB3	; 179
     742:	ff 4f       	sbci	r31, 0xFF	; 255
     744:	60 81       	ld	r22, Z
     746:	71 81       	ldd	r23, Z+1	; 0x01
     748:	82 81       	ldd	r24, Z+2	; 0x02
     74a:	93 81       	ldd	r25, Z+3	; 0x03
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e8       	ldi	r20, 0x80	; 128
     752:	5f e3       	ldi	r21, 0x3F	; 63
     754:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
     758:	88 23       	and	r24, r24
     75a:	44 f4       	brge	.+16     	; 0x76c <lcd_set_4bit+0x398>
		__ticks = 1;
     75c:	fe 01       	movw	r30, r28
     75e:	e5 5b       	subi	r30, 0xB5	; 181
     760:	ff 4f       	sbci	r31, 0xFF	; 255
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	91 83       	std	Z+1, r25	; 0x01
     768:	80 83       	st	Z, r24
     76a:	64 c0       	rjmp	.+200    	; 0x834 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     76c:	fe 01       	movw	r30, r28
     76e:	e3 5b       	subi	r30, 0xB3	; 179
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	60 81       	ld	r22, Z
     774:	71 81       	ldd	r23, Z+1	; 0x01
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	93 81       	ldd	r25, Z+3	; 0x03
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	3f ef       	ldi	r19, 0xFF	; 255
     77e:	4f e7       	ldi	r20, 0x7F	; 127
     780:	57 e4       	ldi	r21, 0x47	; 71
     782:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
     786:	18 16       	cp	r1, r24
     788:	0c f0       	brlt	.+2      	; 0x78c <lcd_set_4bit+0x3b8>
     78a:	43 c0       	rjmp	.+134    	; 0x812 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     78c:	fe 01       	movw	r30, r28
     78e:	ef 5a       	subi	r30, 0xAF	; 175
     790:	ff 4f       	sbci	r31, 0xFF	; 255
     792:	60 81       	ld	r22, Z
     794:	71 81       	ldd	r23, Z+1	; 0x01
     796:	82 81       	ldd	r24, Z+2	; 0x02
     798:	93 81       	ldd	r25, Z+3	; 0x03
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e2       	ldi	r20, 0x20	; 32
     7a0:	51 e4       	ldi	r21, 0x41	; 65
     7a2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	8e 01       	movw	r16, r28
     7ac:	05 5b       	subi	r16, 0xB5	; 181
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	bc 01       	movw	r22, r24
     7b2:	cd 01       	movw	r24, r26
     7b4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     7b8:	dc 01       	movw	r26, r24
     7ba:	cb 01       	movw	r24, r22
     7bc:	f8 01       	movw	r30, r16
     7be:	91 83       	std	Z+1, r25	; 0x01
     7c0:	80 83       	st	Z, r24
     7c2:	1f c0       	rjmp	.+62     	; 0x802 <lcd_set_4bit+0x42e>
     7c4:	fe 01       	movw	r30, r28
     7c6:	e7 5b       	subi	r30, 0xB7	; 183
     7c8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ca:	80 e7       	ldi	r24, 0x70	; 112
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	91 83       	std	Z+1, r25	; 0x01
     7d0:	80 83       	st	Z, r24
     7d2:	fe 01       	movw	r30, r28
     7d4:	e7 5b       	subi	r30, 0xB7	; 183
     7d6:	ff 4f       	sbci	r31, 0xFF	; 255
     7d8:	80 81       	ld	r24, Z
     7da:	91 81       	ldd	r25, Z+1	; 0x01
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x408>
     7e0:	fe 01       	movw	r30, r28
     7e2:	e7 5b       	subi	r30, 0xB7	; 183
     7e4:	ff 4f       	sbci	r31, 0xFF	; 255
     7e6:	91 83       	std	Z+1, r25	; 0x01
     7e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ea:	de 01       	movw	r26, r28
     7ec:	a5 5b       	subi	r26, 0xB5	; 181
     7ee:	bf 4f       	sbci	r27, 0xFF	; 255
     7f0:	fe 01       	movw	r30, r28
     7f2:	e5 5b       	subi	r30, 0xB5	; 181
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	11 96       	adiw	r26, 0x01	; 1
     7fe:	9c 93       	st	X, r25
     800:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     802:	fe 01       	movw	r30, r28
     804:	e5 5b       	subi	r30, 0xB5	; 181
     806:	ff 4f       	sbci	r31, 0xFF	; 255
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
     80c:	00 97       	sbiw	r24, 0x00	; 0
     80e:	d1 f6       	brne	.-76     	; 0x7c4 <lcd_set_4bit+0x3f0>
     810:	27 c0       	rjmp	.+78     	; 0x860 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     812:	8e 01       	movw	r16, r28
     814:	05 5b       	subi	r16, 0xB5	; 181
     816:	1f 4f       	sbci	r17, 0xFF	; 255
     818:	fe 01       	movw	r30, r28
     81a:	e3 5b       	subi	r30, 0xB3	; 179
     81c:	ff 4f       	sbci	r31, 0xFF	; 255
     81e:	60 81       	ld	r22, Z
     820:	71 81       	ldd	r23, Z+1	; 0x01
     822:	82 81       	ldd	r24, Z+2	; 0x02
     824:	93 81       	ldd	r25, Z+3	; 0x03
     826:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	f8 01       	movw	r30, r16
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
     834:	de 01       	movw	r26, r28
     836:	a9 5b       	subi	r26, 0xB9	; 185
     838:	bf 4f       	sbci	r27, 0xFF	; 255
     83a:	fe 01       	movw	r30, r28
     83c:	e5 5b       	subi	r30, 0xB5	; 181
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	80 81       	ld	r24, Z
     842:	91 81       	ldd	r25, Z+1	; 0x01
     844:	8d 93       	st	X+, r24
     846:	9c 93       	st	X, r25
     848:	fe 01       	movw	r30, r28
     84a:	e9 5b       	subi	r30, 0xB9	; 185
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <lcd_set_4bit+0x47e>
     856:	fe 01       	movw	r30, r28
     858:	e9 5b       	subi	r30, 0xB9	; 185
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	91 83       	std	Z+1, r25	; 0x01
     85e:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     860:	a8 e2       	ldi	r26, 0x28	; 40
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	e8 e2       	ldi	r30, 0x28	; 40
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	8e 7f       	andi	r24, 0xFE	; 254
     86c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     86e:	a8 e2       	ldi	r26, 0x28	; 40
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	e8 e2       	ldi	r30, 0x28	; 40
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	8d 7f       	andi	r24, 0xFD	; 253
     87a:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     87c:	e8 e2       	ldi	r30, 0x28	; 40
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 e3       	ldi	r24, 0x30	; 48
     882:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     884:	a8 e2       	ldi	r26, 0x28	; 40
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e2       	ldi	r30, 0x28	; 40
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	84 60       	ori	r24, 0x04	; 4
     890:	8c 93       	st	X, r24
     892:	fe 01       	movw	r30, r28
     894:	ed 5b       	subi	r30, 0xBD	; 189
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 ea       	ldi	r26, 0xA0	; 160
     89e:	b0 e4       	ldi	r27, 0x40	; 64
     8a0:	80 83       	st	Z, r24
     8a2:	91 83       	std	Z+1, r25	; 0x01
     8a4:	a2 83       	std	Z+2, r26	; 0x02
     8a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8a8:	8e 01       	movw	r16, r28
     8aa:	01 5c       	subi	r16, 0xC1	; 193
     8ac:	1f 4f       	sbci	r17, 0xFF	; 255
     8ae:	fe 01       	movw	r30, r28
     8b0:	ed 5b       	subi	r30, 0xBD	; 189
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	60 81       	ld	r22, Z
     8b6:	71 81       	ldd	r23, Z+1	; 0x01
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	93 81       	ldd	r25, Z+3	; 0x03
     8bc:	26 e6       	ldi	r18, 0x66	; 102
     8be:	36 e6       	ldi	r19, 0x66	; 102
     8c0:	46 e6       	ldi	r20, 0x66	; 102
     8c2:	55 e4       	ldi	r21, 0x45	; 69
     8c4:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	f8 01       	movw	r30, r16
     8ce:	80 83       	st	Z, r24
     8d0:	91 83       	std	Z+1, r25	; 0x01
     8d2:	a2 83       	std	Z+2, r26	; 0x02
     8d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8d6:	fe 01       	movw	r30, r28
     8d8:	ff 96       	adiw	r30, 0x3f	; 63
     8da:	60 81       	ld	r22, Z
     8dc:	71 81       	ldd	r23, Z+1	; 0x01
     8de:	82 81       	ldd	r24, Z+2	; 0x02
     8e0:	93 81       	ldd	r25, Z+3	; 0x03
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 e8       	ldi	r20, 0x80	; 128
     8e8:	5f e3       	ldi	r21, 0x3F	; 63
     8ea:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
     8ee:	88 23       	and	r24, r24
     8f0:	2c f4       	brge	.+10     	; 0x8fc <lcd_set_4bit+0x528>
		__ticks = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	9e af       	std	Y+62, r25	; 0x3e
     8f8:	8d af       	std	Y+61, r24	; 0x3d
     8fa:	46 c0       	rjmp	.+140    	; 0x988 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     8fc:	fe 01       	movw	r30, r28
     8fe:	ff 96       	adiw	r30, 0x3f	; 63
     900:	60 81       	ld	r22, Z
     902:	71 81       	ldd	r23, Z+1	; 0x01
     904:	82 81       	ldd	r24, Z+2	; 0x02
     906:	93 81       	ldd	r25, Z+3	; 0x03
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	3f ef       	ldi	r19, 0xFF	; 255
     90c:	4f e7       	ldi	r20, 0x7F	; 127
     90e:	57 e4       	ldi	r21, 0x47	; 71
     910:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
     914:	18 16       	cp	r1, r24
     916:	64 f5       	brge	.+88     	; 0x970 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     918:	fe 01       	movw	r30, r28
     91a:	ed 5b       	subi	r30, 0xBD	; 189
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	60 81       	ld	r22, Z
     920:	71 81       	ldd	r23, Z+1	; 0x01
     922:	82 81       	ldd	r24, Z+2	; 0x02
     924:	93 81       	ldd	r25, Z+3	; 0x03
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e2       	ldi	r20, 0x20	; 32
     92c:	51 e4       	ldi	r21, 0x41	; 65
     92e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	bc 01       	movw	r22, r24
     938:	cd 01       	movw	r24, r26
     93a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     93e:	dc 01       	movw	r26, r24
     940:	cb 01       	movw	r24, r22
     942:	9e af       	std	Y+62, r25	; 0x3e
     944:	8d af       	std	Y+61, r24	; 0x3d
     946:	0f c0       	rjmp	.+30     	; 0x966 <lcd_set_4bit+0x592>
     948:	80 e7       	ldi	r24, 0x70	; 112
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	9c af       	std	Y+60, r25	; 0x3c
     94e:	8b af       	std	Y+59, r24	; 0x3b
     950:	8b ad       	ldd	r24, Y+59	; 0x3b
     952:	9c ad       	ldd	r25, Y+60	; 0x3c
     954:	01 97       	sbiw	r24, 0x01	; 1
     956:	f1 f7       	brne	.-4      	; 0x954 <lcd_set_4bit+0x580>
     958:	9c af       	std	Y+60, r25	; 0x3c
     95a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95c:	8d ad       	ldd	r24, Y+61	; 0x3d
     95e:	9e ad       	ldd	r25, Y+62	; 0x3e
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	9e af       	std	Y+62, r25	; 0x3e
     964:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     966:	8d ad       	ldd	r24, Y+61	; 0x3d
     968:	9e ad       	ldd	r25, Y+62	; 0x3e
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	69 f7       	brne	.-38     	; 0x948 <lcd_set_4bit+0x574>
     96e:	16 c0       	rjmp	.+44     	; 0x99c <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     970:	fe 01       	movw	r30, r28
     972:	ff 96       	adiw	r30, 0x3f	; 63
     974:	60 81       	ld	r22, Z
     976:	71 81       	ldd	r23, Z+1	; 0x01
     978:	82 81       	ldd	r24, Z+2	; 0x02
     97a:	93 81       	ldd	r25, Z+3	; 0x03
     97c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	9e af       	std	Y+62, r25	; 0x3e
     986:	8d af       	std	Y+61, r24	; 0x3d
     988:	8d ad       	ldd	r24, Y+61	; 0x3d
     98a:	9e ad       	ldd	r25, Y+62	; 0x3e
     98c:	9a af       	std	Y+58, r25	; 0x3a
     98e:	89 af       	std	Y+57, r24	; 0x39
     990:	89 ad       	ldd	r24, Y+57	; 0x39
     992:	9a ad       	ldd	r25, Y+58	; 0x3a
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <lcd_set_4bit+0x5c0>
     998:	9a af       	std	Y+58, r25	; 0x3a
     99a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     99c:	a8 e2       	ldi	r26, 0x28	; 40
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	e8 e2       	ldi	r30, 0x28	; 40
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	8b 7f       	andi	r24, 0xFB	; 251
     9a8:	8c 93       	st	X, r24
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e8       	ldi	r26, 0x80	; 128
     9b0:	bf e3       	ldi	r27, 0x3F	; 63
     9b2:	8d ab       	std	Y+53, r24	; 0x35
     9b4:	9e ab       	std	Y+54, r25	; 0x36
     9b6:	af ab       	std	Y+55, r26	; 0x37
     9b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9ba:	6d a9       	ldd	r22, Y+53	; 0x35
     9bc:	7e a9       	ldd	r23, Y+54	; 0x36
     9be:	8f a9       	ldd	r24, Y+55	; 0x37
     9c0:	98 ad       	ldd	r25, Y+56	; 0x38
     9c2:	26 e6       	ldi	r18, 0x66	; 102
     9c4:	36 e6       	ldi	r19, 0x66	; 102
     9c6:	46 e6       	ldi	r20, 0x66	; 102
     9c8:	55 e4       	ldi	r21, 0x45	; 69
     9ca:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	89 ab       	std	Y+49, r24	; 0x31
     9d4:	9a ab       	std	Y+50, r25	; 0x32
     9d6:	ab ab       	std	Y+51, r26	; 0x33
     9d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     9da:	69 a9       	ldd	r22, Y+49	; 0x31
     9dc:	7a a9       	ldd	r23, Y+50	; 0x32
     9de:	8b a9       	ldd	r24, Y+51	; 0x33
     9e0:	9c a9       	ldd	r25, Y+52	; 0x34
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	40 e8       	ldi	r20, 0x80	; 128
     9e8:	5f e3       	ldi	r21, 0x3F	; 63
     9ea:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
     9ee:	88 23       	and	r24, r24
     9f0:	2c f4       	brge	.+10     	; 0x9fc <lcd_set_4bit+0x628>
		__ticks = 1;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	98 ab       	std	Y+48, r25	; 0x30
     9f8:	8f a7       	std	Y+47, r24	; 0x2f
     9fa:	3f c0       	rjmp	.+126    	; 0xa7a <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     9fc:	69 a9       	ldd	r22, Y+49	; 0x31
     9fe:	7a a9       	ldd	r23, Y+50	; 0x32
     a00:	8b a9       	ldd	r24, Y+51	; 0x33
     a02:	9c a9       	ldd	r25, Y+52	; 0x34
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	3f ef       	ldi	r19, 0xFF	; 255
     a08:	4f e7       	ldi	r20, 0x7F	; 127
     a0a:	57 e4       	ldi	r21, 0x47	; 71
     a0c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
     a10:	18 16       	cp	r1, r24
     a12:	4c f5       	brge	.+82     	; 0xa66 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a14:	6d a9       	ldd	r22, Y+53	; 0x35
     a16:	7e a9       	ldd	r23, Y+54	; 0x36
     a18:	8f a9       	ldd	r24, Y+55	; 0x37
     a1a:	98 ad       	ldd	r25, Y+56	; 0x38
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e2       	ldi	r20, 0x20	; 32
     a22:	51 e4       	ldi	r21, 0x41	; 65
     a24:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     a28:	dc 01       	movw	r26, r24
     a2a:	cb 01       	movw	r24, r22
     a2c:	bc 01       	movw	r22, r24
     a2e:	cd 01       	movw	r24, r26
     a30:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	98 ab       	std	Y+48, r25	; 0x30
     a3a:	8f a7       	std	Y+47, r24	; 0x2f
     a3c:	0f c0       	rjmp	.+30     	; 0xa5c <lcd_set_4bit+0x688>
     a3e:	80 e7       	ldi	r24, 0x70	; 112
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	9e a7       	std	Y+46, r25	; 0x2e
     a44:	8d a7       	std	Y+45, r24	; 0x2d
     a46:	8d a5       	ldd	r24, Y+45	; 0x2d
     a48:	9e a5       	ldd	r25, Y+46	; 0x2e
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <lcd_set_4bit+0x676>
     a4e:	9e a7       	std	Y+46, r25	; 0x2e
     a50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a52:	8f a5       	ldd	r24, Y+47	; 0x2f
     a54:	98 a9       	ldd	r25, Y+48	; 0x30
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	98 ab       	std	Y+48, r25	; 0x30
     a5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     a5e:	98 a9       	ldd	r25, Y+48	; 0x30
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	69 f7       	brne	.-38     	; 0xa3e <lcd_set_4bit+0x66a>
     a64:	14 c0       	rjmp	.+40     	; 0xa8e <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a66:	69 a9       	ldd	r22, Y+49	; 0x31
     a68:	7a a9       	ldd	r23, Y+50	; 0x32
     a6a:	8b a9       	ldd	r24, Y+51	; 0x33
     a6c:	9c a9       	ldd	r25, Y+52	; 0x34
     a6e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	98 ab       	std	Y+48, r25	; 0x30
     a78:	8f a7       	std	Y+47, r24	; 0x2f
     a7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     a7c:	98 a9       	ldd	r25, Y+48	; 0x30
     a7e:	9c a7       	std	Y+44, r25	; 0x2c
     a80:	8b a7       	std	Y+43, r24	; 0x2b
     a82:	8b a5       	ldd	r24, Y+43	; 0x2b
     a84:	9c a5       	ldd	r25, Y+44	; 0x2c
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	f1 f7       	brne	.-4      	; 0xa86 <lcd_set_4bit+0x6b2>
     a8a:	9c a7       	std	Y+44, r25	; 0x2c
     a8c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a8e:	a8 e2       	ldi	r26, 0x28	; 40
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	e8 e2       	ldi	r30, 0x28	; 40
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	80 81       	ld	r24, Z
     a98:	8e 7f       	andi	r24, 0xFE	; 254
     a9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a9c:	a8 e2       	ldi	r26, 0x28	; 40
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 e2       	ldi	r30, 0x28	; 40
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	8d 7f       	andi	r24, 0xFD	; 253
     aa8:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     aaa:	e8 e2       	ldi	r30, 0x28	; 40
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 e3       	ldi	r24, 0x30	; 48
     ab0:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     ab2:	a8 e2       	ldi	r26, 0x28	; 40
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	e8 e2       	ldi	r30, 0x28	; 40
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	84 60       	ori	r24, 0x04	; 4
     abe:	8c 93       	st	X, r24
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 ea       	ldi	r26, 0xA0	; 160
     ac6:	b0 e4       	ldi	r27, 0x40	; 64
     ac8:	8f a3       	std	Y+39, r24	; 0x27
     aca:	98 a7       	std	Y+40, r25	; 0x28
     acc:	a9 a7       	std	Y+41, r26	; 0x29
     ace:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ad0:	6f a1       	ldd	r22, Y+39	; 0x27
     ad2:	78 a5       	ldd	r23, Y+40	; 0x28
     ad4:	89 a5       	ldd	r24, Y+41	; 0x29
     ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ad8:	26 e6       	ldi	r18, 0x66	; 102
     ada:	36 e6       	ldi	r19, 0x66	; 102
     adc:	46 e6       	ldi	r20, 0x66	; 102
     ade:	55 e4       	ldi	r21, 0x45	; 69
     ae0:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     ae4:	dc 01       	movw	r26, r24
     ae6:	cb 01       	movw	r24, r22
     ae8:	8b a3       	std	Y+35, r24	; 0x23
     aea:	9c a3       	std	Y+36, r25	; 0x24
     aec:	ad a3       	std	Y+37, r26	; 0x25
     aee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     af0:	6b a1       	ldd	r22, Y+35	; 0x23
     af2:	7c a1       	ldd	r23, Y+36	; 0x24
     af4:	8d a1       	ldd	r24, Y+37	; 0x25
     af6:	9e a1       	ldd	r25, Y+38	; 0x26
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e8       	ldi	r20, 0x80	; 128
     afe:	5f e3       	ldi	r21, 0x3F	; 63
     b00:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
     b04:	88 23       	and	r24, r24
     b06:	2c f4       	brge	.+10     	; 0xb12 <lcd_set_4bit+0x73e>
		__ticks = 1;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	9a a3       	std	Y+34, r25	; 0x22
     b0e:	89 a3       	std	Y+33, r24	; 0x21
     b10:	3f c0       	rjmp	.+126    	; 0xb90 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     b12:	6b a1       	ldd	r22, Y+35	; 0x23
     b14:	7c a1       	ldd	r23, Y+36	; 0x24
     b16:	8d a1       	ldd	r24, Y+37	; 0x25
     b18:	9e a1       	ldd	r25, Y+38	; 0x26
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	3f ef       	ldi	r19, 0xFF	; 255
     b1e:	4f e7       	ldi	r20, 0x7F	; 127
     b20:	57 e4       	ldi	r21, 0x47	; 71
     b22:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
     b26:	18 16       	cp	r1, r24
     b28:	4c f5       	brge	.+82     	; 0xb7c <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b2a:	6f a1       	ldd	r22, Y+39	; 0x27
     b2c:	78 a5       	ldd	r23, Y+40	; 0x28
     b2e:	89 a5       	ldd	r24, Y+41	; 0x29
     b30:	9a a5       	ldd	r25, Y+42	; 0x2a
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e2       	ldi	r20, 0x20	; 32
     b38:	51 e4       	ldi	r21, 0x41	; 65
     b3a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
     b42:	bc 01       	movw	r22, r24
     b44:	cd 01       	movw	r24, r26
     b46:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	9a a3       	std	Y+34, r25	; 0x22
     b50:	89 a3       	std	Y+33, r24	; 0x21
     b52:	0f c0       	rjmp	.+30     	; 0xb72 <lcd_set_4bit+0x79e>
     b54:	80 e7       	ldi	r24, 0x70	; 112
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	98 a3       	std	Y+32, r25	; 0x20
     b5a:	8f 8f       	std	Y+31, r24	; 0x1f
     b5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b5e:	98 a1       	ldd	r25, Y+32	; 0x20
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	f1 f7       	brne	.-4      	; 0xb60 <lcd_set_4bit+0x78c>
     b64:	98 a3       	std	Y+32, r25	; 0x20
     b66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b68:	89 a1       	ldd	r24, Y+33	; 0x21
     b6a:	9a a1       	ldd	r25, Y+34	; 0x22
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	9a a3       	std	Y+34, r25	; 0x22
     b70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b72:	89 a1       	ldd	r24, Y+33	; 0x21
     b74:	9a a1       	ldd	r25, Y+34	; 0x22
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	69 f7       	brne	.-38     	; 0xb54 <lcd_set_4bit+0x780>
     b7a:	14 c0       	rjmp	.+40     	; 0xba4 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7c:	6b a1       	ldd	r22, Y+35	; 0x23
     b7e:	7c a1       	ldd	r23, Y+36	; 0x24
     b80:	8d a1       	ldd	r24, Y+37	; 0x25
     b82:	9e a1       	ldd	r25, Y+38	; 0x26
     b84:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	9a a3       	std	Y+34, r25	; 0x22
     b8e:	89 a3       	std	Y+33, r24	; 0x21
     b90:	89 a1       	ldd	r24, Y+33	; 0x21
     b92:	9a a1       	ldd	r25, Y+34	; 0x22
     b94:	9e 8f       	std	Y+30, r25	; 0x1e
     b96:	8d 8f       	std	Y+29, r24	; 0x1d
     b98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <lcd_set_4bit+0x7c8>
     ba0:	9e 8f       	std	Y+30, r25	; 0x1e
     ba2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     ba4:	a8 e2       	ldi	r26, 0x28	; 40
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e8 e2       	ldi	r30, 0x28	; 40
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	8b 7f       	andi	r24, 0xFB	; 251
     bb0:	8c 93       	st	X, r24
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e8       	ldi	r26, 0x80	; 128
     bb8:	bf e3       	ldi	r27, 0x3F	; 63
     bba:	89 8f       	std	Y+25, r24	; 0x19
     bbc:	9a 8f       	std	Y+26, r25	; 0x1a
     bbe:	ab 8f       	std	Y+27, r26	; 0x1b
     bc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc2:	69 8d       	ldd	r22, Y+25	; 0x19
     bc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bca:	26 e6       	ldi	r18, 0x66	; 102
     bcc:	36 e6       	ldi	r19, 0x66	; 102
     bce:	46 e6       	ldi	r20, 0x66	; 102
     bd0:	55 e4       	ldi	r21, 0x45	; 69
     bd2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     bd6:	dc 01       	movw	r26, r24
     bd8:	cb 01       	movw	r24, r22
     bda:	8d 8b       	std	Y+21, r24	; 0x15
     bdc:	9e 8b       	std	Y+22, r25	; 0x16
     bde:	af 8b       	std	Y+23, r26	; 0x17
     be0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     be2:	6d 89       	ldd	r22, Y+21	; 0x15
     be4:	7e 89       	ldd	r23, Y+22	; 0x16
     be6:	8f 89       	ldd	r24, Y+23	; 0x17
     be8:	98 8d       	ldd	r25, Y+24	; 0x18
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e8       	ldi	r20, 0x80	; 128
     bf0:	5f e3       	ldi	r21, 0x3F	; 63
     bf2:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
     bf6:	88 23       	and	r24, r24
     bf8:	2c f4       	brge	.+10     	; 0xc04 <lcd_set_4bit+0x830>
		__ticks = 1;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9c 8b       	std	Y+20, r25	; 0x14
     c00:	8b 8b       	std	Y+19, r24	; 0x13
     c02:	3f c0       	rjmp	.+126    	; 0xc82 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     c04:	6d 89       	ldd	r22, Y+21	; 0x15
     c06:	7e 89       	ldd	r23, Y+22	; 0x16
     c08:	8f 89       	ldd	r24, Y+23	; 0x17
     c0a:	98 8d       	ldd	r25, Y+24	; 0x18
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	3f ef       	ldi	r19, 0xFF	; 255
     c10:	4f e7       	ldi	r20, 0x7F	; 127
     c12:	57 e4       	ldi	r21, 0x47	; 71
     c14:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
     c18:	18 16       	cp	r1, r24
     c1a:	4c f5       	brge	.+82     	; 0xc6e <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1c:	69 8d       	ldd	r22, Y+25	; 0x19
     c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e2       	ldi	r20, 0x20	; 32
     c2a:	51 e4       	ldi	r21, 0x41	; 65
     c2c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	bc 01       	movw	r22, r24
     c36:	cd 01       	movw	r24, r26
     c38:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	9c 8b       	std	Y+20, r25	; 0x14
     c42:	8b 8b       	std	Y+19, r24	; 0x13
     c44:	0f c0       	rjmp	.+30     	; 0xc64 <lcd_set_4bit+0x890>
     c46:	80 e7       	ldi	r24, 0x70	; 112
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	9a 8b       	std	Y+18, r25	; 0x12
     c4c:	89 8b       	std	Y+17, r24	; 0x11
     c4e:	89 89       	ldd	r24, Y+17	; 0x11
     c50:	9a 89       	ldd	r25, Y+18	; 0x12
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <lcd_set_4bit+0x87e>
     c56:	9a 8b       	std	Y+18, r25	; 0x12
     c58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5a:	8b 89       	ldd	r24, Y+19	; 0x13
     c5c:	9c 89       	ldd	r25, Y+20	; 0x14
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	9c 8b       	std	Y+20, r25	; 0x14
     c62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c64:	8b 89       	ldd	r24, Y+19	; 0x13
     c66:	9c 89       	ldd	r25, Y+20	; 0x14
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	69 f7       	brne	.-38     	; 0xc46 <lcd_set_4bit+0x872>
     c6c:	14 c0       	rjmp	.+40     	; 0xc96 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c6e:	6d 89       	ldd	r22, Y+21	; 0x15
     c70:	7e 89       	ldd	r23, Y+22	; 0x16
     c72:	8f 89       	ldd	r24, Y+23	; 0x17
     c74:	98 8d       	ldd	r25, Y+24	; 0x18
     c76:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	9c 8b       	std	Y+20, r25	; 0x14
     c80:	8b 8b       	std	Y+19, r24	; 0x13
     c82:	8b 89       	ldd	r24, Y+19	; 0x13
     c84:	9c 89       	ldd	r25, Y+20	; 0x14
     c86:	98 8b       	std	Y+16, r25	; 0x10
     c88:	8f 87       	std	Y+15, r24	; 0x0f
     c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8c:	98 89       	ldd	r25, Y+16	; 0x10
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <lcd_set_4bit+0x8ba>
     c92:	98 8b       	std	Y+16, r25	; 0x10
     c94:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     c96:	a8 e2       	ldi	r26, 0x28	; 40
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e8 e2       	ldi	r30, 0x28	; 40
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	8e 7f       	andi	r24, 0xFE	; 254
     ca2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     ca4:	a8 e2       	ldi	r26, 0x28	; 40
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e8 e2       	ldi	r30, 0x28	; 40
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8d 7f       	andi	r24, 0xFD	; 253
     cb0:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     cb2:	e8 e2       	ldi	r30, 0x28	; 40
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 e2       	ldi	r24, 0x20	; 32
     cb8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     cba:	a8 e2       	ldi	r26, 0x28	; 40
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e8 e2       	ldi	r30, 0x28	; 40
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	84 60       	ori	r24, 0x04	; 4
     cc6:	8c 93       	st	X, r24
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 ea       	ldi	r26, 0xA0	; 160
     cce:	b0 e4       	ldi	r27, 0x40	; 64
     cd0:	8b 87       	std	Y+11, r24	; 0x0b
     cd2:	9c 87       	std	Y+12, r25	; 0x0c
     cd4:	ad 87       	std	Y+13, r26	; 0x0d
     cd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cda:	7c 85       	ldd	r23, Y+12	; 0x0c
     cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cde:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce0:	26 e6       	ldi	r18, 0x66	; 102
     ce2:	36 e6       	ldi	r19, 0x66	; 102
     ce4:	46 e6       	ldi	r20, 0x66	; 102
     ce6:	55 e4       	ldi	r21, 0x45	; 69
     ce8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	8f 83       	std	Y+7, r24	; 0x07
     cf2:	98 87       	std	Y+8, r25	; 0x08
     cf4:	a9 87       	std	Y+9, r26	; 0x09
     cf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf8:	6f 81       	ldd	r22, Y+7	; 0x07
     cfa:	78 85       	ldd	r23, Y+8	; 0x08
     cfc:	89 85       	ldd	r24, Y+9	; 0x09
     cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e8       	ldi	r20, 0x80	; 128
     d06:	5f e3       	ldi	r21, 0x3F	; 63
     d08:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
     d0c:	88 23       	and	r24, r24
     d0e:	2c f4       	brge	.+10     	; 0xd1a <lcd_set_4bit+0x946>
		__ticks = 1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9e 83       	std	Y+6, r25	; 0x06
     d16:	8d 83       	std	Y+5, r24	; 0x05
     d18:	3f c0       	rjmp	.+126    	; 0xd98 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     d1a:	6f 81       	ldd	r22, Y+7	; 0x07
     d1c:	78 85       	ldd	r23, Y+8	; 0x08
     d1e:	89 85       	ldd	r24, Y+9	; 0x09
     d20:	9a 85       	ldd	r25, Y+10	; 0x0a
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	3f ef       	ldi	r19, 0xFF	; 255
     d26:	4f e7       	ldi	r20, 0x7F	; 127
     d28:	57 e4       	ldi	r21, 0x47	; 71
     d2a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
     d2e:	18 16       	cp	r1, r24
     d30:	4c f5       	brge	.+82     	; 0xd84 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d32:	6b 85       	ldd	r22, Y+11	; 0x0b
     d34:	7c 85       	ldd	r23, Y+12	; 0x0c
     d36:	8d 85       	ldd	r24, Y+13	; 0x0d
     d38:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e2       	ldi	r20, 0x20	; 32
     d40:	51 e4       	ldi	r21, 0x41	; 65
     d42:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	bc 01       	movw	r22, r24
     d4c:	cd 01       	movw	r24, r26
     d4e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
     d5a:	0f c0       	rjmp	.+30     	; 0xd7a <lcd_set_4bit+0x9a6>
     d5c:	80 e7       	ldi	r24, 0x70	; 112
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	9c 83       	std	Y+4, r25	; 0x04
     d62:	8b 83       	std	Y+3, r24	; 0x03
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <lcd_set_4bit+0x994>
     d6c:	9c 83       	std	Y+4, r25	; 0x04
     d6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	9e 83       	std	Y+6, r25	; 0x06
     d78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	69 f7       	brne	.-38     	; 0xd5c <lcd_set_4bit+0x988>
     d82:	14 c0       	rjmp	.+40     	; 0xdac <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d84:	6f 81       	ldd	r22, Y+7	; 0x07
     d86:	78 85       	ldd	r23, Y+8	; 0x08
     d88:	89 85       	ldd	r24, Y+9	; 0x09
     d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	9e 83       	std	Y+6, r25	; 0x06
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <lcd_set_4bit+0x9d0>
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     dac:	a8 e2       	ldi	r26, 0x28	; 40
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e8 e2       	ldi	r30, 0x28	; 40
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8b 7f       	andi	r24, 0xFB	; 251
     db8:	8c 93       	st	X, r24


}
     dba:	c0 59       	subi	r28, 0x90	; 144
     dbc:	df 4f       	sbci	r29, 0xFF	; 255
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	2e 97       	sbiw	r28, 0x0e	; 14
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
     de6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_set_4bit>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	a0 e8       	ldi	r26, 0x80	; 128
     df0:	bf e3       	ldi	r27, 0x3F	; 63
     df2:	8b 87       	std	Y+11, r24	; 0x0b
     df4:	9c 87       	std	Y+12, r25	; 0x0c
     df6:	ad 87       	std	Y+13, r26	; 0x0d
     df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     e00:	9e 85       	ldd	r25, Y+14	; 0x0e
     e02:	26 e6       	ldi	r18, 0x66	; 102
     e04:	36 e6       	ldi	r19, 0x66	; 102
     e06:	46 e6       	ldi	r20, 0x66	; 102
     e08:	55 e4       	ldi	r21, 0x45	; 69
     e0a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	8f 83       	std	Y+7, r24	; 0x07
     e14:	98 87       	std	Y+8, r25	; 0x08
     e16:	a9 87       	std	Y+9, r26	; 0x09
     e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1a:	6f 81       	ldd	r22, Y+7	; 0x07
     e1c:	78 85       	ldd	r23, Y+8	; 0x08
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e8       	ldi	r20, 0x80	; 128
     e28:	5f e3       	ldi	r21, 0x3F	; 63
     e2a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
     e2e:	88 23       	and	r24, r24
     e30:	2c f4       	brge	.+10     	; 0xe3c <lcd_init+0x6a>
		__ticks = 1;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9e 83       	std	Y+6, r25	; 0x06
     e38:	8d 83       	std	Y+5, r24	; 0x05
     e3a:	3f c0       	rjmp	.+126    	; 0xeba <lcd_init+0xe8>
	else if (__tmp > 65535)
     e3c:	6f 81       	ldd	r22, Y+7	; 0x07
     e3e:	78 85       	ldd	r23, Y+8	; 0x08
     e40:	89 85       	ldd	r24, Y+9	; 0x09
     e42:	9a 85       	ldd	r25, Y+10	; 0x0a
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	4f e7       	ldi	r20, 0x7F	; 127
     e4a:	57 e4       	ldi	r21, 0x47	; 71
     e4c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
     e50:	18 16       	cp	r1, r24
     e52:	4c f5       	brge	.+82     	; 0xea6 <lcd_init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e54:	6b 85       	ldd	r22, Y+11	; 0x0b
     e56:	7c 85       	ldd	r23, Y+12	; 0x0c
     e58:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e2       	ldi	r20, 0x20	; 32
     e62:	51 e4       	ldi	r21, 0x41	; 65
     e64:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	bc 01       	movw	r22, r24
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
     e7c:	0f c0       	rjmp	.+30     	; 0xe9c <lcd_init+0xca>
     e7e:	80 e7       	ldi	r24, 0x70	; 112
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	9c 83       	std	Y+4, r25	; 0x04
     e84:	8b 83       	std	Y+3, r24	; 0x03
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	9c 81       	ldd	r25, Y+4	; 0x04
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <lcd_init+0xb8>
     e8e:	9c 83       	std	Y+4, r25	; 0x04
     e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	69 f7       	brne	.-38     	; 0xe7e <lcd_init+0xac>
     ea4:	14 c0       	rjmp	.+40     	; 0xece <lcd_init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea6:	6f 81       	ldd	r22, Y+7	; 0x07
     ea8:	78 85       	ldd	r23, Y+8	; 0x08
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <lcd_init+0xf4>
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     ece:	88 e2       	ldi	r24, 0x28	; 40
     ed0:	0e 94 7f 07 	call	0xefe	; 0xefe <lcd_wr_command>
	lcd_wr_command(0x01);
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	0e 94 7f 07 	call	0xefe	; 0xefe <lcd_wr_command>
	lcd_wr_command(0x06);
     eda:	86 e0       	ldi	r24, 0x06	; 6
     edc:	0e 94 7f 07 	call	0xefe	; 0xefe <lcd_wr_command>
	lcd_wr_command(0x0E);
     ee0:	8e e0       	ldi	r24, 0x0E	; 14
     ee2:	0e 94 7f 07 	call	0xefe	; 0xefe <lcd_wr_command>
	lcd_wr_command(0x80);
     ee6:	80 e8       	ldi	r24, 0x80	; 128
     ee8:	0e 94 7f 07 	call	0xefe	; 0xefe <lcd_wr_command>

}
     eec:	2e 96       	adiw	r28, 0x0e	; 14
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <lcd_wr_command>:

//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	6e 97       	sbiw	r28, 0x1e	; 30
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     f14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f16:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     f18:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f1a:	80 7f       	andi	r24, 0xF0	; 240
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f1e:	a8 e2       	ldi	r26, 0x28	; 40
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e8 e2       	ldi	r30, 0x28	; 40
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8f 70       	andi	r24, 0x0F	; 15
     f2a:	8c 93       	st	X, r24
	lcd_port |= temp;
     f2c:	a8 e2       	ldi	r26, 0x28	; 40
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e8 e2       	ldi	r30, 0x28	; 40
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	90 81       	ld	r25, Z
     f36:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f38:	89 2b       	or	r24, r25
     f3a:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     f3c:	a8 e2       	ldi	r26, 0x28	; 40
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e8 e2       	ldi	r30, 0x28	; 40
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8e 7f       	andi	r24, 0xFE	; 254
     f48:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f4a:	a8 e2       	ldi	r26, 0x28	; 40
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e8 e2       	ldi	r30, 0x28	; 40
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8d 7f       	andi	r24, 0xFD	; 253
     f56:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f58:	a8 e2       	ldi	r26, 0x28	; 40
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e8 e2       	ldi	r30, 0x28	; 40
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	84 60       	ori	r24, 0x04	; 4
     f64:	8c 93       	st	X, r24
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 ea       	ldi	r26, 0xA0	; 160
     f6c:	b0 e4       	ldi	r27, 0x40	; 64
     f6e:	89 8f       	std	Y+25, r24	; 0x19
     f70:	9a 8f       	std	Y+26, r25	; 0x1a
     f72:	ab 8f       	std	Y+27, r26	; 0x1b
     f74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f76:	69 8d       	ldd	r22, Y+25	; 0x19
     f78:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f7e:	26 e6       	ldi	r18, 0x66	; 102
     f80:	36 e6       	ldi	r19, 0x66	; 102
     f82:	46 e6       	ldi	r20, 0x66	; 102
     f84:	55 e4       	ldi	r21, 0x45	; 69
     f86:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8d 8b       	std	Y+21, r24	; 0x15
     f90:	9e 8b       	std	Y+22, r25	; 0x16
     f92:	af 8b       	std	Y+23, r26	; 0x17
     f94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f96:	6d 89       	ldd	r22, Y+21	; 0x15
     f98:	7e 89       	ldd	r23, Y+22	; 0x16
     f9a:	8f 89       	ldd	r24, Y+23	; 0x17
     f9c:	98 8d       	ldd	r25, Y+24	; 0x18
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	5f e3       	ldi	r21, 0x3F	; 63
     fa6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
     faa:	88 23       	and	r24, r24
     fac:	2c f4       	brge	.+10     	; 0xfb8 <lcd_wr_command+0xba>
		__ticks = 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9c 8b       	std	Y+20, r25	; 0x14
     fb4:	8b 8b       	std	Y+19, r24	; 0x13
     fb6:	3f c0       	rjmp	.+126    	; 0x1036 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     fb8:	6d 89       	ldd	r22, Y+21	; 0x15
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	3f ef       	ldi	r19, 0xFF	; 255
     fc4:	4f e7       	ldi	r20, 0x7F	; 127
     fc6:	57 e4       	ldi	r21, 0x47	; 71
     fc8:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
     fcc:	18 16       	cp	r1, r24
     fce:	4c f5       	brge	.+82     	; 0x1022 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	69 8d       	ldd	r22, Y+25	; 0x19
     fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9c 8b       	std	Y+20, r25	; 0x14
     ff6:	8b 8b       	std	Y+19, r24	; 0x13
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <lcd_wr_command+0x11a>
     ffa:	80 e7       	ldi	r24, 0x70	; 112
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	9a 8b       	std	Y+18, r25	; 0x12
    1000:	89 8b       	std	Y+17, r24	; 0x11
    1002:	89 89       	ldd	r24, Y+17	; 0x11
    1004:	9a 89       	ldd	r25, Y+18	; 0x12
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <lcd_wr_command+0x108>
    100a:	9a 8b       	std	Y+18, r25	; 0x12
    100c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	8b 89       	ldd	r24, Y+19	; 0x13
    1010:	9c 89       	ldd	r25, Y+20	; 0x14
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	9c 8b       	std	Y+20, r25	; 0x14
    1016:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1018:	8b 89       	ldd	r24, Y+19	; 0x13
    101a:	9c 89       	ldd	r25, Y+20	; 0x14
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	69 f7       	brne	.-38     	; 0xffa <lcd_wr_command+0xfc>
    1020:	14 c0       	rjmp	.+40     	; 0x104a <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1022:	6d 89       	ldd	r22, Y+21	; 0x15
    1024:	7e 89       	ldd	r23, Y+22	; 0x16
    1026:	8f 89       	ldd	r24, Y+23	; 0x17
    1028:	98 8d       	ldd	r25, Y+24	; 0x18
    102a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9c 8b       	std	Y+20, r25	; 0x14
    1034:	8b 8b       	std	Y+19, r24	; 0x13
    1036:	8b 89       	ldd	r24, Y+19	; 0x13
    1038:	9c 89       	ldd	r25, Y+20	; 0x14
    103a:	98 8b       	std	Y+16, r25	; 0x10
    103c:	8f 87       	std	Y+15, r24	; 0x0f
    103e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1040:	98 89       	ldd	r25, Y+16	; 0x10
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <lcd_wr_command+0x144>
    1046:	98 8b       	std	Y+16, r25	; 0x10
    1048:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    104a:	a8 e2       	ldi	r26, 0x28	; 40
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e8 e2       	ldi	r30, 0x28	; 40
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8b 7f       	andi	r24, 0xFB	; 251
    1056:	8c 93       	st	X, r24

	cmd = cmd & 0x0F;
    1058:	8e 8d       	ldd	r24, Y+30	; 0x1e
    105a:	8f 70       	andi	r24, 0x0F	; 15
    105c:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	82 95       	swap	r24
    1062:	80 7f       	andi	r24, 0xF0	; 240
    1064:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1066:	a8 e2       	ldi	r26, 0x28	; 40
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e8 e2       	ldi	r30, 0x28	; 40
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 70       	andi	r24, 0x0F	; 15
    1072:	8c 93       	st	X, r24
	lcd_port |= cmd;
    1074:	a8 e2       	ldi	r26, 0x28	; 40
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e8 e2       	ldi	r30, 0x28	; 40
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	90 81       	ld	r25, Z
    107e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1080:	89 2b       	or	r24, r25
    1082:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1084:	a8 e2       	ldi	r26, 0x28	; 40
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e8 e2       	ldi	r30, 0x28	; 40
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8e 7f       	andi	r24, 0xFE	; 254
    1090:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1092:	a8 e2       	ldi	r26, 0x28	; 40
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e8 e2       	ldi	r30, 0x28	; 40
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8d 7f       	andi	r24, 0xFD	; 253
    109e:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a0:	a8 e2       	ldi	r26, 0x28	; 40
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e8 e2       	ldi	r30, 0x28	; 40
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	84 60       	ori	r24, 0x04	; 4
    10ac:	8c 93       	st	X, r24
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a0 ea       	ldi	r26, 0xA0	; 160
    10b4:	b0 e4       	ldi	r27, 0x40	; 64
    10b6:	8b 87       	std	Y+11, r24	; 0x0b
    10b8:	9c 87       	std	Y+12, r25	; 0x0c
    10ba:	ad 87       	std	Y+13, r26	; 0x0d
    10bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10be:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c6:	26 e6       	ldi	r18, 0x66	; 102
    10c8:	36 e6       	ldi	r19, 0x66	; 102
    10ca:	46 e6       	ldi	r20, 0x66	; 102
    10cc:	55 e4       	ldi	r21, 0x45	; 69
    10ce:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	8f 83       	std	Y+7, r24	; 0x07
    10d8:	98 87       	std	Y+8, r25	; 0x08
    10da:	a9 87       	std	Y+9, r26	; 0x09
    10dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10de:	6f 81       	ldd	r22, Y+7	; 0x07
    10e0:	78 85       	ldd	r23, Y+8	; 0x08
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e8       	ldi	r20, 0x80	; 128
    10ec:	5f e3       	ldi	r21, 0x3F	; 63
    10ee:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
    10f2:	88 23       	and	r24, r24
    10f4:	2c f4       	brge	.+10     	; 0x1100 <lcd_wr_command+0x202>
		__ticks = 1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	3f c0       	rjmp	.+126    	; 0x117e <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    1100:	6f 81       	ldd	r22, Y+7	; 0x07
    1102:	78 85       	ldd	r23, Y+8	; 0x08
    1104:	89 85       	ldd	r24, Y+9	; 0x09
    1106:	9a 85       	ldd	r25, Y+10	; 0x0a
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	3f ef       	ldi	r19, 0xFF	; 255
    110c:	4f e7       	ldi	r20, 0x7F	; 127
    110e:	57 e4       	ldi	r21, 0x47	; 71
    1110:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
    1114:	18 16       	cp	r1, r24
    1116:	4c f5       	brge	.+82     	; 0x116a <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1118:	6b 85       	ldd	r22, Y+11	; 0x0b
    111a:	7c 85       	ldd	r23, Y+12	; 0x0c
    111c:	8d 85       	ldd	r24, Y+13	; 0x0d
    111e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e2       	ldi	r20, 0x20	; 32
    1126:	51 e4       	ldi	r21, 0x41	; 65
    1128:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	8d 83       	std	Y+5, r24	; 0x05
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <lcd_wr_command+0x262>
    1142:	80 e7       	ldi	r24, 0x70	; 112
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	9c 83       	std	Y+4, r25	; 0x04
    1148:	8b 83       	std	Y+3, r24	; 0x03
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <lcd_wr_command+0x250>
    1152:	9c 83       	std	Y+4, r25	; 0x04
    1154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	69 f7       	brne	.-38     	; 0x1142 <lcd_wr_command+0x244>
    1168:	14 c0       	rjmp	.+40     	; 0x1192 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116a:	6f 81       	ldd	r22, Y+7	; 0x07
    116c:	78 85       	ldd	r23, Y+8	; 0x08
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	9a 83       	std	Y+2, r25	; 0x02
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <lcd_wr_command+0x28c>
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1192:	a8 e2       	ldi	r26, 0x28	; 40
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e8 e2       	ldi	r30, 0x28	; 40
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8b 7f       	andi	r24, 0xFB	; 251
    119e:	8c 93       	st	X, r24
}
    11a0:	6e 96       	adiw	r28, 0x1e	; 30
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	6e 97       	sbiw	r28, 0x1e	; 30
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    11c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ca:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    11cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ce:	80 7f       	andi	r24, 0xF0	; 240
    11d0:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    11d2:	a8 e2       	ldi	r26, 0x28	; 40
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e8 e2       	ldi	r30, 0x28	; 40
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	8f 70       	andi	r24, 0x0F	; 15
    11de:	8c 93       	st	X, r24
	lcd_port |= temp;
    11e0:	a8 e2       	ldi	r26, 0x28	; 40
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e8 e2       	ldi	r30, 0x28	; 40
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	90 81       	ld	r25, Z
    11ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ec:	89 2b       	or	r24, r25
    11ee:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    11f0:	a8 e2       	ldi	r26, 0x28	; 40
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e8 e2       	ldi	r30, 0x28	; 40
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	81 60       	ori	r24, 0x01	; 1
    11fc:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    11fe:	a8 e2       	ldi	r26, 0x28	; 40
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e8 e2       	ldi	r30, 0x28	; 40
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8d 7f       	andi	r24, 0xFD	; 253
    120a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    120c:	a8 e2       	ldi	r26, 0x28	; 40
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e8 e2       	ldi	r30, 0x28	; 40
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	84 60       	ori	r24, 0x04	; 4
    1218:	8c 93       	st	X, r24
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 ea       	ldi	r26, 0xA0	; 160
    1220:	b0 e4       	ldi	r27, 0x40	; 64
    1222:	89 8f       	std	Y+25, r24	; 0x19
    1224:	9a 8f       	std	Y+26, r25	; 0x1a
    1226:	ab 8f       	std	Y+27, r26	; 0x1b
    1228:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122a:	69 8d       	ldd	r22, Y+25	; 0x19
    122c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    122e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1230:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1232:	26 e6       	ldi	r18, 0x66	; 102
    1234:	36 e6       	ldi	r19, 0x66	; 102
    1236:	46 e6       	ldi	r20, 0x66	; 102
    1238:	55 e4       	ldi	r21, 0x45	; 69
    123a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8d 8b       	std	Y+21, r24	; 0x15
    1244:	9e 8b       	std	Y+22, r25	; 0x16
    1246:	af 8b       	std	Y+23, r26	; 0x17
    1248:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    124a:	6d 89       	ldd	r22, Y+21	; 0x15
    124c:	7e 89       	ldd	r23, Y+22	; 0x16
    124e:	8f 89       	ldd	r24, Y+23	; 0x17
    1250:	98 8d       	ldd	r25, Y+24	; 0x18
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e8       	ldi	r20, 0x80	; 128
    1258:	5f e3       	ldi	r21, 0x3F	; 63
    125a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
    125e:	88 23       	and	r24, r24
    1260:	2c f4       	brge	.+10     	; 0x126c <lcd_wr_char+0xba>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9c 8b       	std	Y+20, r25	; 0x14
    1268:	8b 8b       	std	Y+19, r24	; 0x13
    126a:	3f c0       	rjmp	.+126    	; 0x12ea <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    126c:	6d 89       	ldd	r22, Y+21	; 0x15
    126e:	7e 89       	ldd	r23, Y+22	; 0x16
    1270:	8f 89       	ldd	r24, Y+23	; 0x17
    1272:	98 8d       	ldd	r25, Y+24	; 0x18
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	4f e7       	ldi	r20, 0x7F	; 127
    127a:	57 e4       	ldi	r21, 0x47	; 71
    127c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
    1280:	18 16       	cp	r1, r24
    1282:	4c f5       	brge	.+82     	; 0x12d6 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1284:	69 8d       	ldd	r22, Y+25	; 0x19
    1286:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    128a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9c 8b       	std	Y+20, r25	; 0x14
    12aa:	8b 8b       	std	Y+19, r24	; 0x13
    12ac:	0f c0       	rjmp	.+30     	; 0x12cc <lcd_wr_char+0x11a>
    12ae:	80 e7       	ldi	r24, 0x70	; 112
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	9a 8b       	std	Y+18, r25	; 0x12
    12b4:	89 8b       	std	Y+17, r24	; 0x11
    12b6:	89 89       	ldd	r24, Y+17	; 0x11
    12b8:	9a 89       	ldd	r25, Y+18	; 0x12
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <lcd_wr_char+0x108>
    12be:	9a 8b       	std	Y+18, r25	; 0x12
    12c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c2:	8b 89       	ldd	r24, Y+19	; 0x13
    12c4:	9c 89       	ldd	r25, Y+20	; 0x14
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	9c 8b       	std	Y+20, r25	; 0x14
    12ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12cc:	8b 89       	ldd	r24, Y+19	; 0x13
    12ce:	9c 89       	ldd	r25, Y+20	; 0x14
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	69 f7       	brne	.-38     	; 0x12ae <lcd_wr_char+0xfc>
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d6:	6d 89       	ldd	r22, Y+21	; 0x15
    12d8:	7e 89       	ldd	r23, Y+22	; 0x16
    12da:	8f 89       	ldd	r24, Y+23	; 0x17
    12dc:	98 8d       	ldd	r25, Y+24	; 0x18
    12de:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9c 8b       	std	Y+20, r25	; 0x14
    12e8:	8b 8b       	std	Y+19, r24	; 0x13
    12ea:	8b 89       	ldd	r24, Y+19	; 0x13
    12ec:	9c 89       	ldd	r25, Y+20	; 0x14
    12ee:	98 8b       	std	Y+16, r25	; 0x10
    12f0:	8f 87       	std	Y+15, r24	; 0x0f
    12f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f4:	98 89       	ldd	r25, Y+16	; 0x10
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <lcd_wr_char+0x144>
    12fa:	98 8b       	std	Y+16, r25	; 0x10
    12fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    12fe:	a8 e2       	ldi	r26, 0x28	; 40
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e8 e2       	ldi	r30, 0x28	; 40
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8b 7f       	andi	r24, 0xFB	; 251
    130a:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    130c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    130e:	8f 70       	andi	r24, 0x0F	; 15
    1310:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1312:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1314:	82 95       	swap	r24
    1316:	80 7f       	andi	r24, 0xF0	; 240
    1318:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    131a:	a8 e2       	ldi	r26, 0x28	; 40
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e8 e2       	ldi	r30, 0x28	; 40
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8f 70       	andi	r24, 0x0F	; 15
    1326:	8c 93       	st	X, r24
	lcd_port |= letter;
    1328:	a8 e2       	ldi	r26, 0x28	; 40
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e8 e2       	ldi	r30, 0x28	; 40
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	90 81       	ld	r25, Z
    1332:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1334:	89 2b       	or	r24, r25
    1336:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1338:	a8 e2       	ldi	r26, 0x28	; 40
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 e2       	ldi	r30, 0x28	; 40
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	81 60       	ori	r24, 0x01	; 1
    1344:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1346:	a8 e2       	ldi	r26, 0x28	; 40
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e8 e2       	ldi	r30, 0x28	; 40
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8d 7f       	andi	r24, 0xFD	; 253
    1352:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1354:	a8 e2       	ldi	r26, 0x28	; 40
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e8 e2       	ldi	r30, 0x28	; 40
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	84 60       	ori	r24, 0x04	; 4
    1360:	8c 93       	st	X, r24
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a0 ea       	ldi	r26, 0xA0	; 160
    1368:	b0 e4       	ldi	r27, 0x40	; 64
    136a:	8b 87       	std	Y+11, r24	; 0x0b
    136c:	9c 87       	std	Y+12, r25	; 0x0c
    136e:	ad 87       	std	Y+13, r26	; 0x0d
    1370:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1372:	6b 85       	ldd	r22, Y+11	; 0x0b
    1374:	7c 85       	ldd	r23, Y+12	; 0x0c
    1376:	8d 85       	ldd	r24, Y+13	; 0x0d
    1378:	9e 85       	ldd	r25, Y+14	; 0x0e
    137a:	26 e6       	ldi	r18, 0x66	; 102
    137c:	36 e6       	ldi	r19, 0x66	; 102
    137e:	46 e6       	ldi	r20, 0x66	; 102
    1380:	55 e4       	ldi	r21, 0x45	; 69
    1382:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	8f 83       	std	Y+7, r24	; 0x07
    138c:	98 87       	std	Y+8, r25	; 0x08
    138e:	a9 87       	std	Y+9, r26	; 0x09
    1390:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1392:	6f 81       	ldd	r22, Y+7	; 0x07
    1394:	78 85       	ldd	r23, Y+8	; 0x08
    1396:	89 85       	ldd	r24, Y+9	; 0x09
    1398:	9a 85       	ldd	r25, Y+10	; 0x0a
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e8       	ldi	r20, 0x80	; 128
    13a0:	5f e3       	ldi	r21, 0x3F	; 63
    13a2:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__ltsf2>
    13a6:	88 23       	and	r24, r24
    13a8:	2c f4       	brge	.+10     	; 0x13b4 <lcd_wr_char+0x202>
		__ticks = 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9e 83       	std	Y+6, r25	; 0x06
    13b0:	8d 83       	std	Y+5, r24	; 0x05
    13b2:	3f c0       	rjmp	.+126    	; 0x1432 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    13b4:	6f 81       	ldd	r22, Y+7	; 0x07
    13b6:	78 85       	ldd	r23, Y+8	; 0x08
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	3f ef       	ldi	r19, 0xFF	; 255
    13c0:	4f e7       	ldi	r20, 0x7F	; 127
    13c2:	57 e4       	ldi	r21, 0x47	; 71
    13c4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gtsf2>
    13c8:	18 16       	cp	r1, r24
    13ca:	4c f5       	brge	.+82     	; 0x141e <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e2       	ldi	r20, 0x20	; 32
    13da:	51 e4       	ldi	r21, 0x41	; 65
    13dc:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	8d 83       	std	Y+5, r24	; 0x05
    13f4:	0f c0       	rjmp	.+30     	; 0x1414 <lcd_wr_char+0x262>
    13f6:	80 e7       	ldi	r24, 0x70	; 112
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	9c 83       	std	Y+4, r25	; 0x04
    13fc:	8b 83       	std	Y+3, r24	; 0x03
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <lcd_wr_char+0x250>
    1406:	9c 83       	std	Y+4, r25	; 0x04
    1408:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	9e 81       	ldd	r25, Y+6	; 0x06
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	69 f7       	brne	.-38     	; 0x13f6 <lcd_wr_char+0x244>
    141c:	14 c0       	rjmp	.+40     	; 0x1446 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141e:	6f 81       	ldd	r22, Y+7	; 0x07
    1420:	78 85       	ldd	r23, Y+8	; 0x08
    1422:	89 85       	ldd	r24, Y+9	; 0x09
    1424:	9a 85       	ldd	r25, Y+10	; 0x0a
    1426:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <lcd_wr_char+0x28c>
    1442:	9a 83       	std	Y+2, r25	; 0x02
    1444:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1446:	a8 e2       	ldi	r26, 0x28	; 40
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e8 e2       	ldi	r30, 0x28	; 40
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8b 7f       	andi	r24, 0xFB	; 251
    1452:	8c 93       	st	X, r24
}
    1454:	6e 96       	adiw	r28, 0x1e	; 30
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <lcd_string>:



/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	0f 92       	push	r0
    146c:	0f 92       	push	r0
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	0a c0       	rjmp	.+20     	; 0x148c <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	fa 81       	ldd	r31, Y+2	; 0x02
    147c:	80 81       	ld	r24, Z
    147e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <lcd_wr_char>
		str++;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    148c:	e9 81       	ldd	r30, Y+1	; 0x01
    148e:	fa 81       	ldd	r31, Y+2	; 0x02
    1490:	80 81       	ld	r24, Z
    1492:	88 23       	and	r24, r24
    1494:	89 f7       	brne	.-30     	; 0x1478 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <lcd_cursor+0x6>
    14a6:	0f 92       	push	r0
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3c 83       	std	Y+4, r19	; 0x04
    14b8:	2b 83       	std	Y+3, r18	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	82 30       	cpi	r24, 0x02	; 2
    14c0:	91 05       	cpc	r25, r1
    14c2:	d9 f0       	breq	.+54     	; 0x14fa <lcd_cursor+0x5a>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	23 30       	cpi	r18, 0x03	; 3
    14ca:	31 05       	cpc	r19, r1
    14cc:	34 f4       	brge	.+12     	; 0x14da <lcd_cursor+0x3a>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	61 f0       	breq	.+24     	; 0x14f0 <lcd_cursor+0x50>
    14d8:	1e c0       	rjmp	.+60     	; 0x1516 <lcd_cursor+0x76>
    14da:	2b 81       	ldd	r18, Y+3	; 0x03
    14dc:	3c 81       	ldd	r19, Y+4	; 0x04
    14de:	23 30       	cpi	r18, 0x03	; 3
    14e0:	31 05       	cpc	r19, r1
    14e2:	81 f0       	breq	.+32     	; 0x1504 <lcd_cursor+0x64>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	91 05       	cpc	r25, r1
    14ec:	81 f0       	breq	.+32     	; 0x150e <lcd_cursor+0x6e>
    14ee:	13 c0       	rjmp	.+38     	; 0x1516 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	81 58       	subi	r24, 0x81	; 129
    14f4:	0e 94 7f 07 	call	0xefe	; 0xefe <lcd_wr_command>
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	81 54       	subi	r24, 0x41	; 65
    14fe:	0e 94 7f 07 	call	0xefe	; 0xefe <lcd_wr_command>
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	8d 56       	subi	r24, 0x6D	; 109
    1508:	0e 94 7f 07 	call	0xefe	; 0xefe <lcd_wr_command>
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	8d 52       	subi	r24, 0x2D	; 45
    1512:	0e 94 7f 07 	call	0xefe	; 0xefe <lcd_wr_command>
		default: break;
	}
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	27 97       	sbiw	r28, 0x07	; 7
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	6b 83       	std	Y+3, r22	; 0x03
    153c:	5d 83       	std	Y+5, r21	; 0x05
    153e:	4c 83       	std	Y+4, r20	; 0x04
    1540:	3f 83       	std	Y+7, r19	; 0x07
    1542:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1544:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	88 23       	and	r24, r24
    154a:	19 f0       	breq	.+6      	; 0x1552 <lcd_print+0x2e>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 23       	and	r24, r24
    1550:	21 f4       	brne	.+8      	; 0x155a <lcd_print+0x36>
	{
		lcd_wr_command(0x80);
    1552:	80 e8       	ldi	r24, 0x80	; 128
    1554:	0e 94 7f 07 	call	0xefe	; 0xefe <lcd_wr_command>
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <lcd_print+0x3e>
	}
	else
	{
		lcd_cursor(row,coloumn);
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	6b 81       	ldd	r22, Y+3	; 0x03
    155e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1562:	8e 81       	ldd	r24, Y+6	; 0x06
    1564:	9f 81       	ldd	r25, Y+7	; 0x07
    1566:	85 30       	cpi	r24, 0x05	; 5
    1568:	91 05       	cpc	r25, r1
    156a:	19 f0       	breq	.+6      	; 0x1572 <lcd_print+0x4e>
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	a9 f4       	brne	.+42     	; 0x159c <lcd_print+0x78>
	{
		million=value/10000+48;
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	20 e1       	ldi	r18, 0x10	; 16
    1578:	37 e2       	ldi	r19, 0x27	; 39
    157a:	b9 01       	movw	r22, r18
    157c:	0e 94 a3 12 	call	0x2546	; 0x2546 <__udivmodhi4>
    1580:	cb 01       	movw	r24, r22
    1582:	c0 96       	adiw	r24, 0x30	; 48
    1584:	90 93 11 03 	sts	0x0311, r25
    1588:	80 93 10 03 	sts	0x0310, r24
		lcd_wr_char(million);
    158c:	80 91 10 03 	lds	r24, 0x0310
    1590:	90 91 11 03 	lds	r25, 0x0311
    1594:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <lcd_wr_char>
		flag=1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    159c:	8e 81       	ldd	r24, Y+6	; 0x06
    159e:	9f 81       	ldd	r25, Y+7	; 0x07
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	91 05       	cpc	r25, r1
    15a4:	19 f0       	breq	.+6      	; 0x15ac <lcd_print+0x88>
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	11 f5       	brne	.+68     	; 0x15f0 <lcd_print+0xcc>
	{
		temp = value/1000;
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
    15b0:	28 ee       	ldi	r18, 0xE8	; 232
    15b2:	33 e0       	ldi	r19, 0x03	; 3
    15b4:	b9 01       	movw	r22, r18
    15b6:	0e 94 a3 12 	call	0x2546	; 0x2546 <__udivmodhi4>
    15ba:	cb 01       	movw	r24, r22
    15bc:	90 93 13 03 	sts	0x0313, r25
    15c0:	80 93 12 03 	sts	0x0312, r24
		thousand = temp%10 + 48;
    15c4:	80 91 12 03 	lds	r24, 0x0312
    15c8:	90 91 13 03 	lds	r25, 0x0313
    15cc:	2a e0       	ldi	r18, 0x0A	; 10
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	b9 01       	movw	r22, r18
    15d2:	0e 94 a3 12 	call	0x2546	; 0x2546 <__udivmodhi4>
    15d6:	c0 96       	adiw	r24, 0x30	; 48
    15d8:	90 93 1b 03 	sts	0x031B, r25
    15dc:	80 93 1a 03 	sts	0x031A, r24
		lcd_wr_char(thousand);
    15e0:	80 91 1a 03 	lds	r24, 0x031A
    15e4:	90 91 1b 03 	lds	r25, 0x031B
    15e8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <lcd_wr_char>
		flag=1;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    15f0:	8e 81       	ldd	r24, Y+6	; 0x06
    15f2:	9f 81       	ldd	r25, Y+7	; 0x07
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	19 f0       	breq	.+6      	; 0x1600 <lcd_print+0xdc>
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	11 f5       	brne	.+68     	; 0x1644 <lcd_print+0x120>
	{
		temp = value/100;
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	24 e6       	ldi	r18, 0x64	; 100
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	b9 01       	movw	r22, r18
    160a:	0e 94 a3 12 	call	0x2546	; 0x2546 <__udivmodhi4>
    160e:	cb 01       	movw	r24, r22
    1610:	90 93 13 03 	sts	0x0313, r25
    1614:	80 93 12 03 	sts	0x0312, r24
		hundred = temp%10 + 48;
    1618:	80 91 12 03 	lds	r24, 0x0312
    161c:	90 91 13 03 	lds	r25, 0x0313
    1620:	2a e0       	ldi	r18, 0x0A	; 10
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	b9 01       	movw	r22, r18
    1626:	0e 94 a3 12 	call	0x2546	; 0x2546 <__udivmodhi4>
    162a:	c0 96       	adiw	r24, 0x30	; 48
    162c:	90 93 17 03 	sts	0x0317, r25
    1630:	80 93 16 03 	sts	0x0316, r24
		lcd_wr_char(hundred);
    1634:	80 91 16 03 	lds	r24, 0x0316
    1638:	90 91 17 03 	lds	r25, 0x0317
    163c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <lcd_wr_char>
		flag=1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	91 05       	cpc	r25, r1
    164c:	19 f0       	breq	.+6      	; 0x1654 <lcd_print+0x130>
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	11 f5       	brne	.+68     	; 0x1698 <lcd_print+0x174>
	{
		temp = value/10;
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	9d 81       	ldd	r25, Y+5	; 0x05
    1658:	2a e0       	ldi	r18, 0x0A	; 10
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	b9 01       	movw	r22, r18
    165e:	0e 94 a3 12 	call	0x2546	; 0x2546 <__udivmodhi4>
    1662:	cb 01       	movw	r24, r22
    1664:	90 93 13 03 	sts	0x0313, r25
    1668:	80 93 12 03 	sts	0x0312, r24
		tens = temp%10 + 48;
    166c:	80 91 12 03 	lds	r24, 0x0312
    1670:	90 91 13 03 	lds	r25, 0x0313
    1674:	2a e0       	ldi	r18, 0x0A	; 10
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	b9 01       	movw	r22, r18
    167a:	0e 94 a3 12 	call	0x2546	; 0x2546 <__udivmodhi4>
    167e:	c0 96       	adiw	r24, 0x30	; 48
    1680:	90 93 15 03 	sts	0x0315, r25
    1684:	80 93 14 03 	sts	0x0314, r24
		lcd_wr_char(tens);
    1688:	80 91 14 03 	lds	r24, 0x0314
    168c:	90 91 15 03 	lds	r25, 0x0315
    1690:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <lcd_wr_char>
		flag=1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1698:	8e 81       	ldd	r24, Y+6	; 0x06
    169a:	9f 81       	ldd	r25, Y+7	; 0x07
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	91 05       	cpc	r25, r1
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <lcd_print+0x184>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	91 f4       	brne	.+36     	; 0x16cc <lcd_print+0x1a8>
	{
		unit = value%10 + 48;
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	b9 01       	movw	r22, r18
    16b2:	0e 94 a3 12 	call	0x2546	; 0x2546 <__udivmodhi4>
    16b6:	c0 96       	adiw	r24, 0x30	; 48
    16b8:	90 93 19 03 	sts	0x0319, r25
    16bc:	80 93 18 03 	sts	0x0318, r24
		lcd_wr_char(unit);
    16c0:	80 91 18 03 	lds	r24, 0x0318
    16c4:	90 91 19 03 	lds	r25, 0x0319
    16c8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <lcd_wr_char>
	}
	if(digits>5)
    16cc:	8e 81       	ldd	r24, Y+6	; 0x06
    16ce:	9f 81       	ldd	r25, Y+7	; 0x07
    16d0:	86 30       	cpi	r24, 0x06	; 6
    16d2:	91 05       	cpc	r25, r1
    16d4:	1c f0       	brlt	.+6      	; 0x16dc <lcd_print+0x1b8>
	{
		lcd_wr_char('E');
    16d6:	85 e4       	ldi	r24, 0x45	; 69
    16d8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <lcd_wr_char>
	}
	
}
    16dc:	27 96       	adiw	r28, 0x07	; 7
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <__fixunssfsi>:
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	7b 01       	movw	r14, r22
    16f8:	8c 01       	movw	r16, r24
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	5f e4       	ldi	r21, 0x4F	; 79
    1702:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
    1706:	88 23       	and	r24, r24
    1708:	8c f0       	brlt	.+34     	; 0x172c <__fixunssfsi+0x3e>
    170a:	c8 01       	movw	r24, r16
    170c:	b7 01       	movw	r22, r14
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	5f e4       	ldi	r21, 0x4F	; 79
    1716:	0e 94 ef 0c 	call	0x19de	; 0x19de <__subsf3>
    171a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fixsfsi>
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	20 50       	subi	r18, 0x00	; 0
    1724:	30 40       	sbci	r19, 0x00	; 0
    1726:	40 40       	sbci	r20, 0x00	; 0
    1728:	50 48       	sbci	r21, 0x80	; 128
    172a:	06 c0       	rjmp	.+12     	; 0x1738 <__fixunssfsi+0x4a>
    172c:	c8 01       	movw	r24, r16
    172e:	b7 01       	movw	r22, r14
    1730:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fixsfsi>
    1734:	9b 01       	movw	r18, r22
    1736:	ac 01       	movw	r20, r24
    1738:	b9 01       	movw	r22, r18
    173a:	ca 01       	movw	r24, r20
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	ff 90       	pop	r15
    1742:	ef 90       	pop	r14
    1744:	08 95       	ret

00001746 <_fpadd_parts>:
    1746:	a0 e0       	ldi	r26, 0x00	; 0
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e9 ea       	ldi	r30, 0xA9	; 169
    174c:	fb e0       	ldi	r31, 0x0B	; 11
    174e:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__prologue_saves__>
    1752:	dc 01       	movw	r26, r24
    1754:	2b 01       	movw	r4, r22
    1756:	fa 01       	movw	r30, r20
    1758:	9c 91       	ld	r25, X
    175a:	92 30       	cpi	r25, 0x02	; 2
    175c:	08 f4       	brcc	.+2      	; 0x1760 <_fpadd_parts+0x1a>
    175e:	39 c1       	rjmp	.+626    	; 0x19d2 <_fpadd_parts+0x28c>
    1760:	eb 01       	movw	r28, r22
    1762:	88 81       	ld	r24, Y
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	08 f4       	brcc	.+2      	; 0x176a <_fpadd_parts+0x24>
    1768:	33 c1       	rjmp	.+614    	; 0x19d0 <_fpadd_parts+0x28a>
    176a:	94 30       	cpi	r25, 0x04	; 4
    176c:	69 f4       	brne	.+26     	; 0x1788 <_fpadd_parts+0x42>
    176e:	84 30       	cpi	r24, 0x04	; 4
    1770:	09 f0       	breq	.+2      	; 0x1774 <_fpadd_parts+0x2e>
    1772:	2f c1       	rjmp	.+606    	; 0x19d2 <_fpadd_parts+0x28c>
    1774:	11 96       	adiw	r26, 0x01	; 1
    1776:	9c 91       	ld	r25, X
    1778:	11 97       	sbiw	r26, 0x01	; 1
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	98 17       	cp	r25, r24
    177e:	09 f4       	brne	.+2      	; 0x1782 <_fpadd_parts+0x3c>
    1780:	28 c1       	rjmp	.+592    	; 0x19d2 <_fpadd_parts+0x28c>
    1782:	a8 e0       	ldi	r26, 0x08	; 8
    1784:	b2 e0       	ldi	r27, 0x02	; 2
    1786:	25 c1       	rjmp	.+586    	; 0x19d2 <_fpadd_parts+0x28c>
    1788:	84 30       	cpi	r24, 0x04	; 4
    178a:	09 f4       	brne	.+2      	; 0x178e <_fpadd_parts+0x48>
    178c:	21 c1       	rjmp	.+578    	; 0x19d0 <_fpadd_parts+0x28a>
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	a9 f4       	brne	.+42     	; 0x17bc <_fpadd_parts+0x76>
    1792:	92 30       	cpi	r25, 0x02	; 2
    1794:	09 f0       	breq	.+2      	; 0x1798 <_fpadd_parts+0x52>
    1796:	1d c1       	rjmp	.+570    	; 0x19d2 <_fpadd_parts+0x28c>
    1798:	9a 01       	movw	r18, r20
    179a:	ad 01       	movw	r20, r26
    179c:	88 e0       	ldi	r24, 0x08	; 8
    179e:	ea 01       	movw	r28, r20
    17a0:	09 90       	ld	r0, Y+
    17a2:	ae 01       	movw	r20, r28
    17a4:	e9 01       	movw	r28, r18
    17a6:	09 92       	st	Y+, r0
    17a8:	9e 01       	movw	r18, r28
    17aa:	81 50       	subi	r24, 0x01	; 1
    17ac:	c1 f7       	brne	.-16     	; 0x179e <_fpadd_parts+0x58>
    17ae:	e2 01       	movw	r28, r4
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	11 96       	adiw	r26, 0x01	; 1
    17b4:	9c 91       	ld	r25, X
    17b6:	89 23       	and	r24, r25
    17b8:	81 83       	std	Z+1, r24	; 0x01
    17ba:	08 c1       	rjmp	.+528    	; 0x19cc <_fpadd_parts+0x286>
    17bc:	92 30       	cpi	r25, 0x02	; 2
    17be:	09 f4       	brne	.+2      	; 0x17c2 <_fpadd_parts+0x7c>
    17c0:	07 c1       	rjmp	.+526    	; 0x19d0 <_fpadd_parts+0x28a>
    17c2:	12 96       	adiw	r26, 0x02	; 2
    17c4:	2d 90       	ld	r2, X+
    17c6:	3c 90       	ld	r3, X
    17c8:	13 97       	sbiw	r26, 0x03	; 3
    17ca:	eb 01       	movw	r28, r22
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	9b 81       	ldd	r25, Y+3	; 0x03
    17d0:	14 96       	adiw	r26, 0x04	; 4
    17d2:	ad 90       	ld	r10, X+
    17d4:	bd 90       	ld	r11, X+
    17d6:	cd 90       	ld	r12, X+
    17d8:	dc 90       	ld	r13, X
    17da:	17 97       	sbiw	r26, 0x07	; 7
    17dc:	ec 80       	ldd	r14, Y+4	; 0x04
    17de:	fd 80       	ldd	r15, Y+5	; 0x05
    17e0:	0e 81       	ldd	r16, Y+6	; 0x06
    17e2:	1f 81       	ldd	r17, Y+7	; 0x07
    17e4:	91 01       	movw	r18, r2
    17e6:	28 1b       	sub	r18, r24
    17e8:	39 0b       	sbc	r19, r25
    17ea:	b9 01       	movw	r22, r18
    17ec:	37 ff       	sbrs	r19, 7
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <_fpadd_parts+0xb2>
    17f0:	66 27       	eor	r22, r22
    17f2:	77 27       	eor	r23, r23
    17f4:	62 1b       	sub	r22, r18
    17f6:	73 0b       	sbc	r23, r19
    17f8:	60 32       	cpi	r22, 0x20	; 32
    17fa:	71 05       	cpc	r23, r1
    17fc:	0c f0       	brlt	.+2      	; 0x1800 <_fpadd_parts+0xba>
    17fe:	61 c0       	rjmp	.+194    	; 0x18c2 <_fpadd_parts+0x17c>
    1800:	12 16       	cp	r1, r18
    1802:	13 06       	cpc	r1, r19
    1804:	6c f5       	brge	.+90     	; 0x1860 <_fpadd_parts+0x11a>
    1806:	37 01       	movw	r6, r14
    1808:	48 01       	movw	r8, r16
    180a:	06 2e       	mov	r0, r22
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <_fpadd_parts+0xd0>
    180e:	96 94       	lsr	r9
    1810:	87 94       	ror	r8
    1812:	77 94       	ror	r7
    1814:	67 94       	ror	r6
    1816:	0a 94       	dec	r0
    1818:	d2 f7       	brpl	.-12     	; 0x180e <_fpadd_parts+0xc8>
    181a:	21 e0       	ldi	r18, 0x01	; 1
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	04 c0       	rjmp	.+8      	; 0x182c <_fpadd_parts+0xe6>
    1824:	22 0f       	add	r18, r18
    1826:	33 1f       	adc	r19, r19
    1828:	44 1f       	adc	r20, r20
    182a:	55 1f       	adc	r21, r21
    182c:	6a 95       	dec	r22
    182e:	d2 f7       	brpl	.-12     	; 0x1824 <_fpadd_parts+0xde>
    1830:	21 50       	subi	r18, 0x01	; 1
    1832:	30 40       	sbci	r19, 0x00	; 0
    1834:	40 40       	sbci	r20, 0x00	; 0
    1836:	50 40       	sbci	r21, 0x00	; 0
    1838:	2e 21       	and	r18, r14
    183a:	3f 21       	and	r19, r15
    183c:	40 23       	and	r20, r16
    183e:	51 23       	and	r21, r17
    1840:	21 15       	cp	r18, r1
    1842:	31 05       	cpc	r19, r1
    1844:	41 05       	cpc	r20, r1
    1846:	51 05       	cpc	r21, r1
    1848:	21 f0       	breq	.+8      	; 0x1852 <_fpadd_parts+0x10c>
    184a:	21 e0       	ldi	r18, 0x01	; 1
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	79 01       	movw	r14, r18
    1854:	8a 01       	movw	r16, r20
    1856:	e6 28       	or	r14, r6
    1858:	f7 28       	or	r15, r7
    185a:	08 29       	or	r16, r8
    185c:	19 29       	or	r17, r9
    185e:	3c c0       	rjmp	.+120    	; 0x18d8 <_fpadd_parts+0x192>
    1860:	23 2b       	or	r18, r19
    1862:	d1 f1       	breq	.+116    	; 0x18d8 <_fpadd_parts+0x192>
    1864:	26 0e       	add	r2, r22
    1866:	37 1e       	adc	r3, r23
    1868:	35 01       	movw	r6, r10
    186a:	46 01       	movw	r8, r12
    186c:	06 2e       	mov	r0, r22
    186e:	04 c0       	rjmp	.+8      	; 0x1878 <_fpadd_parts+0x132>
    1870:	96 94       	lsr	r9
    1872:	87 94       	ror	r8
    1874:	77 94       	ror	r7
    1876:	67 94       	ror	r6
    1878:	0a 94       	dec	r0
    187a:	d2 f7       	brpl	.-12     	; 0x1870 <_fpadd_parts+0x12a>
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	04 c0       	rjmp	.+8      	; 0x188e <_fpadd_parts+0x148>
    1886:	22 0f       	add	r18, r18
    1888:	33 1f       	adc	r19, r19
    188a:	44 1f       	adc	r20, r20
    188c:	55 1f       	adc	r21, r21
    188e:	6a 95       	dec	r22
    1890:	d2 f7       	brpl	.-12     	; 0x1886 <_fpadd_parts+0x140>
    1892:	21 50       	subi	r18, 0x01	; 1
    1894:	30 40       	sbci	r19, 0x00	; 0
    1896:	40 40       	sbci	r20, 0x00	; 0
    1898:	50 40       	sbci	r21, 0x00	; 0
    189a:	2a 21       	and	r18, r10
    189c:	3b 21       	and	r19, r11
    189e:	4c 21       	and	r20, r12
    18a0:	5d 21       	and	r21, r13
    18a2:	21 15       	cp	r18, r1
    18a4:	31 05       	cpc	r19, r1
    18a6:	41 05       	cpc	r20, r1
    18a8:	51 05       	cpc	r21, r1
    18aa:	21 f0       	breq	.+8      	; 0x18b4 <_fpadd_parts+0x16e>
    18ac:	21 e0       	ldi	r18, 0x01	; 1
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	59 01       	movw	r10, r18
    18b6:	6a 01       	movw	r12, r20
    18b8:	a6 28       	or	r10, r6
    18ba:	b7 28       	or	r11, r7
    18bc:	c8 28       	or	r12, r8
    18be:	d9 28       	or	r13, r9
    18c0:	0b c0       	rjmp	.+22     	; 0x18d8 <_fpadd_parts+0x192>
    18c2:	82 15       	cp	r24, r2
    18c4:	93 05       	cpc	r25, r3
    18c6:	2c f0       	brlt	.+10     	; 0x18d2 <_fpadd_parts+0x18c>
    18c8:	1c 01       	movw	r2, r24
    18ca:	aa 24       	eor	r10, r10
    18cc:	bb 24       	eor	r11, r11
    18ce:	65 01       	movw	r12, r10
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <_fpadd_parts+0x192>
    18d2:	ee 24       	eor	r14, r14
    18d4:	ff 24       	eor	r15, r15
    18d6:	87 01       	movw	r16, r14
    18d8:	11 96       	adiw	r26, 0x01	; 1
    18da:	9c 91       	ld	r25, X
    18dc:	d2 01       	movw	r26, r4
    18de:	11 96       	adiw	r26, 0x01	; 1
    18e0:	8c 91       	ld	r24, X
    18e2:	98 17       	cp	r25, r24
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <_fpadd_parts+0x1a2>
    18e6:	45 c0       	rjmp	.+138    	; 0x1972 <_fpadd_parts+0x22c>
    18e8:	99 23       	and	r25, r25
    18ea:	39 f0       	breq	.+14     	; 0x18fa <_fpadd_parts+0x1b4>
    18ec:	a8 01       	movw	r20, r16
    18ee:	97 01       	movw	r18, r14
    18f0:	2a 19       	sub	r18, r10
    18f2:	3b 09       	sbc	r19, r11
    18f4:	4c 09       	sbc	r20, r12
    18f6:	5d 09       	sbc	r21, r13
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <_fpadd_parts+0x1c0>
    18fa:	a6 01       	movw	r20, r12
    18fc:	95 01       	movw	r18, r10
    18fe:	2e 19       	sub	r18, r14
    1900:	3f 09       	sbc	r19, r15
    1902:	40 0b       	sbc	r20, r16
    1904:	51 0b       	sbc	r21, r17
    1906:	57 fd       	sbrc	r21, 7
    1908:	08 c0       	rjmp	.+16     	; 0x191a <_fpadd_parts+0x1d4>
    190a:	11 82       	std	Z+1, r1	; 0x01
    190c:	33 82       	std	Z+3, r3	; 0x03
    190e:	22 82       	std	Z+2, r2	; 0x02
    1910:	24 83       	std	Z+4, r18	; 0x04
    1912:	35 83       	std	Z+5, r19	; 0x05
    1914:	46 83       	std	Z+6, r20	; 0x06
    1916:	57 83       	std	Z+7, r21	; 0x07
    1918:	1d c0       	rjmp	.+58     	; 0x1954 <_fpadd_parts+0x20e>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	81 83       	std	Z+1, r24	; 0x01
    191e:	33 82       	std	Z+3, r3	; 0x03
    1920:	22 82       	std	Z+2, r2	; 0x02
    1922:	88 27       	eor	r24, r24
    1924:	99 27       	eor	r25, r25
    1926:	dc 01       	movw	r26, r24
    1928:	82 1b       	sub	r24, r18
    192a:	93 0b       	sbc	r25, r19
    192c:	a4 0b       	sbc	r26, r20
    192e:	b5 0b       	sbc	r27, r21
    1930:	84 83       	std	Z+4, r24	; 0x04
    1932:	95 83       	std	Z+5, r25	; 0x05
    1934:	a6 83       	std	Z+6, r26	; 0x06
    1936:	b7 83       	std	Z+7, r27	; 0x07
    1938:	0d c0       	rjmp	.+26     	; 0x1954 <_fpadd_parts+0x20e>
    193a:	22 0f       	add	r18, r18
    193c:	33 1f       	adc	r19, r19
    193e:	44 1f       	adc	r20, r20
    1940:	55 1f       	adc	r21, r21
    1942:	24 83       	std	Z+4, r18	; 0x04
    1944:	35 83       	std	Z+5, r19	; 0x05
    1946:	46 83       	std	Z+6, r20	; 0x06
    1948:	57 83       	std	Z+7, r21	; 0x07
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	93 83       	std	Z+3, r25	; 0x03
    1952:	82 83       	std	Z+2, r24	; 0x02
    1954:	24 81       	ldd	r18, Z+4	; 0x04
    1956:	35 81       	ldd	r19, Z+5	; 0x05
    1958:	46 81       	ldd	r20, Z+6	; 0x06
    195a:	57 81       	ldd	r21, Z+7	; 0x07
    195c:	da 01       	movw	r26, r20
    195e:	c9 01       	movw	r24, r18
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	a1 09       	sbc	r26, r1
    1964:	b1 09       	sbc	r27, r1
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	af 4f       	sbci	r26, 0xFF	; 255
    196c:	bf 43       	sbci	r27, 0x3F	; 63
    196e:	28 f3       	brcs	.-54     	; 0x193a <_fpadd_parts+0x1f4>
    1970:	0b c0       	rjmp	.+22     	; 0x1988 <_fpadd_parts+0x242>
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	33 82       	std	Z+3, r3	; 0x03
    1976:	22 82       	std	Z+2, r2	; 0x02
    1978:	ea 0c       	add	r14, r10
    197a:	fb 1c       	adc	r15, r11
    197c:	0c 1d       	adc	r16, r12
    197e:	1d 1d       	adc	r17, r13
    1980:	e4 82       	std	Z+4, r14	; 0x04
    1982:	f5 82       	std	Z+5, r15	; 0x05
    1984:	06 83       	std	Z+6, r16	; 0x06
    1986:	17 83       	std	Z+7, r17	; 0x07
    1988:	83 e0       	ldi	r24, 0x03	; 3
    198a:	80 83       	st	Z, r24
    198c:	24 81       	ldd	r18, Z+4	; 0x04
    198e:	35 81       	ldd	r19, Z+5	; 0x05
    1990:	46 81       	ldd	r20, Z+6	; 0x06
    1992:	57 81       	ldd	r21, Z+7	; 0x07
    1994:	57 ff       	sbrs	r21, 7
    1996:	1a c0       	rjmp	.+52     	; 0x19cc <_fpadd_parts+0x286>
    1998:	c9 01       	movw	r24, r18
    199a:	aa 27       	eor	r26, r26
    199c:	97 fd       	sbrc	r25, 7
    199e:	a0 95       	com	r26
    19a0:	ba 2f       	mov	r27, r26
    19a2:	81 70       	andi	r24, 0x01	; 1
    19a4:	90 70       	andi	r25, 0x00	; 0
    19a6:	a0 70       	andi	r26, 0x00	; 0
    19a8:	b0 70       	andi	r27, 0x00	; 0
    19aa:	56 95       	lsr	r21
    19ac:	47 95       	ror	r20
    19ae:	37 95       	ror	r19
    19b0:	27 95       	ror	r18
    19b2:	82 2b       	or	r24, r18
    19b4:	93 2b       	or	r25, r19
    19b6:	a4 2b       	or	r26, r20
    19b8:	b5 2b       	or	r27, r21
    19ba:	84 83       	std	Z+4, r24	; 0x04
    19bc:	95 83       	std	Z+5, r25	; 0x05
    19be:	a6 83       	std	Z+6, r26	; 0x06
    19c0:	b7 83       	std	Z+7, r27	; 0x07
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	93 83       	std	Z+3, r25	; 0x03
    19ca:	82 83       	std	Z+2, r24	; 0x02
    19cc:	df 01       	movw	r26, r30
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <_fpadd_parts+0x28c>
    19d0:	d2 01       	movw	r26, r4
    19d2:	cd 01       	movw	r24, r26
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	e2 e1       	ldi	r30, 0x12	; 18
    19da:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__epilogue_restores__>

000019de <__subsf3>:
    19de:	a0 e2       	ldi	r26, 0x20	; 32
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e5 ef       	ldi	r30, 0xF5	; 245
    19e4:	fc e0       	ldi	r31, 0x0C	; 12
    19e6:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
    19ea:	69 83       	std	Y+1, r22	; 0x01
    19ec:	7a 83       	std	Y+2, r23	; 0x02
    19ee:	8b 83       	std	Y+3, r24	; 0x03
    19f0:	9c 83       	std	Y+4, r25	; 0x04
    19f2:	2d 83       	std	Y+5, r18	; 0x05
    19f4:	3e 83       	std	Y+6, r19	; 0x06
    19f6:	4f 83       	std	Y+7, r20	; 0x07
    19f8:	58 87       	std	Y+8, r21	; 0x08
    19fa:	e9 e0       	ldi	r30, 0x09	; 9
    19fc:	ee 2e       	mov	r14, r30
    19fe:	f1 2c       	mov	r15, r1
    1a00:	ec 0e       	add	r14, r28
    1a02:	fd 1e       	adc	r15, r29
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	b7 01       	movw	r22, r14
    1a0a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1a0e:	8e 01       	movw	r16, r28
    1a10:	0f 5e       	subi	r16, 0xEF	; 239
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	ce 01       	movw	r24, r28
    1a16:	05 96       	adiw	r24, 0x05	; 5
    1a18:	b8 01       	movw	r22, r16
    1a1a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1a1e:	8a 89       	ldd	r24, Y+18	; 0x12
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	89 27       	eor	r24, r25
    1a24:	8a 8b       	std	Y+18, r24	; 0x12
    1a26:	c7 01       	movw	r24, r14
    1a28:	b8 01       	movw	r22, r16
    1a2a:	ae 01       	movw	r20, r28
    1a2c:	47 5e       	subi	r20, 0xE7	; 231
    1a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a30:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_fpadd_parts>
    1a34:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__pack_f>
    1a38:	a0 96       	adiw	r28, 0x20	; 32
    1a3a:	e6 e0       	ldi	r30, 0x06	; 6
    1a3c:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

00001a40 <__addsf3>:
    1a40:	a0 e2       	ldi	r26, 0x20	; 32
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e6 e2       	ldi	r30, 0x26	; 38
    1a46:	fd e0       	ldi	r31, 0x0D	; 13
    1a48:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
    1a4c:	69 83       	std	Y+1, r22	; 0x01
    1a4e:	7a 83       	std	Y+2, r23	; 0x02
    1a50:	8b 83       	std	Y+3, r24	; 0x03
    1a52:	9c 83       	std	Y+4, r25	; 0x04
    1a54:	2d 83       	std	Y+5, r18	; 0x05
    1a56:	3e 83       	std	Y+6, r19	; 0x06
    1a58:	4f 83       	std	Y+7, r20	; 0x07
    1a5a:	58 87       	std	Y+8, r21	; 0x08
    1a5c:	f9 e0       	ldi	r31, 0x09	; 9
    1a5e:	ef 2e       	mov	r14, r31
    1a60:	f1 2c       	mov	r15, r1
    1a62:	ec 0e       	add	r14, r28
    1a64:	fd 1e       	adc	r15, r29
    1a66:	ce 01       	movw	r24, r28
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	b7 01       	movw	r22, r14
    1a6c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1a70:	8e 01       	movw	r16, r28
    1a72:	0f 5e       	subi	r16, 0xEF	; 239
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	ce 01       	movw	r24, r28
    1a78:	05 96       	adiw	r24, 0x05	; 5
    1a7a:	b8 01       	movw	r22, r16
    1a7c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1a80:	c7 01       	movw	r24, r14
    1a82:	b8 01       	movw	r22, r16
    1a84:	ae 01       	movw	r20, r28
    1a86:	47 5e       	subi	r20, 0xE7	; 231
    1a88:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_fpadd_parts>
    1a8e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__pack_f>
    1a92:	a0 96       	adiw	r28, 0x20	; 32
    1a94:	e6 e0       	ldi	r30, 0x06	; 6
    1a96:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

00001a9a <__mulsf3>:
    1a9a:	a0 e2       	ldi	r26, 0x20	; 32
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e3 e5       	ldi	r30, 0x53	; 83
    1aa0:	fd e0       	ldi	r31, 0x0D	; 13
    1aa2:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__prologue_saves__>
    1aa6:	69 83       	std	Y+1, r22	; 0x01
    1aa8:	7a 83       	std	Y+2, r23	; 0x02
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	2d 83       	std	Y+5, r18	; 0x05
    1ab0:	3e 83       	std	Y+6, r19	; 0x06
    1ab2:	4f 83       	std	Y+7, r20	; 0x07
    1ab4:	58 87       	std	Y+8, r21	; 0x08
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	be 01       	movw	r22, r28
    1abc:	67 5f       	subi	r22, 0xF7	; 247
    1abe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	05 96       	adiw	r24, 0x05	; 5
    1ac8:	be 01       	movw	r22, r28
    1aca:	6f 5e       	subi	r22, 0xEF	; 239
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1ad2:	99 85       	ldd	r25, Y+9	; 0x09
    1ad4:	92 30       	cpi	r25, 0x02	; 2
    1ad6:	88 f0       	brcs	.+34     	; 0x1afa <__mulsf3+0x60>
    1ad8:	89 89       	ldd	r24, Y+17	; 0x11
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	c8 f0       	brcs	.+50     	; 0x1b10 <__mulsf3+0x76>
    1ade:	94 30       	cpi	r25, 0x04	; 4
    1ae0:	19 f4       	brne	.+6      	; 0x1ae8 <__mulsf3+0x4e>
    1ae2:	82 30       	cpi	r24, 0x02	; 2
    1ae4:	51 f4       	brne	.+20     	; 0x1afa <__mulsf3+0x60>
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <__mulsf3+0x56>
    1ae8:	84 30       	cpi	r24, 0x04	; 4
    1aea:	29 f4       	brne	.+10     	; 0x1af6 <__mulsf3+0x5c>
    1aec:	92 30       	cpi	r25, 0x02	; 2
    1aee:	81 f4       	brne	.+32     	; 0x1b10 <__mulsf3+0x76>
    1af0:	88 e0       	ldi	r24, 0x08	; 8
    1af2:	92 e0       	ldi	r25, 0x02	; 2
    1af4:	c6 c0       	rjmp	.+396    	; 0x1c82 <__mulsf3+0x1e8>
    1af6:	92 30       	cpi	r25, 0x02	; 2
    1af8:	49 f4       	brne	.+18     	; 0x1b0c <__mulsf3+0x72>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	8a 89       	ldd	r24, Y+18	; 0x12
    1b00:	98 13       	cpse	r25, r24
    1b02:	21 e0       	ldi	r18, 0x01	; 1
    1b04:	2a 87       	std	Y+10, r18	; 0x0a
    1b06:	ce 01       	movw	r24, r28
    1b08:	09 96       	adiw	r24, 0x09	; 9
    1b0a:	bb c0       	rjmp	.+374    	; 0x1c82 <__mulsf3+0x1e8>
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	49 f4       	brne	.+18     	; 0x1b22 <__mulsf3+0x88>
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b14:	8a 89       	ldd	r24, Y+18	; 0x12
    1b16:	98 13       	cpse	r25, r24
    1b18:	21 e0       	ldi	r18, 0x01	; 1
    1b1a:	2a 8b       	std	Y+18, r18	; 0x12
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	41 96       	adiw	r24, 0x11	; 17
    1b20:	b0 c0       	rjmp	.+352    	; 0x1c82 <__mulsf3+0x1e8>
    1b22:	2d 84       	ldd	r2, Y+13	; 0x0d
    1b24:	3e 84       	ldd	r3, Y+14	; 0x0e
    1b26:	4f 84       	ldd	r4, Y+15	; 0x0f
    1b28:	58 88       	ldd	r5, Y+16	; 0x10
    1b2a:	6d 88       	ldd	r6, Y+21	; 0x15
    1b2c:	7e 88       	ldd	r7, Y+22	; 0x16
    1b2e:	8f 88       	ldd	r8, Y+23	; 0x17
    1b30:	98 8c       	ldd	r9, Y+24	; 0x18
    1b32:	ee 24       	eor	r14, r14
    1b34:	ff 24       	eor	r15, r15
    1b36:	87 01       	movw	r16, r14
    1b38:	aa 24       	eor	r10, r10
    1b3a:	bb 24       	eor	r11, r11
    1b3c:	65 01       	movw	r12, r10
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	e0 e0       	ldi	r30, 0x00	; 0
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	c1 01       	movw	r24, r2
    1b4c:	81 70       	andi	r24, 0x01	; 1
    1b4e:	90 70       	andi	r25, 0x00	; 0
    1b50:	89 2b       	or	r24, r25
    1b52:	e9 f0       	breq	.+58     	; 0x1b8e <__mulsf3+0xf4>
    1b54:	e6 0c       	add	r14, r6
    1b56:	f7 1c       	adc	r15, r7
    1b58:	08 1d       	adc	r16, r8
    1b5a:	19 1d       	adc	r17, r9
    1b5c:	9a 01       	movw	r18, r20
    1b5e:	ab 01       	movw	r20, r22
    1b60:	2a 0d       	add	r18, r10
    1b62:	3b 1d       	adc	r19, r11
    1b64:	4c 1d       	adc	r20, r12
    1b66:	5d 1d       	adc	r21, r13
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e0       	ldi	r26, 0x00	; 0
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e6 14       	cp	r14, r6
    1b72:	f7 04       	cpc	r15, r7
    1b74:	08 05       	cpc	r16, r8
    1b76:	19 05       	cpc	r17, r9
    1b78:	20 f4       	brcc	.+8      	; 0x1b82 <__mulsf3+0xe8>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ba 01       	movw	r22, r20
    1b84:	a9 01       	movw	r20, r18
    1b86:	48 0f       	add	r20, r24
    1b88:	59 1f       	adc	r21, r25
    1b8a:	6a 1f       	adc	r22, r26
    1b8c:	7b 1f       	adc	r23, r27
    1b8e:	aa 0c       	add	r10, r10
    1b90:	bb 1c       	adc	r11, r11
    1b92:	cc 1c       	adc	r12, r12
    1b94:	dd 1c       	adc	r13, r13
    1b96:	97 fe       	sbrs	r9, 7
    1b98:	08 c0       	rjmp	.+16     	; 0x1baa <__mulsf3+0x110>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	a8 2a       	or	r10, r24
    1ba4:	b9 2a       	or	r11, r25
    1ba6:	ca 2a       	or	r12, r26
    1ba8:	db 2a       	or	r13, r27
    1baa:	31 96       	adiw	r30, 0x01	; 1
    1bac:	e0 32       	cpi	r30, 0x20	; 32
    1bae:	f1 05       	cpc	r31, r1
    1bb0:	49 f0       	breq	.+18     	; 0x1bc4 <__mulsf3+0x12a>
    1bb2:	66 0c       	add	r6, r6
    1bb4:	77 1c       	adc	r7, r7
    1bb6:	88 1c       	adc	r8, r8
    1bb8:	99 1c       	adc	r9, r9
    1bba:	56 94       	lsr	r5
    1bbc:	47 94       	ror	r4
    1bbe:	37 94       	ror	r3
    1bc0:	27 94       	ror	r2
    1bc2:	c3 cf       	rjmp	.-122    	; 0x1b4a <__mulsf3+0xb0>
    1bc4:	fa 85       	ldd	r31, Y+10	; 0x0a
    1bc6:	ea 89       	ldd	r30, Y+18	; 0x12
    1bc8:	2b 89       	ldd	r18, Y+19	; 0x13
    1bca:	3c 89       	ldd	r19, Y+20	; 0x14
    1bcc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bce:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bd0:	28 0f       	add	r18, r24
    1bd2:	39 1f       	adc	r19, r25
    1bd4:	2e 5f       	subi	r18, 0xFE	; 254
    1bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd8:	17 c0       	rjmp	.+46     	; 0x1c08 <__mulsf3+0x16e>
    1bda:	ca 01       	movw	r24, r20
    1bdc:	81 70       	andi	r24, 0x01	; 1
    1bde:	90 70       	andi	r25, 0x00	; 0
    1be0:	89 2b       	or	r24, r25
    1be2:	61 f0       	breq	.+24     	; 0x1bfc <__mulsf3+0x162>
    1be4:	16 95       	lsr	r17
    1be6:	07 95       	ror	r16
    1be8:	f7 94       	ror	r15
    1bea:	e7 94       	ror	r14
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e0       	ldi	r26, 0x00	; 0
    1bf2:	b0 e8       	ldi	r27, 0x80	; 128
    1bf4:	e8 2a       	or	r14, r24
    1bf6:	f9 2a       	or	r15, r25
    1bf8:	0a 2b       	or	r16, r26
    1bfa:	1b 2b       	or	r17, r27
    1bfc:	76 95       	lsr	r23
    1bfe:	67 95       	ror	r22
    1c00:	57 95       	ror	r21
    1c02:	47 95       	ror	r20
    1c04:	2f 5f       	subi	r18, 0xFF	; 255
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	77 fd       	sbrc	r23, 7
    1c0a:	e7 cf       	rjmp	.-50     	; 0x1bda <__mulsf3+0x140>
    1c0c:	0c c0       	rjmp	.+24     	; 0x1c26 <__mulsf3+0x18c>
    1c0e:	44 0f       	add	r20, r20
    1c10:	55 1f       	adc	r21, r21
    1c12:	66 1f       	adc	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	17 fd       	sbrc	r17, 7
    1c18:	41 60       	ori	r20, 0x01	; 1
    1c1a:	ee 0c       	add	r14, r14
    1c1c:	ff 1c       	adc	r15, r15
    1c1e:	00 1f       	adc	r16, r16
    1c20:	11 1f       	adc	r17, r17
    1c22:	21 50       	subi	r18, 0x01	; 1
    1c24:	30 40       	sbci	r19, 0x00	; 0
    1c26:	40 30       	cpi	r20, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	59 07       	cpc	r21, r25
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	69 07       	cpc	r22, r25
    1c30:	90 e4       	ldi	r25, 0x40	; 64
    1c32:	79 07       	cpc	r23, r25
    1c34:	60 f3       	brcs	.-40     	; 0x1c0e <__mulsf3+0x174>
    1c36:	2b 8f       	std	Y+27, r18	; 0x1b
    1c38:	3c 8f       	std	Y+28, r19	; 0x1c
    1c3a:	db 01       	movw	r26, r22
    1c3c:	ca 01       	movw	r24, r20
    1c3e:	8f 77       	andi	r24, 0x7F	; 127
    1c40:	90 70       	andi	r25, 0x00	; 0
    1c42:	a0 70       	andi	r26, 0x00	; 0
    1c44:	b0 70       	andi	r27, 0x00	; 0
    1c46:	80 34       	cpi	r24, 0x40	; 64
    1c48:	91 05       	cpc	r25, r1
    1c4a:	a1 05       	cpc	r26, r1
    1c4c:	b1 05       	cpc	r27, r1
    1c4e:	61 f4       	brne	.+24     	; 0x1c68 <__mulsf3+0x1ce>
    1c50:	47 fd       	sbrc	r20, 7
    1c52:	0a c0       	rjmp	.+20     	; 0x1c68 <__mulsf3+0x1ce>
    1c54:	e1 14       	cp	r14, r1
    1c56:	f1 04       	cpc	r15, r1
    1c58:	01 05       	cpc	r16, r1
    1c5a:	11 05       	cpc	r17, r1
    1c5c:	29 f0       	breq	.+10     	; 0x1c68 <__mulsf3+0x1ce>
    1c5e:	40 5c       	subi	r20, 0xC0	; 192
    1c60:	5f 4f       	sbci	r21, 0xFF	; 255
    1c62:	6f 4f       	sbci	r22, 0xFF	; 255
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	40 78       	andi	r20, 0x80	; 128
    1c68:	1a 8e       	std	Y+26, r1	; 0x1a
    1c6a:	fe 17       	cp	r31, r30
    1c6c:	11 f0       	breq	.+4      	; 0x1c72 <__mulsf3+0x1d8>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	8a 8f       	std	Y+26, r24	; 0x1a
    1c72:	4d 8f       	std	Y+29, r20	; 0x1d
    1c74:	5e 8f       	std	Y+30, r21	; 0x1e
    1c76:	6f 8f       	std	Y+31, r22	; 0x1f
    1c78:	78 a3       	std	Y+32, r23	; 0x20
    1c7a:	83 e0       	ldi	r24, 0x03	; 3
    1c7c:	89 8f       	std	Y+25, r24	; 0x19
    1c7e:	ce 01       	movw	r24, r28
    1c80:	49 96       	adiw	r24, 0x19	; 25
    1c82:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__pack_f>
    1c86:	a0 96       	adiw	r28, 0x20	; 32
    1c88:	e2 e1       	ldi	r30, 0x12	; 18
    1c8a:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__epilogue_restores__>

00001c8e <__divsf3>:
    1c8e:	a8 e1       	ldi	r26, 0x18	; 24
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ed e4       	ldi	r30, 0x4D	; 77
    1c94:	fe e0       	ldi	r31, 0x0E	; 14
    1c96:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__+0x10>
    1c9a:	69 83       	std	Y+1, r22	; 0x01
    1c9c:	7a 83       	std	Y+2, r23	; 0x02
    1c9e:	8b 83       	std	Y+3, r24	; 0x03
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	2d 83       	std	Y+5, r18	; 0x05
    1ca4:	3e 83       	std	Y+6, r19	; 0x06
    1ca6:	4f 83       	std	Y+7, r20	; 0x07
    1ca8:	58 87       	std	Y+8, r21	; 0x08
    1caa:	b9 e0       	ldi	r27, 0x09	; 9
    1cac:	eb 2e       	mov	r14, r27
    1cae:	f1 2c       	mov	r15, r1
    1cb0:	ec 0e       	add	r14, r28
    1cb2:	fd 1e       	adc	r15, r29
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	b7 01       	movw	r22, r14
    1cba:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1cbe:	8e 01       	movw	r16, r28
    1cc0:	0f 5e       	subi	r16, 0xEF	; 239
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	05 96       	adiw	r24, 0x05	; 5
    1cc8:	b8 01       	movw	r22, r16
    1cca:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1cce:	29 85       	ldd	r18, Y+9	; 0x09
    1cd0:	22 30       	cpi	r18, 0x02	; 2
    1cd2:	08 f4       	brcc	.+2      	; 0x1cd6 <__divsf3+0x48>
    1cd4:	7e c0       	rjmp	.+252    	; 0x1dd2 <__divsf3+0x144>
    1cd6:	39 89       	ldd	r19, Y+17	; 0x11
    1cd8:	32 30       	cpi	r19, 0x02	; 2
    1cda:	10 f4       	brcc	.+4      	; 0x1ce0 <__divsf3+0x52>
    1cdc:	b8 01       	movw	r22, r16
    1cde:	7c c0       	rjmp	.+248    	; 0x1dd8 <__divsf3+0x14a>
    1ce0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce4:	89 27       	eor	r24, r25
    1ce6:	8a 87       	std	Y+10, r24	; 0x0a
    1ce8:	24 30       	cpi	r18, 0x04	; 4
    1cea:	11 f0       	breq	.+4      	; 0x1cf0 <__divsf3+0x62>
    1cec:	22 30       	cpi	r18, 0x02	; 2
    1cee:	31 f4       	brne	.+12     	; 0x1cfc <__divsf3+0x6e>
    1cf0:	23 17       	cp	r18, r19
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <__divsf3+0x68>
    1cf4:	6e c0       	rjmp	.+220    	; 0x1dd2 <__divsf3+0x144>
    1cf6:	68 e0       	ldi	r22, 0x08	; 8
    1cf8:	72 e0       	ldi	r23, 0x02	; 2
    1cfa:	6e c0       	rjmp	.+220    	; 0x1dd8 <__divsf3+0x14a>
    1cfc:	34 30       	cpi	r19, 0x04	; 4
    1cfe:	39 f4       	brne	.+14     	; 0x1d0e <__divsf3+0x80>
    1d00:	1d 86       	std	Y+13, r1	; 0x0d
    1d02:	1e 86       	std	Y+14, r1	; 0x0e
    1d04:	1f 86       	std	Y+15, r1	; 0x0f
    1d06:	18 8a       	std	Y+16, r1	; 0x10
    1d08:	1c 86       	std	Y+12, r1	; 0x0c
    1d0a:	1b 86       	std	Y+11, r1	; 0x0b
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <__divsf3+0x88>
    1d0e:	32 30       	cpi	r19, 0x02	; 2
    1d10:	21 f4       	brne	.+8      	; 0x1d1a <__divsf3+0x8c>
    1d12:	84 e0       	ldi	r24, 0x04	; 4
    1d14:	89 87       	std	Y+9, r24	; 0x09
    1d16:	b7 01       	movw	r22, r14
    1d18:	5f c0       	rjmp	.+190    	; 0x1dd8 <__divsf3+0x14a>
    1d1a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d1c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d20:	9c 89       	ldd	r25, Y+20	; 0x14
    1d22:	28 1b       	sub	r18, r24
    1d24:	39 0b       	sbc	r19, r25
    1d26:	3c 87       	std	Y+12, r19	; 0x0c
    1d28:	2b 87       	std	Y+11, r18	; 0x0b
    1d2a:	ed 84       	ldd	r14, Y+13	; 0x0d
    1d2c:	fe 84       	ldd	r15, Y+14	; 0x0e
    1d2e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1d30:	18 89       	ldd	r17, Y+16	; 0x10
    1d32:	ad 88       	ldd	r10, Y+21	; 0x15
    1d34:	be 88       	ldd	r11, Y+22	; 0x16
    1d36:	cf 88       	ldd	r12, Y+23	; 0x17
    1d38:	d8 8c       	ldd	r13, Y+24	; 0x18
    1d3a:	ea 14       	cp	r14, r10
    1d3c:	fb 04       	cpc	r15, r11
    1d3e:	0c 05       	cpc	r16, r12
    1d40:	1d 05       	cpc	r17, r13
    1d42:	40 f4       	brcc	.+16     	; 0x1d54 <__divsf3+0xc6>
    1d44:	ee 0c       	add	r14, r14
    1d46:	ff 1c       	adc	r15, r15
    1d48:	00 1f       	adc	r16, r16
    1d4a:	11 1f       	adc	r17, r17
    1d4c:	21 50       	subi	r18, 0x01	; 1
    1d4e:	30 40       	sbci	r19, 0x00	; 0
    1d50:	3c 87       	std	Y+12, r19	; 0x0c
    1d52:	2b 87       	std	Y+11, r18	; 0x0b
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e4       	ldi	r27, 0x40	; 64
    1d64:	60 e0       	ldi	r22, 0x00	; 0
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	ea 14       	cp	r14, r10
    1d6a:	fb 04       	cpc	r15, r11
    1d6c:	0c 05       	cpc	r16, r12
    1d6e:	1d 05       	cpc	r17, r13
    1d70:	40 f0       	brcs	.+16     	; 0x1d82 <__divsf3+0xf4>
    1d72:	28 2b       	or	r18, r24
    1d74:	39 2b       	or	r19, r25
    1d76:	4a 2b       	or	r20, r26
    1d78:	5b 2b       	or	r21, r27
    1d7a:	ea 18       	sub	r14, r10
    1d7c:	fb 08       	sbc	r15, r11
    1d7e:	0c 09       	sbc	r16, r12
    1d80:	1d 09       	sbc	r17, r13
    1d82:	b6 95       	lsr	r27
    1d84:	a7 95       	ror	r26
    1d86:	97 95       	ror	r25
    1d88:	87 95       	ror	r24
    1d8a:	ee 0c       	add	r14, r14
    1d8c:	ff 1c       	adc	r15, r15
    1d8e:	00 1f       	adc	r16, r16
    1d90:	11 1f       	adc	r17, r17
    1d92:	6f 5f       	subi	r22, 0xFF	; 255
    1d94:	7f 4f       	sbci	r23, 0xFF	; 255
    1d96:	6f 31       	cpi	r22, 0x1F	; 31
    1d98:	71 05       	cpc	r23, r1
    1d9a:	31 f7       	brne	.-52     	; 0x1d68 <__divsf3+0xda>
    1d9c:	da 01       	movw	r26, r20
    1d9e:	c9 01       	movw	r24, r18
    1da0:	8f 77       	andi	r24, 0x7F	; 127
    1da2:	90 70       	andi	r25, 0x00	; 0
    1da4:	a0 70       	andi	r26, 0x00	; 0
    1da6:	b0 70       	andi	r27, 0x00	; 0
    1da8:	80 34       	cpi	r24, 0x40	; 64
    1daa:	91 05       	cpc	r25, r1
    1dac:	a1 05       	cpc	r26, r1
    1dae:	b1 05       	cpc	r27, r1
    1db0:	61 f4       	brne	.+24     	; 0x1dca <__divsf3+0x13c>
    1db2:	27 fd       	sbrc	r18, 7
    1db4:	0a c0       	rjmp	.+20     	; 0x1dca <__divsf3+0x13c>
    1db6:	e1 14       	cp	r14, r1
    1db8:	f1 04       	cpc	r15, r1
    1dba:	01 05       	cpc	r16, r1
    1dbc:	11 05       	cpc	r17, r1
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <__divsf3+0x13c>
    1dc0:	20 5c       	subi	r18, 0xC0	; 192
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	4f 4f       	sbci	r20, 0xFF	; 255
    1dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc8:	20 78       	andi	r18, 0x80	; 128
    1dca:	2d 87       	std	Y+13, r18	; 0x0d
    1dcc:	3e 87       	std	Y+14, r19	; 0x0e
    1dce:	4f 87       	std	Y+15, r20	; 0x0f
    1dd0:	58 8b       	std	Y+16, r21	; 0x10
    1dd2:	be 01       	movw	r22, r28
    1dd4:	67 5f       	subi	r22, 0xF7	; 247
    1dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd8:	cb 01       	movw	r24, r22
    1dda:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__pack_f>
    1dde:	68 96       	adiw	r28, 0x18	; 24
    1de0:	ea e0       	ldi	r30, 0x0A	; 10
    1de2:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__+0x10>

00001de6 <__gtsf2>:
    1de6:	a8 e1       	ldi	r26, 0x18	; 24
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e9 ef       	ldi	r30, 0xF9	; 249
    1dec:	fe e0       	ldi	r31, 0x0E	; 14
    1dee:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
    1df2:	69 83       	std	Y+1, r22	; 0x01
    1df4:	7a 83       	std	Y+2, r23	; 0x02
    1df6:	8b 83       	std	Y+3, r24	; 0x03
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	2d 83       	std	Y+5, r18	; 0x05
    1dfc:	3e 83       	std	Y+6, r19	; 0x06
    1dfe:	4f 83       	std	Y+7, r20	; 0x07
    1e00:	58 87       	std	Y+8, r21	; 0x08
    1e02:	89 e0       	ldi	r24, 0x09	; 9
    1e04:	e8 2e       	mov	r14, r24
    1e06:	f1 2c       	mov	r15, r1
    1e08:	ec 0e       	add	r14, r28
    1e0a:	fd 1e       	adc	r15, r29
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	01 96       	adiw	r24, 0x01	; 1
    1e10:	b7 01       	movw	r22, r14
    1e12:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1e16:	8e 01       	movw	r16, r28
    1e18:	0f 5e       	subi	r16, 0xEF	; 239
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	05 96       	adiw	r24, 0x05	; 5
    1e20:	b8 01       	movw	r22, r16
    1e22:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1e26:	89 85       	ldd	r24, Y+9	; 0x09
    1e28:	82 30       	cpi	r24, 0x02	; 2
    1e2a:	40 f0       	brcs	.+16     	; 0x1e3c <__gtsf2+0x56>
    1e2c:	89 89       	ldd	r24, Y+17	; 0x11
    1e2e:	82 30       	cpi	r24, 0x02	; 2
    1e30:	28 f0       	brcs	.+10     	; 0x1e3c <__gtsf2+0x56>
    1e32:	c7 01       	movw	r24, r14
    1e34:	b8 01       	movw	r22, r16
    1e36:	0e 94 4a 12 	call	0x2494	; 0x2494 <__fpcmp_parts_f>
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <__gtsf2+0x58>
    1e3c:	8f ef       	ldi	r24, 0xFF	; 255
    1e3e:	68 96       	adiw	r28, 0x18	; 24
    1e40:	e6 e0       	ldi	r30, 0x06	; 6
    1e42:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

00001e46 <__gesf2>:
    1e46:	a8 e1       	ldi	r26, 0x18	; 24
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e9 e2       	ldi	r30, 0x29	; 41
    1e4c:	ff e0       	ldi	r31, 0x0F	; 15
    1e4e:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
    1e52:	69 83       	std	Y+1, r22	; 0x01
    1e54:	7a 83       	std	Y+2, r23	; 0x02
    1e56:	8b 83       	std	Y+3, r24	; 0x03
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	2d 83       	std	Y+5, r18	; 0x05
    1e5c:	3e 83       	std	Y+6, r19	; 0x06
    1e5e:	4f 83       	std	Y+7, r20	; 0x07
    1e60:	58 87       	std	Y+8, r21	; 0x08
    1e62:	89 e0       	ldi	r24, 0x09	; 9
    1e64:	e8 2e       	mov	r14, r24
    1e66:	f1 2c       	mov	r15, r1
    1e68:	ec 0e       	add	r14, r28
    1e6a:	fd 1e       	adc	r15, r29
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	b7 01       	movw	r22, r14
    1e72:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1e76:	8e 01       	movw	r16, r28
    1e78:	0f 5e       	subi	r16, 0xEF	; 239
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	05 96       	adiw	r24, 0x05	; 5
    1e80:	b8 01       	movw	r22, r16
    1e82:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1e86:	89 85       	ldd	r24, Y+9	; 0x09
    1e88:	82 30       	cpi	r24, 0x02	; 2
    1e8a:	40 f0       	brcs	.+16     	; 0x1e9c <__gesf2+0x56>
    1e8c:	89 89       	ldd	r24, Y+17	; 0x11
    1e8e:	82 30       	cpi	r24, 0x02	; 2
    1e90:	28 f0       	brcs	.+10     	; 0x1e9c <__gesf2+0x56>
    1e92:	c7 01       	movw	r24, r14
    1e94:	b8 01       	movw	r22, r16
    1e96:	0e 94 4a 12 	call	0x2494	; 0x2494 <__fpcmp_parts_f>
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <__gesf2+0x58>
    1e9c:	8f ef       	ldi	r24, 0xFF	; 255
    1e9e:	68 96       	adiw	r28, 0x18	; 24
    1ea0:	e6 e0       	ldi	r30, 0x06	; 6
    1ea2:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

00001ea6 <__ltsf2>:
    1ea6:	a8 e1       	ldi	r26, 0x18	; 24
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e9 e5       	ldi	r30, 0x59	; 89
    1eac:	ff e0       	ldi	r31, 0x0F	; 15
    1eae:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x18>
    1eb2:	69 83       	std	Y+1, r22	; 0x01
    1eb4:	7a 83       	std	Y+2, r23	; 0x02
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	2d 83       	std	Y+5, r18	; 0x05
    1ebc:	3e 83       	std	Y+6, r19	; 0x06
    1ebe:	4f 83       	std	Y+7, r20	; 0x07
    1ec0:	58 87       	std	Y+8, r21	; 0x08
    1ec2:	89 e0       	ldi	r24, 0x09	; 9
    1ec4:	e8 2e       	mov	r14, r24
    1ec6:	f1 2c       	mov	r15, r1
    1ec8:	ec 0e       	add	r14, r28
    1eca:	fd 1e       	adc	r15, r29
    1ecc:	ce 01       	movw	r24, r28
    1ece:	01 96       	adiw	r24, 0x01	; 1
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1ed6:	8e 01       	movw	r16, r28
    1ed8:	0f 5e       	subi	r16, 0xEF	; 239
    1eda:	1f 4f       	sbci	r17, 0xFF	; 255
    1edc:	ce 01       	movw	r24, r28
    1ede:	05 96       	adiw	r24, 0x05	; 5
    1ee0:	b8 01       	movw	r22, r16
    1ee2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	82 30       	cpi	r24, 0x02	; 2
    1eea:	40 f0       	brcs	.+16     	; 0x1efc <__ltsf2+0x56>
    1eec:	89 89       	ldd	r24, Y+17	; 0x11
    1eee:	82 30       	cpi	r24, 0x02	; 2
    1ef0:	28 f0       	brcs	.+10     	; 0x1efc <__ltsf2+0x56>
    1ef2:	c7 01       	movw	r24, r14
    1ef4:	b8 01       	movw	r22, r16
    1ef6:	0e 94 4a 12 	call	0x2494	; 0x2494 <__fpcmp_parts_f>
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <__ltsf2+0x58>
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	68 96       	adiw	r28, 0x18	; 24
    1f00:	e6 e0       	ldi	r30, 0x06	; 6
    1f02:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x18>

00001f06 <__floatsisf>:
    1f06:	a8 e0       	ldi	r26, 0x08	; 8
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e8       	ldi	r30, 0x89	; 137
    1f0c:	ff e0       	ldi	r31, 0x0F	; 15
    1f0e:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x12>
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	da 01       	movw	r26, r20
    1f1c:	c9 01       	movw	r24, r18
    1f1e:	88 27       	eor	r24, r24
    1f20:	b7 fd       	sbrc	r27, 7
    1f22:	83 95       	inc	r24
    1f24:	99 27       	eor	r25, r25
    1f26:	aa 27       	eor	r26, r26
    1f28:	bb 27       	eor	r27, r27
    1f2a:	b8 2e       	mov	r11, r24
    1f2c:	21 15       	cp	r18, r1
    1f2e:	31 05       	cpc	r19, r1
    1f30:	41 05       	cpc	r20, r1
    1f32:	51 05       	cpc	r21, r1
    1f34:	19 f4       	brne	.+6      	; 0x1f3c <__floatsisf+0x36>
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	3a c0       	rjmp	.+116    	; 0x1fb0 <__floatsisf+0xaa>
    1f3c:	88 23       	and	r24, r24
    1f3e:	a9 f0       	breq	.+42     	; 0x1f6a <__floatsisf+0x64>
    1f40:	20 30       	cpi	r18, 0x00	; 0
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	38 07       	cpc	r19, r24
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	48 07       	cpc	r20, r24
    1f4a:	80 e8       	ldi	r24, 0x80	; 128
    1f4c:	58 07       	cpc	r21, r24
    1f4e:	29 f4       	brne	.+10     	; 0x1f5a <__floatsisf+0x54>
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	9f ec       	ldi	r25, 0xCF	; 207
    1f58:	30 c0       	rjmp	.+96     	; 0x1fba <__floatsisf+0xb4>
    1f5a:	ee 24       	eor	r14, r14
    1f5c:	ff 24       	eor	r15, r15
    1f5e:	87 01       	movw	r16, r14
    1f60:	e2 1a       	sub	r14, r18
    1f62:	f3 0a       	sbc	r15, r19
    1f64:	04 0b       	sbc	r16, r20
    1f66:	15 0b       	sbc	r17, r21
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <__floatsisf+0x68>
    1f6a:	79 01       	movw	r14, r18
    1f6c:	8a 01       	movw	r16, r20
    1f6e:	8e e1       	ldi	r24, 0x1E	; 30
    1f70:	c8 2e       	mov	r12, r24
    1f72:	d1 2c       	mov	r13, r1
    1f74:	dc 82       	std	Y+4, r13	; 0x04
    1f76:	cb 82       	std	Y+3, r12	; 0x03
    1f78:	ed 82       	std	Y+5, r14	; 0x05
    1f7a:	fe 82       	std	Y+6, r15	; 0x06
    1f7c:	0f 83       	std	Y+7, r16	; 0x07
    1f7e:	18 87       	std	Y+8, r17	; 0x08
    1f80:	c8 01       	movw	r24, r16
    1f82:	b7 01       	movw	r22, r14
    1f84:	0e 94 ae 10 	call	0x215c	; 0x215c <__clzsi2>
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	18 16       	cp	r1, r24
    1f8c:	19 06       	cpc	r1, r25
    1f8e:	84 f4       	brge	.+32     	; 0x1fb0 <__floatsisf+0xaa>
    1f90:	08 2e       	mov	r0, r24
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <__floatsisf+0x96>
    1f94:	ee 0c       	add	r14, r14
    1f96:	ff 1c       	adc	r15, r15
    1f98:	00 1f       	adc	r16, r16
    1f9a:	11 1f       	adc	r17, r17
    1f9c:	0a 94       	dec	r0
    1f9e:	d2 f7       	brpl	.-12     	; 0x1f94 <__floatsisf+0x8e>
    1fa0:	ed 82       	std	Y+5, r14	; 0x05
    1fa2:	fe 82       	std	Y+6, r15	; 0x06
    1fa4:	0f 83       	std	Y+7, r16	; 0x07
    1fa6:	18 87       	std	Y+8, r17	; 0x08
    1fa8:	c8 1a       	sub	r12, r24
    1faa:	d9 0a       	sbc	r13, r25
    1fac:	dc 82       	std	Y+4, r13	; 0x04
    1fae:	cb 82       	std	Y+3, r12	; 0x03
    1fb0:	ba 82       	std	Y+2, r11	; 0x02
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	01 96       	adiw	r24, 0x01	; 1
    1fb6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__pack_f>
    1fba:	28 96       	adiw	r28, 0x08	; 8
    1fbc:	e9 e0       	ldi	r30, 0x09	; 9
    1fbe:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x12>

00001fc2 <__fixsfsi>:
    1fc2:	ac e0       	ldi	r26, 0x0C	; 12
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e7 ee       	ldi	r30, 0xE7	; 231
    1fc8:	ff e0       	ldi	r31, 0x0F	; 15
    1fca:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x20>
    1fce:	69 83       	std	Y+1, r22	; 0x01
    1fd0:	7a 83       	std	Y+2, r23	; 0x02
    1fd2:	8b 83       	std	Y+3, r24	; 0x03
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	be 01       	movw	r22, r28
    1fdc:	6b 5f       	subi	r22, 0xFB	; 251
    1fde:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__unpack_f>
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	82 30       	cpi	r24, 0x02	; 2
    1fe8:	61 f1       	breq	.+88     	; 0x2042 <__fixsfsi+0x80>
    1fea:	82 30       	cpi	r24, 0x02	; 2
    1fec:	50 f1       	brcs	.+84     	; 0x2042 <__fixsfsi+0x80>
    1fee:	84 30       	cpi	r24, 0x04	; 4
    1ff0:	21 f4       	brne	.+8      	; 0x1ffa <__fixsfsi+0x38>
    1ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff4:	88 23       	and	r24, r24
    1ff6:	51 f1       	breq	.+84     	; 0x204c <__fixsfsi+0x8a>
    1ff8:	2e c0       	rjmp	.+92     	; 0x2056 <__fixsfsi+0x94>
    1ffa:	2f 81       	ldd	r18, Y+7	; 0x07
    1ffc:	38 85       	ldd	r19, Y+8	; 0x08
    1ffe:	37 fd       	sbrc	r19, 7
    2000:	20 c0       	rjmp	.+64     	; 0x2042 <__fixsfsi+0x80>
    2002:	6e 81       	ldd	r22, Y+6	; 0x06
    2004:	2f 31       	cpi	r18, 0x1F	; 31
    2006:	31 05       	cpc	r19, r1
    2008:	1c f0       	brlt	.+6      	; 0x2010 <__fixsfsi+0x4e>
    200a:	66 23       	and	r22, r22
    200c:	f9 f0       	breq	.+62     	; 0x204c <__fixsfsi+0x8a>
    200e:	23 c0       	rjmp	.+70     	; 0x2056 <__fixsfsi+0x94>
    2010:	8e e1       	ldi	r24, 0x1E	; 30
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	82 1b       	sub	r24, r18
    2016:	93 0b       	sbc	r25, r19
    2018:	29 85       	ldd	r18, Y+9	; 0x09
    201a:	3a 85       	ldd	r19, Y+10	; 0x0a
    201c:	4b 85       	ldd	r20, Y+11	; 0x0b
    201e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2020:	04 c0       	rjmp	.+8      	; 0x202a <__fixsfsi+0x68>
    2022:	56 95       	lsr	r21
    2024:	47 95       	ror	r20
    2026:	37 95       	ror	r19
    2028:	27 95       	ror	r18
    202a:	8a 95       	dec	r24
    202c:	d2 f7       	brpl	.-12     	; 0x2022 <__fixsfsi+0x60>
    202e:	66 23       	and	r22, r22
    2030:	b1 f0       	breq	.+44     	; 0x205e <__fixsfsi+0x9c>
    2032:	50 95       	com	r21
    2034:	40 95       	com	r20
    2036:	30 95       	com	r19
    2038:	21 95       	neg	r18
    203a:	3f 4f       	sbci	r19, 0xFF	; 255
    203c:	4f 4f       	sbci	r20, 0xFF	; 255
    203e:	5f 4f       	sbci	r21, 0xFF	; 255
    2040:	0e c0       	rjmp	.+28     	; 0x205e <__fixsfsi+0x9c>
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	50 e0       	ldi	r21, 0x00	; 0
    204a:	09 c0       	rjmp	.+18     	; 0x205e <__fixsfsi+0x9c>
    204c:	2f ef       	ldi	r18, 0xFF	; 255
    204e:	3f ef       	ldi	r19, 0xFF	; 255
    2050:	4f ef       	ldi	r20, 0xFF	; 255
    2052:	5f e7       	ldi	r21, 0x7F	; 127
    2054:	04 c0       	rjmp	.+8      	; 0x205e <__fixsfsi+0x9c>
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	50 e8       	ldi	r21, 0x80	; 128
    205e:	b9 01       	movw	r22, r18
    2060:	ca 01       	movw	r24, r20
    2062:	2c 96       	adiw	r28, 0x0c	; 12
    2064:	e2 e0       	ldi	r30, 0x02	; 2
    2066:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x20>

0000206a <__floatunsisf>:
    206a:	a8 e0       	ldi	r26, 0x08	; 8
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	eb e3       	ldi	r30, 0x3B	; 59
    2070:	f0 e1       	ldi	r31, 0x10	; 16
    2072:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__+0x10>
    2076:	7b 01       	movw	r14, r22
    2078:	8c 01       	movw	r16, r24
    207a:	61 15       	cp	r22, r1
    207c:	71 05       	cpc	r23, r1
    207e:	81 05       	cpc	r24, r1
    2080:	91 05       	cpc	r25, r1
    2082:	19 f4       	brne	.+6      	; 0x208a <__floatunsisf+0x20>
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	60 c0       	rjmp	.+192    	; 0x214a <__floatunsisf+0xe0>
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	8e e1       	ldi	r24, 0x1E	; 30
    2090:	c8 2e       	mov	r12, r24
    2092:	d1 2c       	mov	r13, r1
    2094:	dc 82       	std	Y+4, r13	; 0x04
    2096:	cb 82       	std	Y+3, r12	; 0x03
    2098:	ed 82       	std	Y+5, r14	; 0x05
    209a:	fe 82       	std	Y+6, r15	; 0x06
    209c:	0f 83       	std	Y+7, r16	; 0x07
    209e:	18 87       	std	Y+8, r17	; 0x08
    20a0:	c8 01       	movw	r24, r16
    20a2:	b7 01       	movw	r22, r14
    20a4:	0e 94 ae 10 	call	0x215c	; 0x215c <__clzsi2>
    20a8:	fc 01       	movw	r30, r24
    20aa:	31 97       	sbiw	r30, 0x01	; 1
    20ac:	f7 ff       	sbrs	r31, 7
    20ae:	3b c0       	rjmp	.+118    	; 0x2126 <__floatunsisf+0xbc>
    20b0:	22 27       	eor	r18, r18
    20b2:	33 27       	eor	r19, r19
    20b4:	2e 1b       	sub	r18, r30
    20b6:	3f 0b       	sbc	r19, r31
    20b8:	57 01       	movw	r10, r14
    20ba:	68 01       	movw	r12, r16
    20bc:	02 2e       	mov	r0, r18
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <__floatunsisf+0x5e>
    20c0:	d6 94       	lsr	r13
    20c2:	c7 94       	ror	r12
    20c4:	b7 94       	ror	r11
    20c6:	a7 94       	ror	r10
    20c8:	0a 94       	dec	r0
    20ca:	d2 f7       	brpl	.-12     	; 0x20c0 <__floatunsisf+0x56>
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 e0       	ldi	r26, 0x00	; 0
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	04 c0       	rjmp	.+8      	; 0x20e6 <__floatunsisf+0x7c>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	aa 1f       	adc	r26, r26
    20e4:	bb 1f       	adc	r27, r27
    20e6:	2a 95       	dec	r18
    20e8:	d2 f7       	brpl	.-12     	; 0x20de <__floatunsisf+0x74>
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	a1 09       	sbc	r26, r1
    20ee:	b1 09       	sbc	r27, r1
    20f0:	8e 21       	and	r24, r14
    20f2:	9f 21       	and	r25, r15
    20f4:	a0 23       	and	r26, r16
    20f6:	b1 23       	and	r27, r17
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	a1 05       	cpc	r26, r1
    20fc:	b1 05       	cpc	r27, r1
    20fe:	21 f0       	breq	.+8      	; 0x2108 <__floatunsisf+0x9e>
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	4a 29       	or	r20, r10
    210a:	5b 29       	or	r21, r11
    210c:	6c 29       	or	r22, r12
    210e:	7d 29       	or	r23, r13
    2110:	4d 83       	std	Y+5, r20	; 0x05
    2112:	5e 83       	std	Y+6, r21	; 0x06
    2114:	6f 83       	std	Y+7, r22	; 0x07
    2116:	78 87       	std	Y+8, r23	; 0x08
    2118:	8e e1       	ldi	r24, 0x1E	; 30
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	8e 1b       	sub	r24, r30
    211e:	9f 0b       	sbc	r25, r31
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	8b 83       	std	Y+3, r24	; 0x03
    2124:	12 c0       	rjmp	.+36     	; 0x214a <__floatunsisf+0xe0>
    2126:	30 97       	sbiw	r30, 0x00	; 0
    2128:	81 f0       	breq	.+32     	; 0x214a <__floatunsisf+0xe0>
    212a:	0e 2e       	mov	r0, r30
    212c:	04 c0       	rjmp	.+8      	; 0x2136 <__floatunsisf+0xcc>
    212e:	ee 0c       	add	r14, r14
    2130:	ff 1c       	adc	r15, r15
    2132:	00 1f       	adc	r16, r16
    2134:	11 1f       	adc	r17, r17
    2136:	0a 94       	dec	r0
    2138:	d2 f7       	brpl	.-12     	; 0x212e <__floatunsisf+0xc4>
    213a:	ed 82       	std	Y+5, r14	; 0x05
    213c:	fe 82       	std	Y+6, r15	; 0x06
    213e:	0f 83       	std	Y+7, r16	; 0x07
    2140:	18 87       	std	Y+8, r17	; 0x08
    2142:	ce 1a       	sub	r12, r30
    2144:	df 0a       	sbc	r13, r31
    2146:	dc 82       	std	Y+4, r13	; 0x04
    2148:	cb 82       	std	Y+3, r12	; 0x03
    214a:	1a 82       	std	Y+2, r1	; 0x02
    214c:	ce 01       	movw	r24, r28
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__pack_f>
    2154:	28 96       	adiw	r28, 0x08	; 8
    2156:	ea e0       	ldi	r30, 0x0A	; 10
    2158:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__+0x10>

0000215c <__clzsi2>:
    215c:	ef 92       	push	r14
    215e:	ff 92       	push	r15
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	7b 01       	movw	r14, r22
    2166:	8c 01       	movw	r16, r24
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	e8 16       	cp	r14, r24
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	f8 06       	cpc	r15, r24
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	08 07       	cpc	r16, r24
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	18 07       	cpc	r17, r24
    2178:	88 f4       	brcc	.+34     	; 0x219c <__clzsi2+0x40>
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	e8 16       	cp	r14, r24
    217e:	f1 04       	cpc	r15, r1
    2180:	01 05       	cpc	r16, r1
    2182:	11 05       	cpc	r17, r1
    2184:	31 f0       	breq	.+12     	; 0x2192 <__clzsi2+0x36>
    2186:	28 f0       	brcs	.+10     	; 0x2192 <__clzsi2+0x36>
    2188:	88 e0       	ldi	r24, 0x08	; 8
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a0 e0       	ldi	r26, 0x00	; 0
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	17 c0       	rjmp	.+46     	; 0x21c0 <__clzsi2+0x64>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	a0 e0       	ldi	r26, 0x00	; 0
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	12 c0       	rjmp	.+36     	; 0x21c0 <__clzsi2+0x64>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	e8 16       	cp	r14, r24
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	f8 06       	cpc	r15, r24
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	08 07       	cpc	r16, r24
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	18 07       	cpc	r17, r24
    21ac:	28 f0       	brcs	.+10     	; 0x21b8 <__clzsi2+0x5c>
    21ae:	88 e1       	ldi	r24, 0x18	; 24
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	a0 e0       	ldi	r26, 0x00	; 0
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	04 c0       	rjmp	.+8      	; 0x21c0 <__clzsi2+0x64>
    21b8:	80 e1       	ldi	r24, 0x10	; 16
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	a0 e0       	ldi	r26, 0x00	; 0
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	20 e2       	ldi	r18, 0x20	; 32
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	28 1b       	sub	r18, r24
    21ca:	39 0b       	sbc	r19, r25
    21cc:	4a 0b       	sbc	r20, r26
    21ce:	5b 0b       	sbc	r21, r27
    21d0:	04 c0       	rjmp	.+8      	; 0x21da <__clzsi2+0x7e>
    21d2:	16 95       	lsr	r17
    21d4:	07 95       	ror	r16
    21d6:	f7 94       	ror	r15
    21d8:	e7 94       	ror	r14
    21da:	8a 95       	dec	r24
    21dc:	d2 f7       	brpl	.-12     	; 0x21d2 <__clzsi2+0x76>
    21de:	f7 01       	movw	r30, r14
    21e0:	e0 5f       	subi	r30, 0xF0	; 240
    21e2:	fd 4f       	sbci	r31, 0xFD	; 253
    21e4:	80 81       	ld	r24, Z
    21e6:	28 1b       	sub	r18, r24
    21e8:	31 09       	sbc	r19, r1
    21ea:	41 09       	sbc	r20, r1
    21ec:	51 09       	sbc	r21, r1
    21ee:	c9 01       	movw	r24, r18
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	ff 90       	pop	r15
    21f6:	ef 90       	pop	r14
    21f8:	08 95       	ret

000021fa <__pack_f>:
    21fa:	df 92       	push	r13
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	fc 01       	movw	r30, r24
    2206:	e4 80       	ldd	r14, Z+4	; 0x04
    2208:	f5 80       	ldd	r15, Z+5	; 0x05
    220a:	06 81       	ldd	r16, Z+6	; 0x06
    220c:	17 81       	ldd	r17, Z+7	; 0x07
    220e:	d1 80       	ldd	r13, Z+1	; 0x01
    2210:	80 81       	ld	r24, Z
    2212:	82 30       	cpi	r24, 0x02	; 2
    2214:	48 f4       	brcc	.+18     	; 0x2228 <__stack+0x29>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 e1       	ldi	r26, 0x10	; 16
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e8 2a       	or	r14, r24
    2220:	f9 2a       	or	r15, r25
    2222:	0a 2b       	or	r16, r26
    2224:	1b 2b       	or	r17, r27
    2226:	a5 c0       	rjmp	.+330    	; 0x2372 <__stack+0x173>
    2228:	84 30       	cpi	r24, 0x04	; 4
    222a:	09 f4       	brne	.+2      	; 0x222e <__stack+0x2f>
    222c:	9f c0       	rjmp	.+318    	; 0x236c <__stack+0x16d>
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	21 f4       	brne	.+8      	; 0x223a <__stack+0x3b>
    2232:	ee 24       	eor	r14, r14
    2234:	ff 24       	eor	r15, r15
    2236:	87 01       	movw	r16, r14
    2238:	05 c0       	rjmp	.+10     	; 0x2244 <__stack+0x45>
    223a:	e1 14       	cp	r14, r1
    223c:	f1 04       	cpc	r15, r1
    223e:	01 05       	cpc	r16, r1
    2240:	11 05       	cpc	r17, r1
    2242:	19 f4       	brne	.+6      	; 0x224a <__stack+0x4b>
    2244:	e0 e0       	ldi	r30, 0x00	; 0
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	96 c0       	rjmp	.+300    	; 0x2376 <__stack+0x177>
    224a:	62 81       	ldd	r22, Z+2	; 0x02
    224c:	73 81       	ldd	r23, Z+3	; 0x03
    224e:	9f ef       	ldi	r25, 0xFF	; 255
    2250:	62 38       	cpi	r22, 0x82	; 130
    2252:	79 07       	cpc	r23, r25
    2254:	0c f0       	brlt	.+2      	; 0x2258 <__stack+0x59>
    2256:	5b c0       	rjmp	.+182    	; 0x230e <__stack+0x10f>
    2258:	22 e8       	ldi	r18, 0x82	; 130
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	26 1b       	sub	r18, r22
    225e:	37 0b       	sbc	r19, r23
    2260:	2a 31       	cpi	r18, 0x1A	; 26
    2262:	31 05       	cpc	r19, r1
    2264:	2c f0       	brlt	.+10     	; 0x2270 <__stack+0x71>
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	2a c0       	rjmp	.+84     	; 0x22c4 <__stack+0xc5>
    2270:	b8 01       	movw	r22, r16
    2272:	a7 01       	movw	r20, r14
    2274:	02 2e       	mov	r0, r18
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <__stack+0x81>
    2278:	76 95       	lsr	r23
    227a:	67 95       	ror	r22
    227c:	57 95       	ror	r21
    227e:	47 95       	ror	r20
    2280:	0a 94       	dec	r0
    2282:	d2 f7       	brpl	.-12     	; 0x2278 <__stack+0x79>
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a0 e0       	ldi	r26, 0x00	; 0
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	04 c0       	rjmp	.+8      	; 0x2296 <__stack+0x97>
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	aa 1f       	adc	r26, r26
    2294:	bb 1f       	adc	r27, r27
    2296:	2a 95       	dec	r18
    2298:	d2 f7       	brpl	.-12     	; 0x228e <__stack+0x8f>
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	a1 09       	sbc	r26, r1
    229e:	b1 09       	sbc	r27, r1
    22a0:	8e 21       	and	r24, r14
    22a2:	9f 21       	and	r25, r15
    22a4:	a0 23       	and	r26, r16
    22a6:	b1 23       	and	r27, r17
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	a1 05       	cpc	r26, r1
    22ac:	b1 05       	cpc	r27, r1
    22ae:	21 f0       	breq	.+8      	; 0x22b8 <__stack+0xb9>
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e0       	ldi	r26, 0x00	; 0
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	9a 01       	movw	r18, r20
    22ba:	ab 01       	movw	r20, r22
    22bc:	28 2b       	or	r18, r24
    22be:	39 2b       	or	r19, r25
    22c0:	4a 2b       	or	r20, r26
    22c2:	5b 2b       	or	r21, r27
    22c4:	da 01       	movw	r26, r20
    22c6:	c9 01       	movw	r24, r18
    22c8:	8f 77       	andi	r24, 0x7F	; 127
    22ca:	90 70       	andi	r25, 0x00	; 0
    22cc:	a0 70       	andi	r26, 0x00	; 0
    22ce:	b0 70       	andi	r27, 0x00	; 0
    22d0:	80 34       	cpi	r24, 0x40	; 64
    22d2:	91 05       	cpc	r25, r1
    22d4:	a1 05       	cpc	r26, r1
    22d6:	b1 05       	cpc	r27, r1
    22d8:	39 f4       	brne	.+14     	; 0x22e8 <__stack+0xe9>
    22da:	27 ff       	sbrs	r18, 7
    22dc:	09 c0       	rjmp	.+18     	; 0x22f0 <__stack+0xf1>
    22de:	20 5c       	subi	r18, 0xC0	; 192
    22e0:	3f 4f       	sbci	r19, 0xFF	; 255
    22e2:	4f 4f       	sbci	r20, 0xFF	; 255
    22e4:	5f 4f       	sbci	r21, 0xFF	; 255
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <__stack+0xf1>
    22e8:	21 5c       	subi	r18, 0xC1	; 193
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	4f 4f       	sbci	r20, 0xFF	; 255
    22ee:	5f 4f       	sbci	r21, 0xFF	; 255
    22f0:	e0 e0       	ldi	r30, 0x00	; 0
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	20 30       	cpi	r18, 0x00	; 0
    22f6:	a0 e0       	ldi	r26, 0x00	; 0
    22f8:	3a 07       	cpc	r19, r26
    22fa:	a0 e0       	ldi	r26, 0x00	; 0
    22fc:	4a 07       	cpc	r20, r26
    22fe:	a0 e4       	ldi	r26, 0x40	; 64
    2300:	5a 07       	cpc	r21, r26
    2302:	10 f0       	brcs	.+4      	; 0x2308 <__stack+0x109>
    2304:	e1 e0       	ldi	r30, 0x01	; 1
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	79 01       	movw	r14, r18
    230a:	8a 01       	movw	r16, r20
    230c:	27 c0       	rjmp	.+78     	; 0x235c <__stack+0x15d>
    230e:	60 38       	cpi	r22, 0x80	; 128
    2310:	71 05       	cpc	r23, r1
    2312:	64 f5       	brge	.+88     	; 0x236c <__stack+0x16d>
    2314:	fb 01       	movw	r30, r22
    2316:	e1 58       	subi	r30, 0x81	; 129
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	d8 01       	movw	r26, r16
    231c:	c7 01       	movw	r24, r14
    231e:	8f 77       	andi	r24, 0x7F	; 127
    2320:	90 70       	andi	r25, 0x00	; 0
    2322:	a0 70       	andi	r26, 0x00	; 0
    2324:	b0 70       	andi	r27, 0x00	; 0
    2326:	80 34       	cpi	r24, 0x40	; 64
    2328:	91 05       	cpc	r25, r1
    232a:	a1 05       	cpc	r26, r1
    232c:	b1 05       	cpc	r27, r1
    232e:	39 f4       	brne	.+14     	; 0x233e <__stack+0x13f>
    2330:	e7 fe       	sbrs	r14, 7
    2332:	0d c0       	rjmp	.+26     	; 0x234e <__stack+0x14f>
    2334:	80 e4       	ldi	r24, 0x40	; 64
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	a0 e0       	ldi	r26, 0x00	; 0
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <__stack+0x147>
    233e:	8f e3       	ldi	r24, 0x3F	; 63
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a0 e0       	ldi	r26, 0x00	; 0
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e8 0e       	add	r14, r24
    2348:	f9 1e       	adc	r15, r25
    234a:	0a 1f       	adc	r16, r26
    234c:	1b 1f       	adc	r17, r27
    234e:	17 ff       	sbrs	r17, 7
    2350:	05 c0       	rjmp	.+10     	; 0x235c <__stack+0x15d>
    2352:	16 95       	lsr	r17
    2354:	07 95       	ror	r16
    2356:	f7 94       	ror	r15
    2358:	e7 94       	ror	r14
    235a:	31 96       	adiw	r30, 0x01	; 1
    235c:	87 e0       	ldi	r24, 0x07	; 7
    235e:	16 95       	lsr	r17
    2360:	07 95       	ror	r16
    2362:	f7 94       	ror	r15
    2364:	e7 94       	ror	r14
    2366:	8a 95       	dec	r24
    2368:	d1 f7       	brne	.-12     	; 0x235e <__stack+0x15f>
    236a:	05 c0       	rjmp	.+10     	; 0x2376 <__stack+0x177>
    236c:	ee 24       	eor	r14, r14
    236e:	ff 24       	eor	r15, r15
    2370:	87 01       	movw	r16, r14
    2372:	ef ef       	ldi	r30, 0xFF	; 255
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	6e 2f       	mov	r22, r30
    2378:	67 95       	ror	r22
    237a:	66 27       	eor	r22, r22
    237c:	67 95       	ror	r22
    237e:	90 2f       	mov	r25, r16
    2380:	9f 77       	andi	r25, 0x7F	; 127
    2382:	d7 94       	ror	r13
    2384:	dd 24       	eor	r13, r13
    2386:	d7 94       	ror	r13
    2388:	8e 2f       	mov	r24, r30
    238a:	86 95       	lsr	r24
    238c:	49 2f       	mov	r20, r25
    238e:	46 2b       	or	r20, r22
    2390:	58 2f       	mov	r21, r24
    2392:	5d 29       	or	r21, r13
    2394:	b7 01       	movw	r22, r14
    2396:	ca 01       	movw	r24, r20
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	ef 90       	pop	r14
    23a0:	df 90       	pop	r13
    23a2:	08 95       	ret

000023a4 <__unpack_f>:
    23a4:	fc 01       	movw	r30, r24
    23a6:	db 01       	movw	r26, r22
    23a8:	40 81       	ld	r20, Z
    23aa:	51 81       	ldd	r21, Z+1	; 0x01
    23ac:	22 81       	ldd	r18, Z+2	; 0x02
    23ae:	62 2f       	mov	r22, r18
    23b0:	6f 77       	andi	r22, 0x7F	; 127
    23b2:	70 e0       	ldi	r23, 0x00	; 0
    23b4:	22 1f       	adc	r18, r18
    23b6:	22 27       	eor	r18, r18
    23b8:	22 1f       	adc	r18, r18
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	89 2f       	mov	r24, r25
    23be:	88 0f       	add	r24, r24
    23c0:	82 2b       	or	r24, r18
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	99 1f       	adc	r25, r25
    23c8:	99 27       	eor	r25, r25
    23ca:	99 1f       	adc	r25, r25
    23cc:	11 96       	adiw	r26, 0x01	; 1
    23ce:	9c 93       	st	X, r25
    23d0:	11 97       	sbiw	r26, 0x01	; 1
    23d2:	21 15       	cp	r18, r1
    23d4:	31 05       	cpc	r19, r1
    23d6:	a9 f5       	brne	.+106    	; 0x2442 <__unpack_f+0x9e>
    23d8:	41 15       	cp	r20, r1
    23da:	51 05       	cpc	r21, r1
    23dc:	61 05       	cpc	r22, r1
    23de:	71 05       	cpc	r23, r1
    23e0:	11 f4       	brne	.+4      	; 0x23e6 <__unpack_f+0x42>
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	37 c0       	rjmp	.+110    	; 0x2454 <__unpack_f+0xb0>
    23e6:	82 e8       	ldi	r24, 0x82	; 130
    23e8:	9f ef       	ldi	r25, 0xFF	; 255
    23ea:	13 96       	adiw	r26, 0x03	; 3
    23ec:	9c 93       	st	X, r25
    23ee:	8e 93       	st	-X, r24
    23f0:	12 97       	sbiw	r26, 0x02	; 2
    23f2:	9a 01       	movw	r18, r20
    23f4:	ab 01       	movw	r20, r22
    23f6:	67 e0       	ldi	r22, 0x07	; 7
    23f8:	22 0f       	add	r18, r18
    23fa:	33 1f       	adc	r19, r19
    23fc:	44 1f       	adc	r20, r20
    23fe:	55 1f       	adc	r21, r21
    2400:	6a 95       	dec	r22
    2402:	d1 f7       	brne	.-12     	; 0x23f8 <__unpack_f+0x54>
    2404:	83 e0       	ldi	r24, 0x03	; 3
    2406:	8c 93       	st	X, r24
    2408:	0d c0       	rjmp	.+26     	; 0x2424 <__unpack_f+0x80>
    240a:	22 0f       	add	r18, r18
    240c:	33 1f       	adc	r19, r19
    240e:	44 1f       	adc	r20, r20
    2410:	55 1f       	adc	r21, r21
    2412:	12 96       	adiw	r26, 0x02	; 2
    2414:	8d 91       	ld	r24, X+
    2416:	9c 91       	ld	r25, X
    2418:	13 97       	sbiw	r26, 0x03	; 3
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	13 96       	adiw	r26, 0x03	; 3
    241e:	9c 93       	st	X, r25
    2420:	8e 93       	st	-X, r24
    2422:	12 97       	sbiw	r26, 0x02	; 2
    2424:	20 30       	cpi	r18, 0x00	; 0
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	38 07       	cpc	r19, r24
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	48 07       	cpc	r20, r24
    242e:	80 e4       	ldi	r24, 0x40	; 64
    2430:	58 07       	cpc	r21, r24
    2432:	58 f3       	brcs	.-42     	; 0x240a <__unpack_f+0x66>
    2434:	14 96       	adiw	r26, 0x04	; 4
    2436:	2d 93       	st	X+, r18
    2438:	3d 93       	st	X+, r19
    243a:	4d 93       	st	X+, r20
    243c:	5c 93       	st	X, r21
    243e:	17 97       	sbiw	r26, 0x07	; 7
    2440:	08 95       	ret
    2442:	2f 3f       	cpi	r18, 0xFF	; 255
    2444:	31 05       	cpc	r19, r1
    2446:	79 f4       	brne	.+30     	; 0x2466 <__unpack_f+0xc2>
    2448:	41 15       	cp	r20, r1
    244a:	51 05       	cpc	r21, r1
    244c:	61 05       	cpc	r22, r1
    244e:	71 05       	cpc	r23, r1
    2450:	19 f4       	brne	.+6      	; 0x2458 <__unpack_f+0xb4>
    2452:	84 e0       	ldi	r24, 0x04	; 4
    2454:	8c 93       	st	X, r24
    2456:	08 95       	ret
    2458:	64 ff       	sbrs	r22, 4
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <__unpack_f+0xbe>
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	8c 93       	st	X, r24
    2460:	12 c0       	rjmp	.+36     	; 0x2486 <__unpack_f+0xe2>
    2462:	1c 92       	st	X, r1
    2464:	10 c0       	rjmp	.+32     	; 0x2486 <__unpack_f+0xe2>
    2466:	2f 57       	subi	r18, 0x7F	; 127
    2468:	30 40       	sbci	r19, 0x00	; 0
    246a:	13 96       	adiw	r26, 0x03	; 3
    246c:	3c 93       	st	X, r19
    246e:	2e 93       	st	-X, r18
    2470:	12 97       	sbiw	r26, 0x02	; 2
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	8c 93       	st	X, r24
    2476:	87 e0       	ldi	r24, 0x07	; 7
    2478:	44 0f       	add	r20, r20
    247a:	55 1f       	adc	r21, r21
    247c:	66 1f       	adc	r22, r22
    247e:	77 1f       	adc	r23, r23
    2480:	8a 95       	dec	r24
    2482:	d1 f7       	brne	.-12     	; 0x2478 <__unpack_f+0xd4>
    2484:	70 64       	ori	r23, 0x40	; 64
    2486:	14 96       	adiw	r26, 0x04	; 4
    2488:	4d 93       	st	X+, r20
    248a:	5d 93       	st	X+, r21
    248c:	6d 93       	st	X+, r22
    248e:	7c 93       	st	X, r23
    2490:	17 97       	sbiw	r26, 0x07	; 7
    2492:	08 95       	ret

00002494 <__fpcmp_parts_f>:
    2494:	1f 93       	push	r17
    2496:	dc 01       	movw	r26, r24
    2498:	fb 01       	movw	r30, r22
    249a:	9c 91       	ld	r25, X
    249c:	92 30       	cpi	r25, 0x02	; 2
    249e:	08 f4       	brcc	.+2      	; 0x24a2 <__fpcmp_parts_f+0xe>
    24a0:	47 c0       	rjmp	.+142    	; 0x2530 <__fpcmp_parts_f+0x9c>
    24a2:	80 81       	ld	r24, Z
    24a4:	82 30       	cpi	r24, 0x02	; 2
    24a6:	08 f4       	brcc	.+2      	; 0x24aa <__fpcmp_parts_f+0x16>
    24a8:	43 c0       	rjmp	.+134    	; 0x2530 <__fpcmp_parts_f+0x9c>
    24aa:	94 30       	cpi	r25, 0x04	; 4
    24ac:	51 f4       	brne	.+20     	; 0x24c2 <__fpcmp_parts_f+0x2e>
    24ae:	11 96       	adiw	r26, 0x01	; 1
    24b0:	1c 91       	ld	r17, X
    24b2:	84 30       	cpi	r24, 0x04	; 4
    24b4:	99 f5       	brne	.+102    	; 0x251c <__fpcmp_parts_f+0x88>
    24b6:	81 81       	ldd	r24, Z+1	; 0x01
    24b8:	68 2f       	mov	r22, r24
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	61 1b       	sub	r22, r17
    24be:	71 09       	sbc	r23, r1
    24c0:	3f c0       	rjmp	.+126    	; 0x2540 <__fpcmp_parts_f+0xac>
    24c2:	84 30       	cpi	r24, 0x04	; 4
    24c4:	21 f0       	breq	.+8      	; 0x24ce <__fpcmp_parts_f+0x3a>
    24c6:	92 30       	cpi	r25, 0x02	; 2
    24c8:	31 f4       	brne	.+12     	; 0x24d6 <__fpcmp_parts_f+0x42>
    24ca:	82 30       	cpi	r24, 0x02	; 2
    24cc:	b9 f1       	breq	.+110    	; 0x253c <__fpcmp_parts_f+0xa8>
    24ce:	81 81       	ldd	r24, Z+1	; 0x01
    24d0:	88 23       	and	r24, r24
    24d2:	89 f1       	breq	.+98     	; 0x2536 <__fpcmp_parts_f+0xa2>
    24d4:	2d c0       	rjmp	.+90     	; 0x2530 <__fpcmp_parts_f+0x9c>
    24d6:	11 96       	adiw	r26, 0x01	; 1
    24d8:	1c 91       	ld	r17, X
    24da:	11 97       	sbiw	r26, 0x01	; 1
    24dc:	82 30       	cpi	r24, 0x02	; 2
    24de:	f1 f0       	breq	.+60     	; 0x251c <__fpcmp_parts_f+0x88>
    24e0:	81 81       	ldd	r24, Z+1	; 0x01
    24e2:	18 17       	cp	r17, r24
    24e4:	d9 f4       	brne	.+54     	; 0x251c <__fpcmp_parts_f+0x88>
    24e6:	12 96       	adiw	r26, 0x02	; 2
    24e8:	2d 91       	ld	r18, X+
    24ea:	3c 91       	ld	r19, X
    24ec:	13 97       	sbiw	r26, 0x03	; 3
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	82 17       	cp	r24, r18
    24f4:	93 07       	cpc	r25, r19
    24f6:	94 f0       	brlt	.+36     	; 0x251c <__fpcmp_parts_f+0x88>
    24f8:	28 17       	cp	r18, r24
    24fa:	39 07       	cpc	r19, r25
    24fc:	bc f0       	brlt	.+46     	; 0x252c <__fpcmp_parts_f+0x98>
    24fe:	14 96       	adiw	r26, 0x04	; 4
    2500:	8d 91       	ld	r24, X+
    2502:	9d 91       	ld	r25, X+
    2504:	0d 90       	ld	r0, X+
    2506:	bc 91       	ld	r27, X
    2508:	a0 2d       	mov	r26, r0
    250a:	24 81       	ldd	r18, Z+4	; 0x04
    250c:	35 81       	ldd	r19, Z+5	; 0x05
    250e:	46 81       	ldd	r20, Z+6	; 0x06
    2510:	57 81       	ldd	r21, Z+7	; 0x07
    2512:	28 17       	cp	r18, r24
    2514:	39 07       	cpc	r19, r25
    2516:	4a 07       	cpc	r20, r26
    2518:	5b 07       	cpc	r21, r27
    251a:	18 f4       	brcc	.+6      	; 0x2522 <__fpcmp_parts_f+0x8e>
    251c:	11 23       	and	r17, r17
    251e:	41 f0       	breq	.+16     	; 0x2530 <__fpcmp_parts_f+0x9c>
    2520:	0a c0       	rjmp	.+20     	; 0x2536 <__fpcmp_parts_f+0xa2>
    2522:	82 17       	cp	r24, r18
    2524:	93 07       	cpc	r25, r19
    2526:	a4 07       	cpc	r26, r20
    2528:	b5 07       	cpc	r27, r21
    252a:	40 f4       	brcc	.+16     	; 0x253c <__fpcmp_parts_f+0xa8>
    252c:	11 23       	and	r17, r17
    252e:	19 f0       	breq	.+6      	; 0x2536 <__fpcmp_parts_f+0xa2>
    2530:	61 e0       	ldi	r22, 0x01	; 1
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	05 c0       	rjmp	.+10     	; 0x2540 <__fpcmp_parts_f+0xac>
    2536:	6f ef       	ldi	r22, 0xFF	; 255
    2538:	7f ef       	ldi	r23, 0xFF	; 255
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <__fpcmp_parts_f+0xac>
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	cb 01       	movw	r24, r22
    2542:	1f 91       	pop	r17
    2544:	08 95       	ret

00002546 <__udivmodhi4>:
    2546:	aa 1b       	sub	r26, r26
    2548:	bb 1b       	sub	r27, r27
    254a:	51 e1       	ldi	r21, 0x11	; 17
    254c:	07 c0       	rjmp	.+14     	; 0x255c <__udivmodhi4_ep>

0000254e <__udivmodhi4_loop>:
    254e:	aa 1f       	adc	r26, r26
    2550:	bb 1f       	adc	r27, r27
    2552:	a6 17       	cp	r26, r22
    2554:	b7 07       	cpc	r27, r23
    2556:	10 f0       	brcs	.+4      	; 0x255c <__udivmodhi4_ep>
    2558:	a6 1b       	sub	r26, r22
    255a:	b7 0b       	sbc	r27, r23

0000255c <__udivmodhi4_ep>:
    255c:	88 1f       	adc	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	5a 95       	dec	r21
    2562:	a9 f7       	brne	.-22     	; 0x254e <__udivmodhi4_loop>
    2564:	80 95       	com	r24
    2566:	90 95       	com	r25
    2568:	bc 01       	movw	r22, r24
    256a:	cd 01       	movw	r24, r26
    256c:	08 95       	ret

0000256e <__prologue_saves__>:
    256e:	2f 92       	push	r2
    2570:	3f 92       	push	r3
    2572:	4f 92       	push	r4
    2574:	5f 92       	push	r5
    2576:	6f 92       	push	r6
    2578:	7f 92       	push	r7
    257a:	8f 92       	push	r8
    257c:	9f 92       	push	r9
    257e:	af 92       	push	r10
    2580:	bf 92       	push	r11
    2582:	cf 92       	push	r12
    2584:	df 92       	push	r13
    2586:	ef 92       	push	r14
    2588:	ff 92       	push	r15
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	ca 1b       	sub	r28, r26
    2598:	db 0b       	sbc	r29, r27
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	19 94       	eijmp

000025a6 <__epilogue_restores__>:
    25a6:	2a 88       	ldd	r2, Y+18	; 0x12
    25a8:	39 88       	ldd	r3, Y+17	; 0x11
    25aa:	48 88       	ldd	r4, Y+16	; 0x10
    25ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    25ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    25b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25b8:	b9 84       	ldd	r11, Y+9	; 0x09
    25ba:	c8 84       	ldd	r12, Y+8	; 0x08
    25bc:	df 80       	ldd	r13, Y+7	; 0x07
    25be:	ee 80       	ldd	r14, Y+6	; 0x06
    25c0:	fd 80       	ldd	r15, Y+5	; 0x05
    25c2:	0c 81       	ldd	r16, Y+4	; 0x04
    25c4:	1b 81       	ldd	r17, Y+3	; 0x03
    25c6:	aa 81       	ldd	r26, Y+2	; 0x02
    25c8:	b9 81       	ldd	r27, Y+1	; 0x01
    25ca:	ce 0f       	add	r28, r30
    25cc:	d1 1d       	adc	r29, r1
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	ed 01       	movw	r28, r26
    25da:	08 95       	ret

000025dc <pow>:
    25dc:	fa 01       	movw	r30, r20
    25de:	ee 0f       	add	r30, r30
    25e0:	ff 1f       	adc	r31, r31
    25e2:	30 96       	adiw	r30, 0x00	; 0
    25e4:	21 05       	cpc	r18, r1
    25e6:	31 05       	cpc	r19, r1
    25e8:	99 f1       	breq	.+102    	; 0x2650 <pow+0x74>
    25ea:	61 15       	cp	r22, r1
    25ec:	71 05       	cpc	r23, r1
    25ee:	61 f4       	brne	.+24     	; 0x2608 <pow+0x2c>
    25f0:	80 38       	cpi	r24, 0x80	; 128
    25f2:	bf e3       	ldi	r27, 0x3F	; 63
    25f4:	9b 07       	cpc	r25, r27
    25f6:	49 f1       	breq	.+82     	; 0x264a <pow+0x6e>
    25f8:	68 94       	set
    25fa:	90 38       	cpi	r25, 0x80	; 128
    25fc:	81 05       	cpc	r24, r1
    25fe:	61 f0       	breq	.+24     	; 0x2618 <pow+0x3c>
    2600:	80 38       	cpi	r24, 0x80	; 128
    2602:	bf ef       	ldi	r27, 0xFF	; 255
    2604:	9b 07       	cpc	r25, r27
    2606:	41 f0       	breq	.+16     	; 0x2618 <pow+0x3c>
    2608:	99 23       	and	r25, r25
    260a:	42 f5       	brpl	.+80     	; 0x265c <pow+0x80>
    260c:	ff 3f       	cpi	r31, 0xFF	; 255
    260e:	e1 05       	cpc	r30, r1
    2610:	31 05       	cpc	r19, r1
    2612:	21 05       	cpc	r18, r1
    2614:	11 f1       	breq	.+68     	; 0x265a <pow+0x7e>
    2616:	e8 94       	clt
    2618:	08 94       	sec
    261a:	e7 95       	ror	r30
    261c:	d9 01       	movw	r26, r18
    261e:	aa 23       	and	r26, r26
    2620:	29 f4       	brne	.+10     	; 0x262c <pow+0x50>
    2622:	ab 2f       	mov	r26, r27
    2624:	be 2f       	mov	r27, r30
    2626:	f8 5f       	subi	r31, 0xF8	; 248
    2628:	d0 f3       	brcs	.-12     	; 0x261e <pow+0x42>
    262a:	10 c0       	rjmp	.+32     	; 0x264c <pow+0x70>
    262c:	ff 5f       	subi	r31, 0xFF	; 255
    262e:	70 f4       	brcc	.+28     	; 0x264c <pow+0x70>
    2630:	a6 95       	lsr	r26
    2632:	e0 f7       	brcc	.-8      	; 0x262c <pow+0x50>
    2634:	f7 39       	cpi	r31, 0x97	; 151
    2636:	50 f0       	brcs	.+20     	; 0x264c <pow+0x70>
    2638:	19 f0       	breq	.+6      	; 0x2640 <pow+0x64>
    263a:	ff 3a       	cpi	r31, 0xAF	; 175
    263c:	38 f4       	brcc	.+14     	; 0x264c <pow+0x70>
    263e:	9f 77       	andi	r25, 0x7F	; 127
    2640:	9f 93       	push	r25
    2642:	0c d0       	rcall	.+24     	; 0x265c <pow+0x80>
    2644:	0f 90       	pop	r0
    2646:	07 fc       	sbrc	r0, 7
    2648:	90 58       	subi	r25, 0x80	; 128
    264a:	08 95       	ret
    264c:	3e f0       	brts	.+14     	; 0x265c <pow+0x80>
    264e:	49 c0       	rjmp	.+146    	; 0x26e2 <__fp_nan>
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	80 e8       	ldi	r24, 0x80	; 128
    2656:	9f e3       	ldi	r25, 0x3F	; 63
    2658:	08 95       	ret
    265a:	4f e7       	ldi	r20, 0x7F	; 127
    265c:	9f 77       	andi	r25, 0x7F	; 127
    265e:	5f 93       	push	r21
    2660:	4f 93       	push	r20
    2662:	3f 93       	push	r19
    2664:	2f 93       	push	r18
    2666:	d0 d0       	rcall	.+416    	; 0x2808 <log>
    2668:	2f 91       	pop	r18
    266a:	3f 91       	pop	r19
    266c:	4f 91       	pop	r20
    266e:	5f 91       	pop	r21
    2670:	14 da       	rcall	.-3032   	; 0x1a9a <__mulsf3>
    2672:	05 c0       	rjmp	.+10     	; 0x267e <exp>
    2674:	19 f4       	brne	.+6      	; 0x267c <pow+0xa0>
    2676:	0e f0       	brts	.+2      	; 0x267a <pow+0x9e>
    2678:	2e c0       	rjmp	.+92     	; 0x26d6 <__fp_inf>
    267a:	7d c0       	rjmp	.+250    	; 0x2776 <__fp_zero>
    267c:	32 c0       	rjmp	.+100    	; 0x26e2 <__fp_nan>

0000267e <exp>:
    267e:	61 d0       	rcall	.+194    	; 0x2742 <__fp_splitA>
    2680:	c8 f3       	brcs	.-14     	; 0x2674 <pow+0x98>
    2682:	96 38       	cpi	r25, 0x86	; 134
    2684:	c0 f7       	brcc	.-16     	; 0x2676 <pow+0x9a>
    2686:	07 f8       	bld	r0, 7
    2688:	0f 92       	push	r0
    268a:	e8 94       	clt
    268c:	2b e3       	ldi	r18, 0x3B	; 59
    268e:	3a ea       	ldi	r19, 0xAA	; 170
    2690:	48 eb       	ldi	r20, 0xB8	; 184
    2692:	5f e7       	ldi	r21, 0x7F	; 127
    2694:	38 d1       	rcall	.+624    	; 0x2906 <__mulsf3_pse>
    2696:	0f 92       	push	r0
    2698:	0f 92       	push	r0
    269a:	0f 92       	push	r0
    269c:	4d b7       	in	r20, 0x3d	; 61
    269e:	5e b7       	in	r21, 0x3e	; 62
    26a0:	0f 92       	push	r0
    26a2:	f2 d0       	rcall	.+484    	; 0x2888 <modf>
    26a4:	e4 ee       	ldi	r30, 0xE4	; 228
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	1f d0       	rcall	.+62     	; 0x26e8 <__fp_powser>
    26aa:	4f 91       	pop	r20
    26ac:	5f 91       	pop	r21
    26ae:	ef 91       	pop	r30
    26b0:	ff 91       	pop	r31
    26b2:	e5 95       	asr	r30
    26b4:	ee 1f       	adc	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	49 f0       	breq	.+18     	; 0x26cc <exp+0x4e>
    26ba:	fe 57       	subi	r31, 0x7E	; 126
    26bc:	e0 68       	ori	r30, 0x80	; 128
    26be:	44 27       	eor	r20, r20
    26c0:	ee 0f       	add	r30, r30
    26c2:	44 1f       	adc	r20, r20
    26c4:	fa 95       	dec	r31
    26c6:	e1 f7       	brne	.-8      	; 0x26c0 <exp+0x42>
    26c8:	41 95       	neg	r20
    26ca:	55 0b       	sbc	r21, r21
    26cc:	64 d0       	rcall	.+200    	; 0x2796 <ldexp>
    26ce:	0f 90       	pop	r0
    26d0:	07 fe       	sbrs	r0, 7
    26d2:	58 c0       	rjmp	.+176    	; 0x2784 <inverse>
    26d4:	08 95       	ret

000026d6 <__fp_inf>:
    26d6:	97 f9       	bld	r25, 7
    26d8:	9f 67       	ori	r25, 0x7F	; 127
    26da:	80 e8       	ldi	r24, 0x80	; 128
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	08 95       	ret

000026e2 <__fp_nan>:
    26e2:	9f ef       	ldi	r25, 0xFF	; 255
    26e4:	80 ec       	ldi	r24, 0xC0	; 192
    26e6:	08 95       	ret

000026e8 <__fp_powser>:
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	1f 93       	push	r17
    26ee:	0f 93       	push	r16
    26f0:	ff 92       	push	r15
    26f2:	ef 92       	push	r14
    26f4:	df 92       	push	r13
    26f6:	7b 01       	movw	r14, r22
    26f8:	8c 01       	movw	r16, r24
    26fa:	68 94       	set
    26fc:	05 c0       	rjmp	.+10     	; 0x2708 <__fp_powser+0x20>
    26fe:	da 2e       	mov	r13, r26
    2700:	ef 01       	movw	r28, r30
    2702:	ff d0       	rcall	.+510    	; 0x2902 <__mulsf3x>
    2704:	fe 01       	movw	r30, r28
    2706:	e8 94       	clt
    2708:	a5 91       	lpm	r26, Z+
    270a:	25 91       	lpm	r18, Z+
    270c:	35 91       	lpm	r19, Z+
    270e:	45 91       	lpm	r20, Z+
    2710:	55 91       	lpm	r21, Z+
    2712:	ae f3       	brts	.-22     	; 0x26fe <__fp_powser+0x16>
    2714:	ef 01       	movw	r28, r30
    2716:	59 d1       	rcall	.+690    	; 0x29ca <__addsf3x>
    2718:	fe 01       	movw	r30, r28
    271a:	97 01       	movw	r18, r14
    271c:	a8 01       	movw	r20, r16
    271e:	da 94       	dec	r13
    2720:	79 f7       	brne	.-34     	; 0x2700 <__fp_powser+0x18>
    2722:	df 90       	pop	r13
    2724:	ef 90       	pop	r14
    2726:	ff 90       	pop	r15
    2728:	0f 91       	pop	r16
    272a:	1f 91       	pop	r17
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <__fp_split3>:
    2732:	57 fd       	sbrc	r21, 7
    2734:	90 58       	subi	r25, 0x80	; 128
    2736:	44 0f       	add	r20, r20
    2738:	55 1f       	adc	r21, r21
    273a:	59 f0       	breq	.+22     	; 0x2752 <__fp_splitA+0x10>
    273c:	5f 3f       	cpi	r21, 0xFF	; 255
    273e:	71 f0       	breq	.+28     	; 0x275c <__fp_splitA+0x1a>
    2740:	47 95       	ror	r20

00002742 <__fp_splitA>:
    2742:	88 0f       	add	r24, r24
    2744:	97 fb       	bst	r25, 7
    2746:	99 1f       	adc	r25, r25
    2748:	61 f0       	breq	.+24     	; 0x2762 <__fp_splitA+0x20>
    274a:	9f 3f       	cpi	r25, 0xFF	; 255
    274c:	79 f0       	breq	.+30     	; 0x276c <__fp_splitA+0x2a>
    274e:	87 95       	ror	r24
    2750:	08 95       	ret
    2752:	12 16       	cp	r1, r18
    2754:	13 06       	cpc	r1, r19
    2756:	14 06       	cpc	r1, r20
    2758:	55 1f       	adc	r21, r21
    275a:	f2 cf       	rjmp	.-28     	; 0x2740 <__fp_split3+0xe>
    275c:	46 95       	lsr	r20
    275e:	f1 df       	rcall	.-30     	; 0x2742 <__fp_splitA>
    2760:	08 c0       	rjmp	.+16     	; 0x2772 <__fp_splitA+0x30>
    2762:	16 16       	cp	r1, r22
    2764:	17 06       	cpc	r1, r23
    2766:	18 06       	cpc	r1, r24
    2768:	99 1f       	adc	r25, r25
    276a:	f1 cf       	rjmp	.-30     	; 0x274e <__fp_splitA+0xc>
    276c:	86 95       	lsr	r24
    276e:	71 05       	cpc	r23, r1
    2770:	61 05       	cpc	r22, r1
    2772:	08 94       	sec
    2774:	08 95       	ret

00002776 <__fp_zero>:
    2776:	e8 94       	clt

00002778 <__fp_szero>:
    2778:	bb 27       	eor	r27, r27
    277a:	66 27       	eor	r22, r22
    277c:	77 27       	eor	r23, r23
    277e:	cb 01       	movw	r24, r22
    2780:	97 f9       	bld	r25, 7
    2782:	08 95       	ret

00002784 <inverse>:
    2784:	9b 01       	movw	r18, r22
    2786:	ac 01       	movw	r20, r24
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	70 e0       	ldi	r23, 0x00	; 0
    278c:	80 e8       	ldi	r24, 0x80	; 128
    278e:	9f e3       	ldi	r25, 0x3F	; 63
    2790:	7e ca       	rjmp	.-2820   	; 0x1c8e <__divsf3>
    2792:	a1 cf       	rjmp	.-190    	; 0x26d6 <__fp_inf>
    2794:	6d c1       	rjmp	.+730    	; 0x2a70 <__fp_mpack>

00002796 <ldexp>:
    2796:	d5 df       	rcall	.-86     	; 0x2742 <__fp_splitA>
    2798:	e8 f3       	brcs	.-6      	; 0x2794 <inverse+0x10>
    279a:	99 23       	and	r25, r25
    279c:	d9 f3       	breq	.-10     	; 0x2794 <inverse+0x10>
    279e:	94 0f       	add	r25, r20
    27a0:	51 1d       	adc	r21, r1
    27a2:	bb f3       	brvs	.-18     	; 0x2792 <inverse+0xe>
    27a4:	91 50       	subi	r25, 0x01	; 1
    27a6:	50 40       	sbci	r21, 0x00	; 0
    27a8:	94 f0       	brlt	.+36     	; 0x27ce <ldexp+0x38>
    27aa:	59 f0       	breq	.+22     	; 0x27c2 <ldexp+0x2c>
    27ac:	88 23       	and	r24, r24
    27ae:	32 f0       	brmi	.+12     	; 0x27bc <ldexp+0x26>
    27b0:	66 0f       	add	r22, r22
    27b2:	77 1f       	adc	r23, r23
    27b4:	88 1f       	adc	r24, r24
    27b6:	91 50       	subi	r25, 0x01	; 1
    27b8:	50 40       	sbci	r21, 0x00	; 0
    27ba:	c1 f7       	brne	.-16     	; 0x27ac <ldexp+0x16>
    27bc:	9e 3f       	cpi	r25, 0xFE	; 254
    27be:	51 05       	cpc	r21, r1
    27c0:	44 f7       	brge	.-48     	; 0x2792 <inverse+0xe>
    27c2:	88 0f       	add	r24, r24
    27c4:	91 1d       	adc	r25, r1
    27c6:	96 95       	lsr	r25
    27c8:	87 95       	ror	r24
    27ca:	97 f9       	bld	r25, 7
    27cc:	08 95       	ret
    27ce:	5f 3f       	cpi	r21, 0xFF	; 255
    27d0:	ac f0       	brlt	.+42     	; 0x27fc <ldexp+0x66>
    27d2:	98 3e       	cpi	r25, 0xE8	; 232
    27d4:	9c f0       	brlt	.+38     	; 0x27fc <ldexp+0x66>
    27d6:	bb 27       	eor	r27, r27
    27d8:	86 95       	lsr	r24
    27da:	77 95       	ror	r23
    27dc:	67 95       	ror	r22
    27de:	b7 95       	ror	r27
    27e0:	08 f4       	brcc	.+2      	; 0x27e4 <ldexp+0x4e>
    27e2:	b1 60       	ori	r27, 0x01	; 1
    27e4:	93 95       	inc	r25
    27e6:	c1 f7       	brne	.-16     	; 0x27d8 <ldexp+0x42>
    27e8:	bb 0f       	add	r27, r27
    27ea:	58 f7       	brcc	.-42     	; 0x27c2 <ldexp+0x2c>
    27ec:	11 f4       	brne	.+4      	; 0x27f2 <ldexp+0x5c>
    27ee:	60 ff       	sbrs	r22, 0
    27f0:	e8 cf       	rjmp	.-48     	; 0x27c2 <ldexp+0x2c>
    27f2:	6f 5f       	subi	r22, 0xFF	; 255
    27f4:	7f 4f       	sbci	r23, 0xFF	; 255
    27f6:	8f 4f       	sbci	r24, 0xFF	; 255
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	e3 cf       	rjmp	.-58     	; 0x27c2 <ldexp+0x2c>
    27fc:	bd cf       	rjmp	.-134    	; 0x2778 <__fp_szero>
    27fe:	0e f0       	brts	.+2      	; 0x2802 <ldexp+0x6c>
    2800:	37 c1       	rjmp	.+622    	; 0x2a70 <__fp_mpack>
    2802:	6f cf       	rjmp	.-290    	; 0x26e2 <__fp_nan>
    2804:	68 94       	set
    2806:	67 cf       	rjmp	.-306    	; 0x26d6 <__fp_inf>

00002808 <log>:
    2808:	9c df       	rcall	.-200    	; 0x2742 <__fp_splitA>
    280a:	c8 f3       	brcs	.-14     	; 0x27fe <ldexp+0x68>
    280c:	99 23       	and	r25, r25
    280e:	d1 f3       	breq	.-12     	; 0x2804 <ldexp+0x6e>
    2810:	c6 f3       	brts	.-16     	; 0x2802 <ldexp+0x6c>
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	1f 93       	push	r17
    2818:	0f 93       	push	r16
    281a:	ff 92       	push	r15
    281c:	c9 2f       	mov	r28, r25
    281e:	dd 27       	eor	r29, r29
    2820:	88 23       	and	r24, r24
    2822:	2a f0       	brmi	.+10     	; 0x282e <log+0x26>
    2824:	21 97       	sbiw	r28, 0x01	; 1
    2826:	66 0f       	add	r22, r22
    2828:	77 1f       	adc	r23, r23
    282a:	88 1f       	adc	r24, r24
    282c:	da f7       	brpl	.-10     	; 0x2824 <log+0x1c>
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e8       	ldi	r20, 0x80	; 128
    2834:	5f eb       	ldi	r21, 0xBF	; 191
    2836:	9f e3       	ldi	r25, 0x3F	; 63
    2838:	88 39       	cpi	r24, 0x98	; 152
    283a:	20 f0       	brcs	.+8      	; 0x2844 <log+0x3c>
    283c:	80 3e       	cpi	r24, 0xE0	; 224
    283e:	30 f0       	brcs	.+12     	; 0x284c <log+0x44>
    2840:	21 96       	adiw	r28, 0x01	; 1
    2842:	8f 77       	andi	r24, 0x7F	; 127
    2844:	fd d8       	rcall	.-3590   	; 0x1a40 <__addsf3>
    2846:	ec e0       	ldi	r30, 0x0C	; 12
    2848:	f1 e0       	ldi	r31, 0x01	; 1
    284a:	03 c0       	rjmp	.+6      	; 0x2852 <log+0x4a>
    284c:	f9 d8       	rcall	.-3598   	; 0x1a40 <__addsf3>
    284e:	e9 e3       	ldi	r30, 0x39	; 57
    2850:	f1 e0       	ldi	r31, 0x01	; 1
    2852:	4a df       	rcall	.-364    	; 0x26e8 <__fp_powser>
    2854:	8b 01       	movw	r16, r22
    2856:	be 01       	movw	r22, r28
    2858:	ec 01       	movw	r28, r24
    285a:	fb 2e       	mov	r15, r27
    285c:	6f 57       	subi	r22, 0x7F	; 127
    285e:	71 09       	sbc	r23, r1
    2860:	75 95       	asr	r23
    2862:	77 1f       	adc	r23, r23
    2864:	88 0b       	sbc	r24, r24
    2866:	99 0b       	sbc	r25, r25
    2868:	4e db       	rcall	.-2404   	; 0x1f06 <__floatsisf>
    286a:	28 e1       	ldi	r18, 0x18	; 24
    286c:	32 e7       	ldi	r19, 0x72	; 114
    286e:	41 e3       	ldi	r20, 0x31	; 49
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	47 d0       	rcall	.+142    	; 0x2902 <__mulsf3x>
    2874:	af 2d       	mov	r26, r15
    2876:	98 01       	movw	r18, r16
    2878:	ae 01       	movw	r20, r28
    287a:	ff 90       	pop	r15
    287c:	0f 91       	pop	r16
    287e:	1f 91       	pop	r17
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	a2 d0       	rcall	.+324    	; 0x29ca <__addsf3x>
    2886:	10 c1       	rjmp	.+544    	; 0x2aa8 <__fp_round>

00002888 <modf>:
    2888:	fa 01       	movw	r30, r20
    288a:	dc 01       	movw	r26, r24
    288c:	aa 0f       	add	r26, r26
    288e:	bb 1f       	adc	r27, r27
    2890:	9b 01       	movw	r18, r22
    2892:	ac 01       	movw	r20, r24
    2894:	bf 57       	subi	r27, 0x7F	; 127
    2896:	28 f4       	brcc	.+10     	; 0x28a2 <modf+0x1a>
    2898:	22 27       	eor	r18, r18
    289a:	33 27       	eor	r19, r19
    289c:	44 27       	eor	r20, r20
    289e:	50 78       	andi	r21, 0x80	; 128
    28a0:	1f c0       	rjmp	.+62     	; 0x28e0 <modf+0x58>
    28a2:	b7 51       	subi	r27, 0x17	; 23
    28a4:	88 f4       	brcc	.+34     	; 0x28c8 <modf+0x40>
    28a6:	ab 2f       	mov	r26, r27
    28a8:	00 24       	eor	r0, r0
    28aa:	46 95       	lsr	r20
    28ac:	37 95       	ror	r19
    28ae:	27 95       	ror	r18
    28b0:	01 1c       	adc	r0, r1
    28b2:	a3 95       	inc	r26
    28b4:	d2 f3       	brmi	.-12     	; 0x28aa <modf+0x22>
    28b6:	00 20       	and	r0, r0
    28b8:	69 f0       	breq	.+26     	; 0x28d4 <modf+0x4c>
    28ba:	22 0f       	add	r18, r18
    28bc:	33 1f       	adc	r19, r19
    28be:	44 1f       	adc	r20, r20
    28c0:	b3 95       	inc	r27
    28c2:	da f3       	brmi	.-10     	; 0x28ba <modf+0x32>
    28c4:	0d d0       	rcall	.+26     	; 0x28e0 <modf+0x58>
    28c6:	8b c8       	rjmp	.-3818   	; 0x19de <__subsf3>
    28c8:	61 30       	cpi	r22, 0x01	; 1
    28ca:	71 05       	cpc	r23, r1
    28cc:	a0 e8       	ldi	r26, 0x80	; 128
    28ce:	8a 07       	cpc	r24, r26
    28d0:	b9 46       	sbci	r27, 0x69	; 105
    28d2:	30 f4       	brcc	.+12     	; 0x28e0 <modf+0x58>
    28d4:	9b 01       	movw	r18, r22
    28d6:	ac 01       	movw	r20, r24
    28d8:	66 27       	eor	r22, r22
    28da:	77 27       	eor	r23, r23
    28dc:	88 27       	eor	r24, r24
    28de:	90 78       	andi	r25, 0x80	; 128
    28e0:	30 96       	adiw	r30, 0x00	; 0
    28e2:	21 f0       	breq	.+8      	; 0x28ec <modf+0x64>
    28e4:	20 83       	st	Z, r18
    28e6:	31 83       	std	Z+1, r19	; 0x01
    28e8:	42 83       	std	Z+2, r20	; 0x02
    28ea:	53 83       	std	Z+3, r21	; 0x03
    28ec:	08 95       	ret
    28ee:	ce d0       	rcall	.+412    	; 0x2a8c <__fp_pscA>
    28f0:	28 f0       	brcs	.+10     	; 0x28fc <modf+0x74>
    28f2:	d3 d0       	rcall	.+422    	; 0x2a9a <__fp_pscB>
    28f4:	18 f0       	brcs	.+6      	; 0x28fc <modf+0x74>
    28f6:	95 23       	and	r25, r21
    28f8:	09 f0       	breq	.+2      	; 0x28fc <modf+0x74>
    28fa:	ed ce       	rjmp	.-550    	; 0x26d6 <__fp_inf>
    28fc:	f2 ce       	rjmp	.-540    	; 0x26e2 <__fp_nan>
    28fe:	11 24       	eor	r1, r1
    2900:	3b cf       	rjmp	.-394    	; 0x2778 <__fp_szero>

00002902 <__mulsf3x>:
    2902:	17 df       	rcall	.-466    	; 0x2732 <__fp_split3>
    2904:	a0 f3       	brcs	.-24     	; 0x28ee <modf+0x66>

00002906 <__mulsf3_pse>:
    2906:	95 9f       	mul	r25, r21
    2908:	d1 f3       	breq	.-12     	; 0x28fe <modf+0x76>
    290a:	95 0f       	add	r25, r21
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	55 1f       	adc	r21, r21
    2910:	62 9f       	mul	r22, r18
    2912:	f0 01       	movw	r30, r0
    2914:	72 9f       	mul	r23, r18
    2916:	bb 27       	eor	r27, r27
    2918:	f0 0d       	add	r31, r0
    291a:	b1 1d       	adc	r27, r1
    291c:	63 9f       	mul	r22, r19
    291e:	aa 27       	eor	r26, r26
    2920:	f0 0d       	add	r31, r0
    2922:	b1 1d       	adc	r27, r1
    2924:	aa 1f       	adc	r26, r26
    2926:	64 9f       	mul	r22, r20
    2928:	66 27       	eor	r22, r22
    292a:	b0 0d       	add	r27, r0
    292c:	a1 1d       	adc	r26, r1
    292e:	66 1f       	adc	r22, r22
    2930:	82 9f       	mul	r24, r18
    2932:	22 27       	eor	r18, r18
    2934:	b0 0d       	add	r27, r0
    2936:	a1 1d       	adc	r26, r1
    2938:	62 1f       	adc	r22, r18
    293a:	73 9f       	mul	r23, r19
    293c:	b0 0d       	add	r27, r0
    293e:	a1 1d       	adc	r26, r1
    2940:	62 1f       	adc	r22, r18
    2942:	83 9f       	mul	r24, r19
    2944:	a0 0d       	add	r26, r0
    2946:	61 1d       	adc	r22, r1
    2948:	22 1f       	adc	r18, r18
    294a:	74 9f       	mul	r23, r20
    294c:	33 27       	eor	r19, r19
    294e:	a0 0d       	add	r26, r0
    2950:	61 1d       	adc	r22, r1
    2952:	23 1f       	adc	r18, r19
    2954:	84 9f       	mul	r24, r20
    2956:	60 0d       	add	r22, r0
    2958:	21 1d       	adc	r18, r1
    295a:	82 2f       	mov	r24, r18
    295c:	76 2f       	mov	r23, r22
    295e:	6a 2f       	mov	r22, r26
    2960:	11 24       	eor	r1, r1
    2962:	9f 57       	subi	r25, 0x7F	; 127
    2964:	50 40       	sbci	r21, 0x00	; 0
    2966:	8a f0       	brmi	.+34     	; 0x298a <__mulsf3_pse+0x84>
    2968:	e1 f0       	breq	.+56     	; 0x29a2 <__mulsf3_pse+0x9c>
    296a:	88 23       	and	r24, r24
    296c:	4a f0       	brmi	.+18     	; 0x2980 <__mulsf3_pse+0x7a>
    296e:	ee 0f       	add	r30, r30
    2970:	ff 1f       	adc	r31, r31
    2972:	bb 1f       	adc	r27, r27
    2974:	66 1f       	adc	r22, r22
    2976:	77 1f       	adc	r23, r23
    2978:	88 1f       	adc	r24, r24
    297a:	91 50       	subi	r25, 0x01	; 1
    297c:	50 40       	sbci	r21, 0x00	; 0
    297e:	a9 f7       	brne	.-22     	; 0x296a <__mulsf3_pse+0x64>
    2980:	9e 3f       	cpi	r25, 0xFE	; 254
    2982:	51 05       	cpc	r21, r1
    2984:	70 f0       	brcs	.+28     	; 0x29a2 <__mulsf3_pse+0x9c>
    2986:	a7 ce       	rjmp	.-690    	; 0x26d6 <__fp_inf>
    2988:	f7 ce       	rjmp	.-530    	; 0x2778 <__fp_szero>
    298a:	5f 3f       	cpi	r21, 0xFF	; 255
    298c:	ec f3       	brlt	.-6      	; 0x2988 <__mulsf3_pse+0x82>
    298e:	98 3e       	cpi	r25, 0xE8	; 232
    2990:	dc f3       	brlt	.-10     	; 0x2988 <__mulsf3_pse+0x82>
    2992:	86 95       	lsr	r24
    2994:	77 95       	ror	r23
    2996:	67 95       	ror	r22
    2998:	b7 95       	ror	r27
    299a:	f7 95       	ror	r31
    299c:	e7 95       	ror	r30
    299e:	9f 5f       	subi	r25, 0xFF	; 255
    29a0:	c1 f7       	brne	.-16     	; 0x2992 <__mulsf3_pse+0x8c>
    29a2:	fe 2b       	or	r31, r30
    29a4:	88 0f       	add	r24, r24
    29a6:	91 1d       	adc	r25, r1
    29a8:	96 95       	lsr	r25
    29aa:	87 95       	ror	r24
    29ac:	97 f9       	bld	r25, 7
    29ae:	08 95       	ret
    29b0:	6d d0       	rcall	.+218    	; 0x2a8c <__fp_pscA>
    29b2:	30 f0       	brcs	.+12     	; 0x29c0 <__mulsf3_pse+0xba>
    29b4:	72 d0       	rcall	.+228    	; 0x2a9a <__fp_pscB>
    29b6:	20 f0       	brcs	.+8      	; 0x29c0 <__mulsf3_pse+0xba>
    29b8:	31 f4       	brne	.+12     	; 0x29c6 <__mulsf3_pse+0xc0>
    29ba:	9f 3f       	cpi	r25, 0xFF	; 255
    29bc:	11 f4       	brne	.+4      	; 0x29c2 <__mulsf3_pse+0xbc>
    29be:	1e f4       	brtc	.+6      	; 0x29c6 <__mulsf3_pse+0xc0>
    29c0:	90 ce       	rjmp	.-736    	; 0x26e2 <__fp_nan>
    29c2:	0e f4       	brtc	.+2      	; 0x29c6 <__mulsf3_pse+0xc0>
    29c4:	e0 95       	com	r30
    29c6:	e7 fb       	bst	r30, 7
    29c8:	86 ce       	rjmp	.-756    	; 0x26d6 <__fp_inf>

000029ca <__addsf3x>:
    29ca:	e9 2f       	mov	r30, r25
    29cc:	b2 de       	rcall	.-668    	; 0x2732 <__fp_split3>
    29ce:	80 f3       	brcs	.-32     	; 0x29b0 <__mulsf3_pse+0xaa>
    29d0:	ba 17       	cp	r27, r26
    29d2:	62 07       	cpc	r22, r18
    29d4:	73 07       	cpc	r23, r19
    29d6:	84 07       	cpc	r24, r20
    29d8:	95 07       	cpc	r25, r21
    29da:	18 f0       	brcs	.+6      	; 0x29e2 <__addsf3x+0x18>
    29dc:	71 f4       	brne	.+28     	; 0x29fa <__addsf3x+0x30>
    29de:	9e f5       	brtc	.+102    	; 0x2a46 <__addsf3x+0x7c>
    29e0:	ca ce       	rjmp	.-620    	; 0x2776 <__fp_zero>
    29e2:	0e f4       	brtc	.+2      	; 0x29e6 <__addsf3x+0x1c>
    29e4:	e0 95       	com	r30
    29e6:	0b 2e       	mov	r0, r27
    29e8:	ba 2f       	mov	r27, r26
    29ea:	a0 2d       	mov	r26, r0
    29ec:	0b 01       	movw	r0, r22
    29ee:	b9 01       	movw	r22, r18
    29f0:	90 01       	movw	r18, r0
    29f2:	0c 01       	movw	r0, r24
    29f4:	ca 01       	movw	r24, r20
    29f6:	a0 01       	movw	r20, r0
    29f8:	11 24       	eor	r1, r1
    29fa:	ff 27       	eor	r31, r31
    29fc:	59 1b       	sub	r21, r25
    29fe:	99 f0       	breq	.+38     	; 0x2a26 <__addsf3x+0x5c>
    2a00:	59 3f       	cpi	r21, 0xF9	; 249
    2a02:	50 f4       	brcc	.+20     	; 0x2a18 <__addsf3x+0x4e>
    2a04:	50 3e       	cpi	r21, 0xE0	; 224
    2a06:	68 f1       	brcs	.+90     	; 0x2a62 <__addsf3x+0x98>
    2a08:	1a 16       	cp	r1, r26
    2a0a:	f0 40       	sbci	r31, 0x00	; 0
    2a0c:	a2 2f       	mov	r26, r18
    2a0e:	23 2f       	mov	r18, r19
    2a10:	34 2f       	mov	r19, r20
    2a12:	44 27       	eor	r20, r20
    2a14:	58 5f       	subi	r21, 0xF8	; 248
    2a16:	f3 cf       	rjmp	.-26     	; 0x29fe <__addsf3x+0x34>
    2a18:	46 95       	lsr	r20
    2a1a:	37 95       	ror	r19
    2a1c:	27 95       	ror	r18
    2a1e:	a7 95       	ror	r26
    2a20:	f0 40       	sbci	r31, 0x00	; 0
    2a22:	53 95       	inc	r21
    2a24:	c9 f7       	brne	.-14     	; 0x2a18 <__addsf3x+0x4e>
    2a26:	7e f4       	brtc	.+30     	; 0x2a46 <__addsf3x+0x7c>
    2a28:	1f 16       	cp	r1, r31
    2a2a:	ba 0b       	sbc	r27, r26
    2a2c:	62 0b       	sbc	r22, r18
    2a2e:	73 0b       	sbc	r23, r19
    2a30:	84 0b       	sbc	r24, r20
    2a32:	ba f0       	brmi	.+46     	; 0x2a62 <__addsf3x+0x98>
    2a34:	91 50       	subi	r25, 0x01	; 1
    2a36:	a1 f0       	breq	.+40     	; 0x2a60 <__addsf3x+0x96>
    2a38:	ff 0f       	add	r31, r31
    2a3a:	bb 1f       	adc	r27, r27
    2a3c:	66 1f       	adc	r22, r22
    2a3e:	77 1f       	adc	r23, r23
    2a40:	88 1f       	adc	r24, r24
    2a42:	c2 f7       	brpl	.-16     	; 0x2a34 <__addsf3x+0x6a>
    2a44:	0e c0       	rjmp	.+28     	; 0x2a62 <__addsf3x+0x98>
    2a46:	ba 0f       	add	r27, r26
    2a48:	62 1f       	adc	r22, r18
    2a4a:	73 1f       	adc	r23, r19
    2a4c:	84 1f       	adc	r24, r20
    2a4e:	48 f4       	brcc	.+18     	; 0x2a62 <__addsf3x+0x98>
    2a50:	87 95       	ror	r24
    2a52:	77 95       	ror	r23
    2a54:	67 95       	ror	r22
    2a56:	b7 95       	ror	r27
    2a58:	f7 95       	ror	r31
    2a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    2a5c:	08 f0       	brcs	.+2      	; 0x2a60 <__addsf3x+0x96>
    2a5e:	b3 cf       	rjmp	.-154    	; 0x29c6 <__mulsf3_pse+0xc0>
    2a60:	93 95       	inc	r25
    2a62:	88 0f       	add	r24, r24
    2a64:	08 f0       	brcs	.+2      	; 0x2a68 <__addsf3x+0x9e>
    2a66:	99 27       	eor	r25, r25
    2a68:	ee 0f       	add	r30, r30
    2a6a:	97 95       	ror	r25
    2a6c:	87 95       	ror	r24
    2a6e:	08 95       	ret

00002a70 <__fp_mpack>:
    2a70:	9f 3f       	cpi	r25, 0xFF	; 255
    2a72:	31 f0       	breq	.+12     	; 0x2a80 <__fp_mpack_finite+0xc>

00002a74 <__fp_mpack_finite>:
    2a74:	91 50       	subi	r25, 0x01	; 1
    2a76:	20 f4       	brcc	.+8      	; 0x2a80 <__fp_mpack_finite+0xc>
    2a78:	87 95       	ror	r24
    2a7a:	77 95       	ror	r23
    2a7c:	67 95       	ror	r22
    2a7e:	b7 95       	ror	r27
    2a80:	88 0f       	add	r24, r24
    2a82:	91 1d       	adc	r25, r1
    2a84:	96 95       	lsr	r25
    2a86:	87 95       	ror	r24
    2a88:	97 f9       	bld	r25, 7
    2a8a:	08 95       	ret

00002a8c <__fp_pscA>:
    2a8c:	00 24       	eor	r0, r0
    2a8e:	0a 94       	dec	r0
    2a90:	16 16       	cp	r1, r22
    2a92:	17 06       	cpc	r1, r23
    2a94:	18 06       	cpc	r1, r24
    2a96:	09 06       	cpc	r0, r25
    2a98:	08 95       	ret

00002a9a <__fp_pscB>:
    2a9a:	00 24       	eor	r0, r0
    2a9c:	0a 94       	dec	r0
    2a9e:	12 16       	cp	r1, r18
    2aa0:	13 06       	cpc	r1, r19
    2aa2:	14 06       	cpc	r1, r20
    2aa4:	05 06       	cpc	r0, r21
    2aa6:	08 95       	ret

00002aa8 <__fp_round>:
    2aa8:	09 2e       	mov	r0, r25
    2aaa:	03 94       	inc	r0
    2aac:	00 0c       	add	r0, r0
    2aae:	11 f4       	brne	.+4      	; 0x2ab4 <__fp_round+0xc>
    2ab0:	88 23       	and	r24, r24
    2ab2:	52 f0       	brmi	.+20     	; 0x2ac8 <__fp_round+0x20>
    2ab4:	bb 0f       	add	r27, r27
    2ab6:	40 f4       	brcc	.+16     	; 0x2ac8 <__fp_round+0x20>
    2ab8:	bf 2b       	or	r27, r31
    2aba:	11 f4       	brne	.+4      	; 0x2ac0 <__fp_round+0x18>
    2abc:	60 ff       	sbrs	r22, 0
    2abe:	04 c0       	rjmp	.+8      	; 0x2ac8 <__fp_round+0x20>
    2ac0:	6f 5f       	subi	r22, 0xFF	; 255
    2ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac8:	08 95       	ret

00002aca <_exit>:
    2aca:	f8 94       	cli

00002acc <__stop_program>:
    2acc:	ff cf       	rjmp	.-2      	; 0x2acc <__stop_program>
